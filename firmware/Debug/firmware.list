
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ec  080080ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f4  080080f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080080fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000070  0800816c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800816c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010730  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ba  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022109  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcaf  00000000  00000000  00056911  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b89  00000000  00000000  000625c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004814  00000000  00000000  001341c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fcc 	.word	0x08007fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007fcc 	.word	0x08007fcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <read_TIM5>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t read_TIM5() {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <read_TIM5+0x14>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40000c00 	.word	0x40000c00

08000588 <HAL_GPIO_EXTI_Callback>:

// IMU interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(GPIO_Pin == GPIO_PIN_9)
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000598:	d114      	bne.n	80005c4 <HAL_GPIO_EXTI_Callback+0x3c>
  {
  	flag_read_imu_values = 1;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_GPIO_EXTI_Callback+0x44>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
  	soft_rtc_imu_subs = read_TIM5();
 80005a0:	f7ff ffe6 	bl	8000570 <read_TIM5>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x48>)
 80005a8:	601a      	str	r2, [r3, #0]
		soft_rtc_imu_s = soft_rtc_s;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80005b0:	701a      	strb	r2, [r3, #0]
		soft_rtc_imu_m = soft_rtc_m;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80005b8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005c0:	f002 f97d 	bl	80028be <HAL_GPIO_TogglePin>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000008e 	.word	0x2000008e
 80005d0:	20000098 	.word	0x20000098
 80005d4:	20000094 	.word	0x20000094
 80005d8:	20000096 	.word	0x20000096
 80005dc:	20000093 	.word	0x20000093
 80005e0:	20000095 	.word	0x20000095
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <setup_mpu>:

// IMU setup
void setup_mpu(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 1, 1};
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <setup_mpu+0x60>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60bb      	str	r3, [r7, #8]
	uint8_t adds[] = {107, 55, 26, 56};
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <setup_mpu+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	607b      	str	r3, [r7, #4]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 80005fa:	2304      	movs	r3, #4
 80005fc:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e019      	b.n	8000638 <setup_mpu+0x50>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 1000);
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f107 0210 	add.w	r2, r7, #16
 800060a:	4413      	add	r3, r2
 800060c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000610:	b299      	uxth	r1, r3
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	4413      	add	r3, r2
 800061a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	2201      	movs	r2, #1
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	460a      	mov	r2, r1
 800062a:	21d0      	movs	r1, #208	; 0xd0
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <setup_mpu+0x68>)
 800062e:	f002 fab1 	bl	8002b94 <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	7bfa      	ldrb	r2, [r7, #15]
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	429a      	cmp	r2, r3
 800063e:	d3e1      	bcc.n	8000604 <setup_mpu+0x1c>
	}
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08007fe4 	.word	0x08007fe4
 800064c:	08007fe8 	.word	0x08007fe8
 8000650:	20000120 	.word	0x20000120

08000654 <make_message>:

// Message preparation to be sent to PC
void make_message(void) {
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b08f      	sub	sp, #60	; 0x3c
 8000658:	af0a      	add	r7, sp, #40	; 0x28
	sprintf((char*)str,
 800065a:	4b47      	ldr	r3, [pc, #284]	; (8000778 <make_message+0x124>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	469c      	mov	ip, r3
 8000660:	4b46      	ldr	r3, [pc, #280]	; (800077c <make_message+0x128>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	469e      	mov	lr, r3
		"%04x"																			//4
		"\n", 																			//1
																								//=58
		(uint8_t)soft_rtc_imu_m,
		(uint8_t)soft_rtc_imu_s,
		(uint16_t)(soft_rtc_imu_subs>>16),
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <make_message+0x12c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 800066e:	4619      	mov	r1, r3
		(uint16_t)(soft_rtc_imu_subs),
 8000670:	4b43      	ldr	r3, [pc, #268]	; (8000780 <make_message+0x12c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 8000676:	4618      	mov	r0, r3

		(uint16_t)(dat_buf[0]<<8 | dat_buf[1]),
 8000678:	4b42      	ldr	r3, [pc, #264]	; (8000784 <make_message+0x130>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21a      	sxth	r2, r3
 8000680:	4b40      	ldr	r3, [pc, #256]	; (8000784 <make_message+0x130>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 800068c:	461c      	mov	r4, r3
		(uint16_t)(dat_buf[2]<<8 | dat_buf[3]),
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <make_message+0x130>)
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <make_message+0x130>)
 8000698:	78db      	ldrb	r3, [r3, #3]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b21b      	sxth	r3, r3
 80006a0:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006a2:	461d      	mov	r5, r3
		(uint16_t)(dat_buf[4]<<8 | dat_buf[5]),
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <make_message+0x130>)
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <make_message+0x130>)
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006b8:	461e      	mov	r6, r3
		(uint16_t)(dat_buf[6]<<8 | dat_buf[7]),
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <make_message+0x130>)
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <make_message+0x130>)
 80006c4:	79db      	ldrb	r3, [r3, #7]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006ce:	60fb      	str	r3, [r7, #12]
		(uint16_t)(dat_buf[8]<<8 | dat_buf[9]),
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <make_message+0x130>)
 80006d2:	7a1b      	ldrb	r3, [r3, #8]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <make_message+0x130>)
 80006da:	7a5b      	ldrb	r3, [r3, #9]
 80006dc:	b21b      	sxth	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006e4:	60bb      	str	r3, [r7, #8]
		(uint16_t)(dat_buf[10]<<8 | dat_buf[11]),
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <make_message+0x130>)
 80006e8:	7a9b      	ldrb	r3, [r3, #10]
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <make_message+0x130>)
 80006f0:	7adb      	ldrb	r3, [r3, #11]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006fa:	607b      	str	r3, [r7, #4]
		(uint16_t)(dat_buf[12]<<8 | dat_buf[13]),
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <make_message+0x130>)
 80006fe:	7b1b      	ldrb	r3, [r3, #12]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <make_message+0x130>)
 8000706:	7b5b      	ldrb	r3, [r3, #13]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21b      	sxth	r3, r3
 800070e:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 8000710:	461a      	mov	r2, r3
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <make_message+0x134>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	9309      	str	r3, [sp, #36]	; 0x24
 8000718:	9208      	str	r2, [sp, #32]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	9207      	str	r2, [sp, #28]
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	9206      	str	r2, [sp, #24]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	9305      	str	r3, [sp, #20]
 8000726:	9604      	str	r6, [sp, #16]
 8000728:	9503      	str	r5, [sp, #12]
 800072a:	9402      	str	r4, [sp, #8]
 800072c:	9001      	str	r0, [sp, #4]
 800072e:	9100      	str	r1, [sp, #0]
 8000730:	4673      	mov	r3, lr
 8000732:	4662      	mov	r2, ip
 8000734:	4915      	ldr	r1, [pc, #84]	; (800078c <make_message+0x138>)
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <make_message+0x13c>)
 8000738:	f007 f842 	bl	80077c0 <siprintf>

		count);
	if (buf_flag_lidar_ts_ready == 1) {
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <make_message+0x140>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d115      	bne.n	8000770 <make_message+0x11c>
		sprintf((char*)(str + N_IMU_CHARS),
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <make_message+0x144>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <make_message+0x148>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <make_message+0x14c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461c      	mov	r4, r3
			"%02x %02x %04x %04x"											//15
			"\n", 																		//1
																								//=18
			(uint8_t)soft_rtc_lidar_m,
			(uint8_t)soft_rtc_lidar_s,
			(uint16_t)(soft_rtc_lidar_subs>>16),
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <make_message+0x150>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	b29b      	uxth	r3, r3
		sprintf((char*)(str + N_IMU_CHARS),
 800075a:	461a      	mov	r2, r3
			(uint16_t)(soft_rtc_lidar_subs)
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <make_message+0x150>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
		sprintf((char*)(str + N_IMU_CHARS),
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	4623      	mov	r3, r4
 8000768:	460a      	mov	r2, r1
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <make_message+0x154>)
 800076c:	f007 f828 	bl	80077c0 <siprintf>
		);
	}
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	20000095 	.word	0x20000095
 800077c:	20000096 	.word	0x20000096
 8000780:	20000098 	.word	0x20000098
 8000784:	20000378 	.word	0x20000378
 8000788:	2000008c 	.word	0x2000008c
 800078c:	08007fec 	.word	0x08007fec
 8000790:	20000388 	.word	0x20000388
 8000794:	20000091 	.word	0x20000091
 8000798:	200003c2 	.word	0x200003c2
 800079c:	2000009d 	.word	0x2000009d
 80007a0:	2000009e 	.word	0x2000009e
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	0800802c 	.word	0x0800802c

080007ac <checksum>:

uint8_t checksum(char * s, uint8_t start, uint8_t end) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
 80007b8:	4613      	mov	r3, r2
 80007ba:	70bb      	strb	r3, [r7, #2]
    uint8_t c = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=start; i<end; i++) {
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	73bb      	strb	r3, [r7, #14]
 80007c4:	e009      	b.n	80007da <checksum+0x2e>
      c = c ^ s[i];
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4053      	eors	r3, r2
 80007d2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=start; i<end; i++) {
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	3301      	adds	r3, #1
 80007d8:	73bb      	strb	r3, [r7, #14]
 80007da:	7bba      	ldrb	r2, [r7, #14]
 80007dc:	78bb      	ldrb	r3, [r7, #2]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d3f1      	bcc.n	80007c6 <checksum+0x1a>
    }
    return c;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <make_lidar_string>:
// NMEA GPRMC message generation
void make_lidar_string(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af02      	add	r7, sp, #8
	sprintf((char*)lidar_str,
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <make_lidar_string+0x54>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <make_lidar_string+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <make_lidar_string+0x5c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	460b      	mov	r3, r1
 800080a:	4911      	ldr	r1, [pc, #68]	; (8000850 <make_lidar_string+0x60>)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <make_lidar_string+0x64>)
 800080e:	f006 ffd7 	bl	80077c0 <siprintf>
																													//=66
		(uint8_t)soft_rtc_lidar_h,
		(uint8_t)soft_rtc_lidar_m,
		(uint8_t)soft_rtc_lidar_s
	);
	uint8_t start = 1, end = N_CHARS_TO_LIDAR-5;
 8000812:	2301      	movs	r3, #1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	233d      	movs	r3, #61	; 0x3d
 8000818:	71bb      	strb	r3, [r7, #6]
	uint8_t c = checksum((char*)lidar_str, start, end);
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <make_lidar_string+0x64>)
 8000822:	f7ff ffc3 	bl	80007ac <checksum>
 8000826:	4603      	mov	r3, r0
 8000828:	717b      	strb	r3, [r7, #5]
	sprintf((char*)&lidar_str[end+1], "%02X", c);
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	3301      	adds	r3, #1
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <make_lidar_string+0x64>)
 8000830:	4413      	add	r3, r2
 8000832:	797a      	ldrb	r2, [r7, #5]
 8000834:	4908      	ldr	r1, [pc, #32]	; (8000858 <make_lidar_string+0x68>)
 8000836:	4618      	mov	r0, r3
 8000838:	f006 ffc2 	bl	80077c0 <siprintf>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000009c 	.word	0x2000009c
 8000848:	2000009d 	.word	0x2000009d
 800084c:	2000009e 	.word	0x2000009e
 8000850:	08008044 	.word	0x08008044
 8000854:	20000254 	.word	0x20000254
 8000858:	08008090 	.word	0x08008090

0800085c <delay>:

void delay(uint16_t n) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<n; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	81fb      	strh	r3, [r7, #14]
 800086a:	e002      	b.n	8000872 <delay+0x16>
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	3301      	adds	r3, #1
 8000870:	81fb      	strh	r3, [r7, #14]
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3f8      	bcc.n	800086c <delay+0x10>
		;
	}
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <cp>:

void cp() {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e008      	b.n	80008a6 <cp+0x1e>
		dat_buf[i] = dat[i];
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <cp+0x30>)
 800089a:	5c89      	ldrb	r1, [r1, r2]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <cp+0x34>)
 800089e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3301      	adds	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b0d      	cmp	r3, #13
 80008aa:	d9f3      	bls.n	8000894 <cp+0xc>
	}
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	20000378 	.word	0x20000378

080008c0 <HAL_TIM_OC_DelayElapsedCallback>:
// Timers interrupts handler
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d127      	bne.n	8000924 <HAL_TIM_OC_DelayElapsedCallback+0x64>
		soft_rtc_s ++;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008de:	701a      	strb	r2, [r3, #0]
		if (soft_rtc_s == 60) {
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b3c      	cmp	r3, #60	; 0x3c
 80008e6:	d13e      	bne.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
			soft_rtc_s = 0;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			soft_rtc_m ++;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008f8:	701a      	strb	r2, [r3, #0]
			if (soft_rtc_m == 60) {
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b3c      	cmp	r3, #60	; 0x3c
 8000900:	d131      	bne.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
				soft_rtc_m = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
				soft_rtc_h ++;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8000912:	701a      	strb	r2, [r3, #0]
				if (soft_rtc_h == 24) {
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b18      	cmp	r3, #24
 800091a:	d124      	bne.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
					soft_rtc_h = 0;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			soft_rtc_lidar_m = soft_rtc_m;
			flag_lidar_ts_ready = 1;
			flag_transmit_to_lidar = 1;
		}
	}
}
 8000922:	e020      	b.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
	else if (htim->Instance == htim1.Instance)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d11a      	bne.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)==GPIO_PIN_SET) { // if timer output is HIGH
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8000936:	f001 ff91 	bl	800285c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d112      	bne.n	8000966 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
			soft_rtc_lidar_subs = read_TIM5();
 8000940:	f7ff fe16 	bl	8000570 <read_TIM5>
 8000944:	4602      	mov	r2, r0
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 8000948:	601a      	str	r2, [r3, #0]
			soft_rtc_lidar_s = soft_rtc_s;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 8000950:	701a      	strb	r2, [r3, #0]
			soft_rtc_lidar_m = soft_rtc_m;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000958:	701a      	strb	r2, [r3, #0]
			flag_lidar_ts_ready = 1;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
			flag_transmit_to_lidar = 1;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000174 	.word	0x20000174
 8000974:	20000094 	.word	0x20000094
 8000978:	20000093 	.word	0x20000093
 800097c:	20000092 	.word	0x20000092
 8000980:	20000298 	.word	0x20000298
 8000984:	40021000 	.word	0x40021000
 8000988:	200000a0 	.word	0x200000a0
 800098c:	2000009e 	.word	0x2000009e
 8000990:	2000009d 	.word	0x2000009d
 8000994:	20000090 	.word	0x20000090
 8000998:	2000008f 	.word	0x2000008f

0800099c <HAL_UART_RxCpltCallback>:
// UART receive (PC -> MCU) interrupt handler template
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
    	;
    }
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f001 f859 	bl	8001a6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f8b3 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 fbb5 	bl	800112c <MX_GPIO_Init>
  MX_TIM1_Init();
 80009c2:	f000 f987 	bl	8000cd4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009c6:	f000 fa27 	bl	8000e18 <MX_TIM3_Init>
  MX_DMA_Init();
 80009ca:	f000 fb77 	bl	80010bc <MX_DMA_Init>
  MX_I2C1_Init();
 80009ce:	f000 f92b 	bl	8000c28 <MX_I2C1_Init>
  MX_RTC_Init();
 80009d2:	f000 f959 	bl	8000c88 <MX_RTC_Init>
  MX_UART4_Init();
 80009d6:	f000 fb1d 	bl	8001014 <MX_UART4_Init>
  MX_UART5_Init();
 80009da:	f000 fb45 	bl	8001068 <MX_UART5_Init>
  MX_TIM5_Init();
 80009de:	f000 fa99 	bl	8000f14 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80009e2:	2017      	movs	r0, #23
 80009e4:	f001 f9db 	bl	8001d9e <HAL_NVIC_DisableIRQ>
  setup_mpu();
 80009e8:	f7ff fdfe 	bl	80005e8 <setup_mpu>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ec:	2017      	movs	r0, #23
 80009ee:	f001 f9c8 	bl	8001d82 <HAL_NVIC_EnableIRQ>

	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_1);
 80009f2:	2100      	movs	r1, #0
 80009f4:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <main+0x130>)
 80009f6:	f005 f8e7 	bl	8005bc8 <HAL_TIM_OC_Start_IT>
	delay(10);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f7ff ff2e 	bl	800085c <delay>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000a00:	2100      	movs	r1, #0
 8000a02:	4838      	ldr	r0, [pc, #224]	; (8000ae4 <main+0x134>)
 8000a04:	f005 f8a2 	bl	8005b4c <HAL_TIM_OC_Start>
	delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f7ff ff27 	bl	800085c <delay>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4835      	ldr	r0, [pc, #212]	; (8000ae8 <main+0x138>)
 8000a12:	f005 f8d9 	bl	8005bc8 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // for debugging
 8000a16:	2120      	movs	r1, #32
 8000a18:	4834      	ldr	r0, [pc, #208]	; (8000aec <main+0x13c>)
 8000a1a:	f001 ff1f 	bl	800285c <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4832      	ldr	r0, [pc, #200]	; (8000af0 <main+0x140>)
 8000a28:	f001 ff30 	bl	800288c <HAL_GPIO_WritePin>
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)); // forward timer output signal to led pin
  	if (flag_read_imu_values == 1) { // if IMU data is ready to be read
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <main+0x144>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d145      	bne.n	8000ac0 <main+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000a34:	2017      	movs	r0, #23
 8000a36:	f001 f9b2 	bl	8001d9e <HAL_NVIC_DisableIRQ>
			flag_read_imu_values = 0;
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <main+0x144>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			count++;
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <main+0x148>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <main+0x148>)
 8000a4a:	801a      	strh	r2, [r3, #0]
			cp();
 8000a4c:	f7ff ff1c 	bl	8000888 <cp>
			// Read IMU data
			HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat, 14);
 8000a50:	230e      	movs	r3, #14
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <main+0x14c>)
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	223b      	movs	r2, #59	; 0x3b
 8000a5c:	21d0      	movs	r1, #208	; 0xd0
 8000a5e:	4828      	ldr	r0, [pc, #160]	; (8000b00 <main+0x150>)
 8000a60:	f002 f992 	bl	8002d88 <HAL_I2C_Mem_Read_DMA>
			buf_flag_lidar_ts_ready = flag_lidar_ts_ready;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <main+0x154>)
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <main+0x158>)
 8000a6a:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
			// Send data to PC
			uint8_t mes_length = N_IMU_CHARS + buf_flag_lidar_ts_ready * N_LIDAR_CHARS;
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <main+0x158>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	00d2      	lsls	r2, r2, #3
 8000a74:	4413      	add	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	333a      	adds	r3, #58	; 0x3a
 8000a7c:	71fb      	strb	r3, [r7, #7]
			make_message();
 8000a7e:	f7ff fde9 	bl	8000654 <make_message>
			HAL_UART_Transmit_DMA(&huart4, str, mes_length);//, 1000);	//HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4920      	ldr	r1, [pc, #128]	; (8000b0c <main+0x15c>)
 8000a8a:	4821      	ldr	r0, [pc, #132]	; (8000b10 <main+0x160>)
 8000a8c:	f005 ffa8 	bl	80069e0 <HAL_UART_Transmit_DMA>
			delay(7000);
 8000a90:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000a94:	f7ff fee2 	bl	800085c <delay>
			//if(count & 1024) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);}
			if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);}
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <main+0x164>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <main+0xfc>
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <main+0x164>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aac:	2017      	movs	r0, #23
 8000aae:	f001 f968 	bl	8001d82 <HAL_NVIC_EnableIRQ>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);

			if (buf_flag_lidar_ts_ready == 1) {
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <main+0x158>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <main+0x110>
				flag_lidar_ts_ready = 0;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <main+0x154>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
			}
		}
  	if (flag_transmit_to_lidar==1) { // if NMEA GPRMC message must be sent
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <main+0x168>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d1a6      	bne.n	8000a16 <main+0x66>
  		flag_transmit_to_lidar = 0;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <main+0x168>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
  		make_lidar_string();
 8000ace:	f7ff fe8f 	bl	80007f0 <make_lidar_string>
  		// Send NMEA GPRMC message to lidar
  		HAL_UART_Transmit_DMA(&huart5, lidar_str, N_CHARS_TO_LIDAR);
 8000ad2:	2242      	movs	r2, #66	; 0x42
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <main+0x16c>)
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <main+0x170>)
 8000ad8:	f005 ff82 	bl	80069e0 <HAL_UART_Transmit_DMA>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // for debugging
 8000adc:	e79b      	b.n	8000a16 <main+0x66>
 8000ade:	bf00      	nop
 8000ae0:	20000174 	.word	0x20000174
 8000ae4:	200001b4 	.word	0x200001b4
 8000ae8:	20000298 	.word	0x20000298
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	2000008e 	.word	0x2000008e
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	200000b0 	.word	0x200000b0
 8000b00:	20000120 	.word	0x20000120
 8000b04:	20000090 	.word	0x20000090
 8000b08:	20000091 	.word	0x20000091
 8000b0c:	20000388 	.word	0x20000388
 8000b10:	20000338 	.word	0x20000338
 8000b14:	40013c00 	.word	0x40013c00
 8000b18:	2000008f 	.word	0x2000008f
 8000b1c:	20000254 	.word	0x20000254
 8000b20:	200001f4 	.word	0x200001f4

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b098      	sub	sp, #96	; 0x60
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f006 fe3c 	bl	80077b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <SystemClock_Config+0xf8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <SystemClock_Config+0xf8>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <SystemClock_Config+0xf8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <SystemClock_Config+0xfc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <SystemClock_Config+0xfc>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <SystemClock_Config+0xfc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f93c 	bl	8004e38 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bc6:	f000 fb47 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2102      	movs	r1, #2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fb96 	bl	8005318 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bf2:	f000 fb31 	bl	8001258 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SystemClock_Config+0x100>)
 8000bfc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fd7a 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c0e:	f000 fb23 	bl	8001258 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3760      	adds	r7, #96	; 0x60
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000
 8000c24:	00190300 	.word	0x00190300

08000c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <MX_I2C1_Init+0x58>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <MX_I2C1_Init+0x5c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c68:	f001 fe5c 	bl	8002924 <HAL_I2C_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c72:	f000 faf1 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000120 	.word	0x20000120
 8000c80:	40005400 	.word	0x40005400
 8000c84:	00061a80 	.word	0x00061a80

08000c88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_RTC_Init+0x44>)
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <MX_RTC_Init+0x48>)
 8000c90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_RTC_Init+0x44>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32-1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_RTC_Init+0x44>)
 8000c9a:	221f      	movs	r2, #31
 8000c9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_RTC_Init+0x44>)
 8000ca0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ca4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_RTC_Init+0x44>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_RTC_Init+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_RTC_Init+0x44>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_RTC_Init+0x44>)
 8000cba:	f004 fe01 	bl	80058c0 <HAL_RTC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000cc4:	f000 fac8 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000234 	.word	0x20000234
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f006 fd4f 	bl	80077b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d12:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d14:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <MX_TIM1_Init+0x140>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7680-1;
 8000d18:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d1a:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8000d1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d28:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d34:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d40:	4833      	ldr	r0, [pc, #204]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d42:	f004 fea2 	bl	8005a8a <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d4c:	f000 fa84 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	482c      	ldr	r0, [pc, #176]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d5e:	f005 f91f 	bl	8005fa0 <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d68:	f000 fa76 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d6c:	4828      	ldr	r0, [pc, #160]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d6e:	f004 feb7 	bl	8005ae0 <HAL_TIM_OC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d78:	f000 fa6e 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000d8c:	f005 fcf8 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d96:	f000 fa5f 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d9a:	2330      	movs	r3, #48	; 0x30
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000dc0:	f005 f88e 	bl	8005ee0 <HAL_TIM_OC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000dca:	f000 fa45 	bl	8001258 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000df2:	f005 fd41 	bl	8006878 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000dfc:	f000 fa2c 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <MX_TIM1_Init+0x13c>)
 8000e02:	f000 fb55 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3758      	adds	r7, #88	; 0x58
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000298 	.word	0x20000298
 8000e14:	40010000 	.word	0x40010000

08000e18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <MX_TIM3_Init+0xf8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e6e:	f004 fe0c 	bl	8005a8a <HAL_TIM_Base_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e78:	f000 f9ee 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4820      	ldr	r0, [pc, #128]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e8a:	f005 f889 	bl	8005fa0 <HAL_TIM_ConfigClockSource>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e94:	f000 f9e0 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000e9a:	f004 fe21 	bl	8005ae0 <HAL_TIM_OC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ea4:	f000 f9d8 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000eb8:	f005 fc62 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000ec2:	f000 f9c9 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ec6:	2330      	movs	r3, #48	; 0x30
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000ede:	f004 ffff 	bl	8005ee0 <HAL_TIM_OC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ee8:	f000 f9b6 	bl	8001258 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM3_Init+0xf4>)
 8000efe:	f000 fad7 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	; 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001b4 	.word	0x200001b4
 8000f10:	40000400 	.word	0x40000400

08000f14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <MX_TIM5_Init+0xf8>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3-1;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25600000 - 1;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f58:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_TIM5_Init+0xfc>)
 8000f5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f68:	4827      	ldr	r0, [pc, #156]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f6a:	f004 fd8e 	bl	8005a8a <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f74:	f000 f970 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f86:	f005 f80b 	bl	8005fa0 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000f90:	f000 f962 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000f96:	f004 fda3 	bl	8005ae0 <HAL_TIM_OC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 f95a 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000fb4:	f005 fbe4 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000fbe:	f000 f94b 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000fda:	f004 ff81 	bl	8005ee0 <HAL_TIM_OC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000fe4:	f000 f938 	bl	8001258 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	699a      	ldr	r2, [r3, #24]
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0208 	orr.w	r2, r2, #8
 8000ff6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM5_Init+0xf4>)
 8000ffa:	f000 fa59 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000174 	.word	0x20000174
 800100c:	40000c00 	.word	0x40000c00
 8001010:	01869fff 	.word	0x01869fff

08001014 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_UART4_Init+0x48>)
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <MX_UART4_Init+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_UART4_Init+0x48>)
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MX_UART4_Init+0x50>)
 8001022:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_UART4_Init+0x48>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_UART4_Init+0x48>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_UART4_Init+0x48>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_UART4_Init+0x48>)
 8001038:	220c      	movs	r2, #12
 800103a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_UART4_Init+0x48>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_UART4_Init+0x48>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_UART4_Init+0x48>)
 800104a:	f005 fc7b 	bl	8006944 <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8001054:	f000 f900 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000338 	.word	0x20000338
 8001060:	40004c00 	.word	0x40004c00
 8001064:	0007a120 	.word	0x0007a120

08001068 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_UART5_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_UART5_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_UART5_Init+0x4c>)
 8001074:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001078:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_UART5_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_UART5_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_UART5_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_UART5_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_UART5_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_UART5_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_UART5_Init+0x4c>)
 80010a0:	f005 fc50 	bl	8006944 <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f8d5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	40005000 	.word	0x40005000

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_DMA_Init+0x6c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_DMA_Init+0x6c>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_DMA_Init+0x6c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	200d      	movs	r0, #13
 80010e4:	f000 fe31 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010e8:	200d      	movs	r0, #13
 80010ea:	f000 fe4a 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 fe29 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010f8:	200f      	movs	r0, #15
 80010fa:	f000 fe42 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2010      	movs	r0, #16
 8001104:	f000 fe21 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001108:	2010      	movs	r0, #16
 800110a:	f000 fe3a 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	202f      	movs	r0, #47	; 0x2f
 8001114:	f000 fe19 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001118:	202f      	movs	r0, #47	; 0x2f
 800111a:	f000 fe32 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b40      	ldr	r3, [pc, #256]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a3f      	ldr	r2, [pc, #252]	; (8001248 <MX_GPIO_Init+0x11c>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a38      	ldr	r2, [pc, #224]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b32      	ldr	r3, [pc, #200]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <MX_GPIO_Init+0x11c>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <MX_GPIO_Init+0x11c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_GPIO_Init+0x11c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <MX_GPIO_Init+0x120>)
 80011f2:	f001 fb4b 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <MX_GPIO_Init+0x120>)
 8001210:	f001 f98a 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_GPIO_Init+0x124>)
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <MX_GPIO_Init+0x128>)
 800122a:	f001 f97d 	bl	8002528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2017      	movs	r0, #23
 8001234:	f000 fd89 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001238:	2017      	movs	r0, #23
 800123a:	f000 fda2 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	; 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	10110000 	.word	0x10110000
 8001254:	40020800 	.word	0x40020800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_I2C_MspInit+0xf0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d162      	bne.n	80013a0 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	2312      	movs	r3, #18
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001306:	2304      	movs	r3, #4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4827      	ldr	r0, [pc, #156]	; (80013b0 <HAL_I2C_MspInit+0xf8>)
 8001312:	f001 f909 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_I2C_MspInit+0xf4>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HAL_I2C_MspInit+0x100>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 800133a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001368:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800136c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001376:	f000 fd2d 	bl	8001dd4 <HAL_DMA_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001380:	f7ff ff6a 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_I2C_MspInit+0xfc>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	201f      	movs	r0, #31
 8001396:	f000 fcd8 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800139a:	201f      	movs	r0, #31
 800139c:	f000 fcf1 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400
 80013b4:	200002d8 	.word	0x200002d8
 80013b8:	40026088 	.word	0x40026088

080013bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_RTC_MspInit+0x24>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d102      	bne.n	80013d4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RTC_MspInit+0x28>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40002800 	.word	0x40002800
 80013e4:	42470e3c 	.word	0x42470e3c

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2a      	ldr	r2, [pc, #168]	; (80014a0 <HAL_TIM_Base_MspInit+0xb8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d116      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 4, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2104      	movs	r1, #4
 800141a:	201b      	movs	r0, #27
 800141c:	f000 fc95 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001420:	201b      	movs	r0, #27
 8001422:	f000 fcae 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001426:	e036      	b.n	8001496 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_TIM_Base_MspInit+0xc0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d116      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2104      	movs	r1, #4
 8001452:	201d      	movs	r0, #29
 8001454:	f000 fc79 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001458:	201d      	movs	r0, #29
 800145a:	f000 fc92 	bl	8001d82 <HAL_NVIC_EnableIRQ>
}
 800145e:	e01a      	b.n	8001496 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_TIM_Base_MspInit+0xc4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_Base_MspInit+0xbc>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2032      	movs	r0, #50	; 0x32
 800148c:	f000 fc5d 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001490:	2032      	movs	r0, #50	; 0x32
 8001492:	f000 fc76 	bl	8001d82 <HAL_NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40000400 	.word	0x40000400
 80014ac:	40000c00 	.word	0x40000c00

080014b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <HAL_TIM_MspPostInit+0xf8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11f      	bne.n	8001512 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4829      	ldr	r0, [pc, #164]	; (80015b0 <HAL_TIM_MspPostInit+0x100>)
 800150c:	f001 f80c 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001510:	e046      	b.n	80015a0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_TIM_MspPostInit+0x104>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11e      	bne.n	800155a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001538:	2340      	movs	r3, #64	; 0x40
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001548:	2302      	movs	r3, #2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4819      	ldr	r0, [pc, #100]	; (80015b8 <HAL_TIM_MspPostInit+0x108>)
 8001554:	f000 ffe8 	bl	8002528 <HAL_GPIO_Init>
}
 8001558:	e022      	b.n	80015a0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_TIM_MspPostInit+0x10c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d11d      	bne.n	80015a0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_MspPostInit+0xfc>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001580:	2301      	movs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001590:	2302      	movs	r3, #2
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <HAL_TIM_MspPostInit+0x108>)
 800159c:	f000 ffc4 	bl	8002528 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40000c00 	.word	0x40000c00

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a90      	ldr	r2, [pc, #576]	; (8001820 <HAL_UART_MspInit+0x260>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	f040 8092 	bne.w	8001708 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	4b8e      	ldr	r3, [pc, #568]	; (8001824 <HAL_UART_MspInit+0x264>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a8d      	ldr	r2, [pc, #564]	; (8001824 <HAL_UART_MspInit+0x264>)
 80015ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_UART_MspInit+0x264>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	4b87      	ldr	r3, [pc, #540]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a86      	ldr	r2, [pc, #536]	; (8001824 <HAL_UART_MspInit+0x264>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b84      	ldr	r3, [pc, #528]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800162e:	2308      	movs	r3, #8
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	487b      	ldr	r0, [pc, #492]	; (8001828 <HAL_UART_MspInit+0x268>)
 800163a:	f000 ff75 	bl	8002528 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001640:	4a7b      	ldr	r2, [pc, #492]	; (8001830 <HAL_UART_MspInit+0x270>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001644:	4b79      	ldr	r3, [pc, #484]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <HAL_UART_MspInit+0x26c>)
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b74      	ldr	r3, [pc, #464]	; (800182c <HAL_UART_MspInit+0x26c>)
 800165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b71      	ldr	r3, [pc, #452]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_UART_MspInit+0x26c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b6e      	ldr	r3, [pc, #440]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_UART_MspInit+0x26c>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800167e:	486b      	ldr	r0, [pc, #428]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001680:	f000 fba8 	bl	8001dd4 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800168a:	f7ff fde5 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a66      	ldr	r2, [pc, #408]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_UART_MspInit+0x26c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_UART_MspInit+0x274>)
 800169c:	4a66      	ldr	r2, [pc, #408]	; (8001838 <HAL_UART_MspInit+0x278>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b4:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80016c8:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80016da:	4856      	ldr	r0, [pc, #344]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016dc:	f000 fb7a 	bl	8001dd4 <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80016e6:	f7ff fdb7 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_UART_MspInit+0x274>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	2034      	movs	r0, #52	; 0x34
 80016fc:	f000 fb25 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001700:	2034      	movs	r0, #52	; 0x34
 8001702:	f000 fb3e 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001706:	e086      	b.n	8001816 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==UART5)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_UART_MspInit+0x27c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	f040 8081 	bne.w	8001816 <HAL_UART_MspInit+0x256>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_UART_MspInit+0x264>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a41      	ldr	r2, [pc, #260]	; (8001824 <HAL_UART_MspInit+0x264>)
 800171e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_UART_MspInit+0x264>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a33      	ldr	r2, [pc, #204]	; (8001824 <HAL_UART_MspInit+0x264>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_UART_MspInit+0x264>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800177a:	2308      	movs	r3, #8
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4828      	ldr	r0, [pc, #160]	; (8001828 <HAL_UART_MspInit+0x268>)
 8001786:	f000 fecf 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800178a:	2304      	movs	r3, #4
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800179a:	2308      	movs	r3, #8
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4826      	ldr	r0, [pc, #152]	; (8001840 <HAL_UART_MspInit+0x280>)
 80017a6:	f000 febf 	bl	8002528 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_UART_MspInit+0x288>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80017ea:	4816      	ldr	r0, [pc, #88]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017ec:	f000 faf2 	bl	8001dd4 <HAL_DMA_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80017f6:	f7ff fd2f 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x284>)
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001800:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0x284>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	2035      	movs	r0, #53	; 0x35
 800180c:	f000 fa9d 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001810:	2035      	movs	r0, #53	; 0x35
 8001812:	f000 fab6 	bl	8001d82 <HAL_NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	; 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004c00 	.word	0x40004c00
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800
 800182c:	200003d4 	.word	0x200003d4
 8001830:	40026070 	.word	0x40026070
 8001834:	200000c0 	.word	0x200000c0
 8001838:	40026040 	.word	0x40026040
 800183c:	40005000 	.word	0x40005000
 8001840:	40020c00 	.word	0x40020c00
 8001844:	20000434 	.word	0x20000434
 8001848:	400260b8 	.word	0x400260b8

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f936 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <DMA1_Stream2_IRQHandler+0x10>)
 80018ae:	f000 fbb9 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000c0 	.word	0x200000c0

080018bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <DMA1_Stream4_IRQHandler+0x10>)
 80018c2:	f000 fbaf 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003d4 	.word	0x200003d4

080018d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DMA1_Stream5_IRQHandler+0x10>)
 80018d6:	f000 fba5 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002d8 	.word	0x200002d8

080018e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80018e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018ec:	f001 f802 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM1_CC_IRQHandler+0x10>)
 80018fa:	f004 f9e9 	bl	8005cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000298 	.word	0x20000298

08001908 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM3_IRQHandler+0x10>)
 800190e:	f004 f9df 	bl	8005cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001b4 	.word	0x200001b4

0800191c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <I2C1_EV_IRQHandler+0x10>)
 8001922:	f001 fb7d 	bl	8003020 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000120 	.word	0x20000120

08001930 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DMA1_Stream7_IRQHandler+0x10>)
 8001936:	f000 fb75 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000434 	.word	0x20000434

08001944 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM5_IRQHandler+0x10>)
 800194a:	f004 f9c1 	bl	8005cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000174 	.word	0x20000174

08001958 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <UART4_IRQHandler+0x10>)
 800195e:	f005 f8ab 	bl	8006ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000338 	.word	0x20000338

0800196c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <UART5_IRQHandler+0x10>)
 8001972:	f005 f8a1 	bl	8006ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001f4 	.word	0x200001f4

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f005 fed4 	bl	800775c <__errno>
 80019b4:	4602      	mov	r2, r0
 80019b6:	230c      	movs	r3, #12
 80019b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20020000 	.word	0x20020000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	200000a4 	.word	0x200000a4
 80019e8:	200004a0 	.word	0x200004a0

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <SystemInit+0x28>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <SystemInit+0x28>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SystemInit+0x28>)
 8001a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a06:	609a      	str	r2, [r3, #8]
#endif
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a1e:	e003      	b.n	8001a28 <LoopCopyDataInit>

08001a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a26:	3104      	adds	r1, #4

08001a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a30:	d3f6      	bcc.n	8001a20 <CopyDataInit>
  ldr  r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a34:	e002      	b.n	8001a3c <LoopFillZerobss>

08001a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a38:	f842 3b04 	str.w	r3, [r2], #4

08001a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a40:	d3f9      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd3 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f005 fe8f 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7fe ffb1 	bl	80009b0 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a54:	080080fc 	.word	0x080080fc
  ldr  r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001a60:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001a64:	2000049c 	.word	0x2000049c

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f94d 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fbe2 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f973 	bl	8001dba <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aec:	f000 f92d 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000494 	.word	0x20000494

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000494 	.word	0x20000494

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db10      	blt.n	8001c24 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4909      	ldr	r1, [pc, #36]	; (8001c30 <__NVIC_DisableIRQ+0x40>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	3320      	adds	r3, #32
 8001c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff07 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff1c 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff0f 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff1f 	bl	8001bf0 <__NVIC_DisableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff94 	bl	8001cf0 <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff feaa 	bl	8001b38 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e099      	b.n	8001f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e10:	e00f      	b.n	8001e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e12:	f7ff fe91 	bl	8001b38 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d908      	bls.n	8001e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e078      	b.n	8001f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e8      	bne.n	8001e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_DMA_Init+0x158>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d107      	bne.n	8001e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4313      	orrs	r3, r2
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d117      	bne.n	8001ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00e      	beq.n	8001ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 faab 	bl	8002434 <DMA_CheckFifoParam>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e016      	b.n	8001f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa62 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8001f04:	4603      	mov	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	223f      	movs	r2, #63	; 0x3f
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	f010803f 	.word	0xf010803f

08001f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Start_IT+0x26>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e040      	b.n	8001fd8 <HAL_DMA_Start_IT+0xa8>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12f      	bne.n	8001fca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f9f4 	bl	800236c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	223f      	movs	r2, #63	; 0x3f
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0216 	orr.w	r2, r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0208 	orr.w	r2, r2, #8
 8001fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e005      	b.n	8001fd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d004      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00c      	b.n	8002018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2205      	movs	r2, #5
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_DMA_IRQHandler+0x258>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a92      	ldr	r2, [pc, #584]	; (8002280 <HAL_DMA_IRQHandler+0x25c>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2208      	movs	r2, #8
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01a      	beq.n	8002090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2208      	movs	r2, #8
 800207e:	409a      	lsls	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2204      	movs	r2, #4
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d012      	beq.n	80020fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2204      	movs	r2, #4
 80020ea:	409a      	lsls	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f043 0204 	orr.w	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	2210      	movs	r2, #16
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d043      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03c      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2210      	movs	r2, #16
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d018      	beq.n	8002166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d024      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
 8002152:	e01f      	b.n	8002194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
 8002164:	e016      	b.n	8002194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0208 	bic.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	2220      	movs	r2, #32
 800219a:	409a      	lsls	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 808e 	beq.w	80022c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8086 	beq.w	80022c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2220      	movs	r2, #32
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d136      	bne.n	800223c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0216 	bic.w	r2, r2, #22
 80021dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_DMA_IRQHandler+0x1da>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0208 	bic.w	r2, r2, #8
 800220c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	223f      	movs	r2, #63	; 0x3f
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07d      	beq.n	800232e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
        }
        return;
 800223a:	e078      	b.n	800232e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01c      	beq.n	8002284 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d108      	bne.n	800226a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	2b00      	cmp	r3, #0
 800225e:	d030      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e02b      	b.n	80022c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
 800227a:	e022      	b.n	80022c2 <HAL_DMA_IRQHandler+0x29e>
 800227c:	20000000 	.word	0x20000000
 8002280:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0210 	bic.w	r2, r2, #16
 80022a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d032      	beq.n	8002330 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d022      	beq.n	800231c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d307      	bcc.n	800230a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f2      	bne.n	80022ee <HAL_DMA_IRQHandler+0x2ca>
 8002308:	e000      	b.n	800230c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800230a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	e000      	b.n	8002330 <HAL_DMA_IRQHandler+0x30c>
        return;
 800232e:	bf00      	nop
    }
  }
}
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop

08002338 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002346:	b2db      	uxtb	r3, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d108      	bne.n	80023ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023aa:	e007      	b.n	80023bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	080080b0 	.word	0x080080b0

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d855      	bhi.n	8002500 <DMA_CheckFifoParam+0xcc>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002501 	.word	0x08002501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d045      	beq.n	8002504 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e042      	b.n	8002504 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002486:	d13f      	bne.n	8002508 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03c      	b.n	8002508 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d836      	bhi.n	800250c <DMA_CheckFifoParam+0xd8>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e02f      	b.n	800251a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e021      	b.n	8002510 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d4:	d11e      	bne.n	8002514 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01b      	b.n	8002514 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <DMA_CheckFifoParam+0xb4>
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d003      	beq.n	80024ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e6:	e018      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e015      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00e      	beq.n	8002518 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      break;
 80024fe:	e00b      	b.n	8002518 <DMA_CheckFifoParam+0xe4>
      break;
 8002500:	bf00      	nop
 8002502:	e00a      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002504:	bf00      	nop
 8002506:	e008      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002508:	bf00      	nop
 800250a:	e006      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 800250c:	bf00      	nop
 800250e:	e004      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002510:	bf00      	nop
 8002512:	e002      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;   
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002518:	bf00      	nop
    }
  } 
  
  return status; 
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e16b      	b.n	800281c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 815a 	bne.w	8002816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d00b      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002576:	2b11      	cmp	r3, #17
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d130      	bne.n	80025e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0xfc>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80b4 	beq.w	8002816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <HAL_GPIO_Init+0x308>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <HAL_GPIO_Init+0x308>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <HAL_GPIO_Init+0x308>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a5a      	ldr	r2, [pc, #360]	; (8002834 <HAL_GPIO_Init+0x30c>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <HAL_GPIO_Init+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x226>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a50      	ldr	r2, [pc, #320]	; (800283c <HAL_GPIO_Init+0x314>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x222>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_GPIO_Init+0x318>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x31c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x21a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x216>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x324>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x212>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x328>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x32c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x20a>
 800272e:	2307      	movs	r3, #7
 8002730:	e00e      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002732:	2308      	movs	r3, #8
 8002734:	e00c      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002736:	2306      	movs	r3, #6
 8002738:	e00a      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273a:	2305      	movs	r3, #5
 800273c:	e008      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273e:	2304      	movs	r3, #4
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002742:	2303      	movs	r3, #3
 8002744:	e004      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002746:	2302      	movs	r3, #2
 8002748:	e002      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274e:	2300      	movs	r3, #0
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f002 0203 	and.w	r2, r2, #3
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	4093      	lsls	r3, r2
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002760:	4934      	ldr	r1, [pc, #208]	; (8002834 <HAL_GPIO_Init+0x30c>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_GPIO_Init+0x330>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002792:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_GPIO_Init+0x330>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_GPIO_Init+0x330>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027bc:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_GPIO_Init+0x330>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_GPIO_Init+0x330>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_GPIO_Init+0x330>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_GPIO_Init+0x330>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_GPIO_Init+0x330>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2b0f      	cmp	r3, #15
 8002820:	f67f ae90 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3724      	adds	r7, #36	; 0x24
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e001      	b.n	800287e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	401a      	ands	r2, r3
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d104      	bne.n	80028e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fe38 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e11f      	b.n	8002b76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fcb4 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002988:	f002 fe90 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800298c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a7b      	ldr	r2, [pc, #492]	; (8002b80 <HAL_I2C_Init+0x25c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d807      	bhi.n	80029a8 <HAL_I2C_Init+0x84>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7a      	ldr	r2, [pc, #488]	; (8002b84 <HAL_I2C_Init+0x260>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e006      	b.n	80029b6 <HAL_I2C_Init+0x92>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a77      	ldr	r2, [pc, #476]	; (8002b88 <HAL_I2C_Init+0x264>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0db      	b.n	8002b76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a72      	ldr	r2, [pc, #456]	; (8002b8c <HAL_I2C_Init+0x268>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0c9b      	lsrs	r3, r3, #18
 80029c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a64      	ldr	r2, [pc, #400]	; (8002b80 <HAL_I2C_Init+0x25c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d802      	bhi.n	80029f8 <HAL_I2C_Init+0xd4>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e009      	b.n	8002a0c <HAL_I2C_Init+0xe8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_I2C_Init+0x26c>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4956      	ldr	r1, [pc, #344]	; (8002b80 <HAL_I2C_Init+0x25c>)
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d80d      	bhi.n	8002a48 <HAL_I2C_Init+0x124>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e59      	subs	r1, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	bf38      	it	cc
 8002a44:	2304      	movcc	r3, #4
 8002a46:	e04f      	b.n	8002ae8 <HAL_I2C_Init+0x1c4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <HAL_I2C_Init+0x150>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e012      	b.n	8002a9a <HAL_I2C_Init+0x176>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x17e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e022      	b.n	8002ae8 <HAL_I2C_Init+0x1c4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_I2C_Init+0x1a4>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e58      	subs	r0, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	440b      	add	r3, r1
 8002ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Init+0x1c4>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	6809      	ldr	r1, [r1, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6911      	ldr	r1, [r2, #16]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	000186a0 	.word	0x000186a0
 8002b84:	001e847f 	.word	0x001e847f
 8002b88:	003d08ff 	.word	0x003d08ff
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7fe ffc3 	bl	8001b38 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 80d9 	bne.w	8002d74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	496d      	ldr	r1, [pc, #436]	; (8002d80 <HAL_I2C_Mem_Write+0x1ec>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f001 ff90 	bl	8004af2 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Write+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0c5      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	; 0x21
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_I2C_Mem_Write+0x1f0>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 fc3a 	bl	80044dc <I2C_RequestMemoryWrite>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d052      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e081      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f002 f811 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x180>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1aa      	bne.n	8002c72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 fffd 	bl	8004d20 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da2:	f7fe fec9 	bl	8001b38 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	f040 8123 	bne.w	8003000 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dba:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_I2C_Mem_Read_DMA+0x284>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	4a93      	ldr	r2, [pc, #588]	; (8003010 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0a1a      	lsrs	r2, r3, #8
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0f9      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d0db      	beq.n	8002dd4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Mem_Read_DMA+0xa2>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0eb      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a61      	ldr	r2, [pc, #388]	; (8003014 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8085 	beq.w	8002fa6 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	4a5d      	ldr	r2, [pc, #372]	; (8003018 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002ea2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	; (800301c <HAL_I2C_Mem_Read_DMA+0x294>)
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2200      	movs	r2, #0
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	461a      	mov	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	f7ff f825 	bl	8001f30 <HAL_DMA_Start_IT>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d144      	bne.n	8002f7e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002ef4:	88f8      	ldrh	r0, [r7, #6]
 8002ef6:	893a      	ldrh	r2, [r7, #8]
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	2323      	movs	r3, #35	; 0x23
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4603      	mov	r3, r0
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f001 fb7d 	bl	8004604 <I2C_RequestMemoryRead>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e076      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d108      	bne.n	8002f2e <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e007      	b.n	8002f3e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	e03e      	b.n	8002ffc <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02d      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002fa6:	88f8      	ldrh	r0, [r7, #6]
 8002fa8:	893a      	ldrh	r2, [r7, #8]
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2323      	movs	r3, #35	; 0x23
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f001 fb24 	bl	8004604 <I2C_RequestMemoryRead>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01d      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	14f8b589 	.word	0x14f8b589
 8003014:	ffff0000 	.word	0xffff0000
 8003018:	080047d1 	.word	0x080047d1
 800301c:	0800497b 	.word	0x0800497b

08003020 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003040:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d003      	beq.n	8003058 <HAL_I2C_EV_IRQHandler+0x38>
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	f040 80b6 	bne.w	80031c4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <HAL_I2C_EV_IRQHandler+0x6e>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003078:	d003      	beq.n	8003082 <HAL_I2C_EV_IRQHandler+0x62>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003080:	d101      	bne.n	8003086 <HAL_I2C_EV_IRQHandler+0x66>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_I2C_EV_IRQHandler+0x68>
 8003086:	2300      	movs	r3, #0
 8003088:	2b01      	cmp	r3, #1
 800308a:	f000 8127 	beq.w	80032dc <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x92>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	0a5b      	lsrs	r3, r3, #9
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 feab 	bl	8004e00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fc75 	bl	800399a <I2C_Master_SB>
 80030b0:	e087      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	0a5b      	lsrs	r3, r3, #9
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fceb 	bl	8003aa6 <I2C_Master_ADD10>
 80030d0:	e077      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	0a5b      	lsrs	r3, r3, #9
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fd05 	bl	8003afa <I2C_Master_ADDR>
 80030f0:	e067      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d030      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	f000 80e8 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	09db      	lsrs	r3, r3, #7
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00f      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x11c>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_I2C_EV_IRQHandler+0x11c>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f941 	bl	80033bc <I2C_MasterTransmit_TXE>
 800313a:	e042      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80cb 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80c4 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9cb 	bl	80034f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315e:	e0bf      	b.n	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	f000 80b7 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x17e>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	0a9b      	lsrs	r3, r3, #10
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x17e>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa93 	bl	80036c2 <I2C_MasterReceive_RXNE>
 800319c:	e011      	b.n	80031c2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 809a 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0a5b      	lsrs	r3, r3, #9
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8093 	beq.w	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fb03 	bl	80037c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c0:	e08e      	b.n	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
 80031c2:	e08d      	b.n	80032e0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e007      	b.n	80031e6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x1f8>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0a5b      	lsrs	r3, r3, #9
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fec1 	bl	8003f98 <I2C_Slave_ADDR>
 8003216:	e066      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x218>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	0a5b      	lsrs	r3, r3, #9
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fef5 	bl	8004020 <I2C_Slave_STOPF>
 8003236:	e056      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003238:	7bbb      	ldrb	r3, [r7, #14]
 800323a:	2b21      	cmp	r3, #33	; 0x21
 800323c:	d002      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x224>
 800323e:	7bbb      	ldrb	r3, [r7, #14]
 8003240:	2b29      	cmp	r3, #41	; 0x29
 8003242:	d125      	bne.n	8003290 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	09db      	lsrs	r3, r3, #7
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00f      	beq.n	8003270 <HAL_I2C_EV_IRQHandler+0x250>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <HAL_I2C_EV_IRQHandler+0x250>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fdd7 	bl	8003e1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800326e:	e039      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d033      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02d      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fe04 	bl	8003e96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800328e:	e029      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00f      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0x29c>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0x29c>
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fe0f 	bl	8003ed8 <I2C_SlaveReceive_RXNE>
 80032ba:	e014      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	0a5b      	lsrs	r3, r3, #9
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fe3d 	bl	8003f54 <I2C_SlaveReceive_BTF>
 80032da:	e004      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80032dc:	bf00      	nop
 80032de:	e002      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e0:	bf00      	nop
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
 8003348:	4613      	mov	r3, r2
 800334a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d150      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b21      	cmp	r3, #33	; 0x21
 80033e6:	d14d      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d01d      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d01a      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033fa:	d016      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2211      	movs	r2, #17
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff62 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003428:	e060      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003438:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d107      	bne.n	8003474 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff7d 	bl	800336c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003472:	e03b      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff35 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003482:	e033      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b21      	cmp	r3, #33	; 0x21
 8003488:	d005      	beq.n	8003496 <I2C_MasterTransmit_TXE+0xda>
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d12d      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b22      	cmp	r3, #34	; 0x22
 8003494:	d12a      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034b0:	e01c      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d103      	bne.n	80034c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f898 	bl	80035f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80034c4:	e012      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034ea:	e7ff      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b21      	cmp	r3, #33	; 0x21
 800350c:	d165      	bne.n	80035da <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800353c:	e056      	b.n	80035ec <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d01d      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d01a      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003550:	d016      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003560:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2211      	movs	r2, #17
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff feb7 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 800357e:	e035      	b.n	80035ec <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d107      	bne.n	80035ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fed2 	bl	800336c <HAL_I2C_MemTxCpltCallback>
}
 80035c8:	e010      	b.n	80035ec <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fe8a 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 80035d8:	e008      	b.n	80035ec <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d102      	bne.n	80035ec <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f804 	bl	80035f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11d      	bne.n	8003640 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10b      	bne.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	1c9a      	adds	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003622:	e048      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	b29b      	uxth	r3, r3
 800362a:	121b      	asrs	r3, r3, #8
 800362c:	b2da      	uxtb	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800363e:	e03a      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10b      	bne.n	8003660 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	b2da      	uxtb	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800365e:	e02a      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	2b02      	cmp	r3, #2
 8003666:	d126      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b22      	cmp	r3, #34	; 0x22
 8003672:	d108      	bne.n	8003686 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	e017      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d111      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b22      	cmp	r3, #34	; 0x22
 80036d4:	d173      	bne.n	80037be <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d920      	bls.n	8003726 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d154      	bne.n	80037be <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003724:	e04b      	b.n	80037be <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	2b02      	cmp	r3, #2
 800372c:	d047      	beq.n	80037be <I2C_MasterReceive_RXNE+0xfc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <I2C_MasterReceive_RXNE+0x78>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d141      	bne.n	80037be <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003758:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d10a      	bne.n	80037aa <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fdec 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
}
 80037a8:	e009      	b.n	80037be <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2212      	movs	r2, #18
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fda1 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d11b      	bne.n	8003816 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003814:	e0bd      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d129      	bne.n	8003874 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00a      	beq.n	800384c <I2C_MasterReceive_BTF+0x86>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003872:	e08e      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d176      	bne.n	800396c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <I2C_MasterReceive_BTF+0xc4>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b10      	cmp	r3, #16
 8003888:	d108      	bne.n	800389c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e019      	b.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <I2C_MasterReceive_BTF+0xe2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d108      	bne.n	80038ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e00a      	b.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d007      	beq.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800392a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d10a      	bne.n	8003956 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fd16 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
}
 8003954:	e01d      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2212      	movs	r2, #18
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fccb 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
}
 800396a:	e012      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d117      	bne.n	80039de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039c8:	e067      	b.n	8003a9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]
}
 80039dc:	e05d      	b.n	8003a9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e6:	d133      	bne.n	8003a50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b21      	cmp	r3, #33	; 0x21
 80039f2:	d109      	bne.n	8003a08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e008      	b.n	8003a1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <I2C_Master_SB+0x92>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d032      	beq.n	8003a9a <I2C_Master_SB+0x100>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02d      	beq.n	8003a9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]
}
 8003a4e:	e024      	b.n	8003a9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10e      	bne.n	8003a76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	11db      	asrs	r3, r3, #7
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f063 030f 	orn	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]
}
 8003a74:	e011      	b.n	8003a9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10d      	bne.n	8003a9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	11db      	asrs	r3, r3, #7
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0306 	and.w	r3, r3, #6
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f063 030e 	orn	r3, r3, #14
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <I2C_Master_ADD10+0x24>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d011      	beq.n	8003aee <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <I2C_Master_ADD10+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aec:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b091      	sub	sp, #68	; 0x44
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b22      	cmp	r3, #34	; 0x22
 8003b22:	f040 8169 	bne.w	8003df8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <I2C_Master_ADDR+0x54>
 8003b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d10b      	bne.n	8003b4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	e160      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11d      	bne.n	8003b92 <I2C_Master_ADDR+0x98>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b5e:	d118      	bne.n	8003b92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b90:	e13e      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e115      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f040 808a 	bne.w	8003ce4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bd6:	d137      	bne.n	8003c48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d113      	bne.n	8003c20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	e0e7      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e0d3      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d02e      	beq.n	8003cac <I2C_Master_ADDR+0x1b2>
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d02b      	beq.n	8003cac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	2b12      	cmp	r3, #18
 8003c58:	d102      	bne.n	8003c60 <I2C_Master_ADDR+0x166>
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d125      	bne.n	8003cac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d00e      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d00b      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d008      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e007      	b.n	8003c94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	e0a1      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e085      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d14d      	bne.n	8003d8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d016      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d013      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d010      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d117      	bne.n	8003d72 <I2C_Master_ADDR+0x278>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d48:	d00b      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d008      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d005      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d002      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d107      	bne.n	8003d72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	e032      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d117      	bne.n	8003dda <I2C_Master_ADDR+0x2e0>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db0:	d00b      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d008      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d005      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d002      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d107      	bne.n	8003dda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003df6:	e00b      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	e7ff      	b.n	8003e10 <I2C_Master_ADDR+0x316>
 8003e10:	bf00      	nop
 8003e12:	3744      	adds	r7, #68	; 0x44
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02b      	beq.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d114      	bne.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b29      	cmp	r3, #41	; 0x29
 8003e68:	d111      	bne.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2221      	movs	r2, #33	; 0x21
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2228      	movs	r2, #40	; 0x28
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fa43 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d011      	beq.n	8003ecc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02c      	beq.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d114      	bne.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d111      	bne.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2222      	movs	r2, #34	; 0x22
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2228      	movs	r2, #40	; 0x28
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff f9ee 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d012      	beq.n	8003f8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fb2:	2b28      	cmp	r3, #40	; 0x28
 8003fb4:	d127      	bne.n	8004006 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	09db      	lsrs	r3, r3, #7
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	e002      	b.n	8003ff0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ff8:	89ba      	ldrh	r2, [r7, #12]
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f99c 	bl	800333c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004004:	e008      	b.n	8004018 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0202 	mvn.w	r2, #2
 800400e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800403e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407c:	d172      	bne.n	8004164 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b22      	cmp	r3, #34	; 0x22
 8004082:	d002      	beq.n	800408a <I2C_Slave_STOPF+0x6a>
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b2a      	cmp	r3, #42	; 0x2a
 8004088:	d135      	bne.n	80040f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe f938 	bl	8002338 <HAL_DMA_GetState>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d049      	beq.n	8004162 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <I2C_Slave_STOPF+0x258>)
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd ff80 	bl	8001fe0 <HAL_DMA_Abort_IT>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03d      	beq.n	8004162 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f0:	4610      	mov	r0, r2
 80040f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040f4:	e035      	b.n	8004162 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004128:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f902 	bl	8002338 <HAL_DMA_GetState>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d014      	beq.n	8004164 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <I2C_Slave_STOPF+0x258>)
 8004140:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd ff4a 	bl	8001fe0 <HAL_DMA_Abort_IT>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
 8004160:	e000      	b.n	8004164 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004162:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d03e      	beq.n	80041ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d112      	bne.n	80041a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d112      	bne.n	80041d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f043 0204 	orr.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f843 	bl	8004280 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041fa:	e039      	b.n	8004270 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004200:	d109      	bne.n	8004216 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2228      	movs	r2, #40	; 0x28
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff f889 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b28      	cmp	r3, #40	; 0x28
 8004220:	d111      	bne.n	8004246 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <I2C_Slave_STOPF+0x25c>)
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff f88a 	bl	8003358 <HAL_I2C_ListenCpltCallback>
}
 8004244:	e014      	b.n	8004270 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	2b22      	cmp	r3, #34	; 0x22
 800424c:	d002      	beq.n	8004254 <I2C_Slave_STOPF+0x234>
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b22      	cmp	r3, #34	; 0x22
 8004252:	d10d      	bne.n	8004270 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff f85c 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	080049f5 	.word	0x080049f5
 800427c:	ffff0000 	.word	0xffff0000

08004280 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b10      	cmp	r3, #16
 800429a:	d10a      	bne.n	80042b2 <I2C_ITError+0x32>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b22      	cmp	r3, #34	; 0x22
 80042a0:	d107      	bne.n	80042b2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042b8:	2b28      	cmp	r3, #40	; 0x28
 80042ba:	d107      	bne.n	80042cc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2228      	movs	r2, #40	; 0x28
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042ca:	e015      	b.n	80042f8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d006      	beq.n	80042ea <I2C_ITError+0x6a>
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b60      	cmp	r3, #96	; 0x60
 80042e0:	d003      	beq.n	80042ea <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004306:	d162      	bne.n	80043ce <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004316:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d020      	beq.n	8004368 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <I2C_ITError+0x254>)
 800432c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fe54 	bl	8001fe0 <HAL_DMA_Abort_IT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8089 	beq.w	8004452 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
 8004366:	e074      	b.n	8004452 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	4a59      	ldr	r2, [pc, #356]	; (80044d4 <I2C_ITError+0x254>)
 800436e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd fe33 	bl	8001fe0 <HAL_DMA_Abort_IT>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d068      	beq.n	8004452 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d10b      	bne.n	80043a6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
 80043cc:	e041      	b.n	8004452 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b60      	cmp	r3, #96	; 0x60
 80043d8:	d125      	bne.n	8004426 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d10b      	bne.n	800440e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fe ffc2 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
 8004424:	e015      	b.n	8004452 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d10b      	bne.n	800444c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fe ffa1 	bl	8003394 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10e      	bne.n	8004480 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800448e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d113      	bne.n	80044cc <I2C_ITError+0x24c>
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b28      	cmp	r3, #40	; 0x28
 80044a8:	d110      	bne.n	80044cc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <I2C_ITError+0x258>)
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fe ff46 	bl	8003358 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080049f5 	.word	0x080049f5
 80044d8:	ffff0000 	.word	0xffff0000

080044dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2200      	movs	r2, #0
 800450e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 faed 	bl	8004af2 <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e05f      	b.n	80045f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	492c      	ldr	r1, [pc, #176]	; (8004600 <I2C_RequestMemoryWrite+0x124>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fb26 	bl	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e04c      	b.n	80045f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	6a39      	ldr	r1, [r7, #32]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fb90 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2b04      	cmp	r3, #4
 800458a:	d107      	bne.n	800459c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e02b      	b.n	80045f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a6:	893b      	ldrh	r3, [r7, #8]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]
 80045b0:	e021      	b.n	80045f6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	6a39      	ldr	r1, [r7, #32]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fb6a 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d107      	bne.n	80045e8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e005      	b.n	80045f8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	00010002 	.word	0x00010002

08004604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	4603      	mov	r3, r0
 8004614:	817b      	strh	r3, [r7, #10]
 8004616:	460b      	mov	r3, r1
 8004618:	813b      	strh	r3, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	2200      	movs	r2, #0
 8004646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa51 	bl	8004af2 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0a9      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800467e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	4951      	ldr	r1, [pc, #324]	; (80047cc <I2C_RequestMemoryRead+0x1c8>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa8a 	bl	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e096      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	6a39      	ldr	r1, [r7, #32]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 faf4 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d107      	bne.n	80046d4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e075      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046de:	893b      	ldrh	r3, [r7, #8]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	611a      	str	r2, [r3, #16]
 80046e8:	e021      	b.n	800472e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046ea:	893b      	ldrh	r3, [r7, #8]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	6a39      	ldr	r1, [r7, #32]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 face 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	2b04      	cmp	r3, #4
 800470e:	d107      	bne.n	8004720 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e04f      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004724:	893b      	ldrh	r3, [r7, #8]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004730:	6a39      	ldr	r1, [r7, #32]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fab3 	bl	8004c9e <I2C_WaitOnTXEFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b04      	cmp	r3, #4
 8004744:	d107      	bne.n	8004756 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e034      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2200      	movs	r2, #0
 8004772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f9bb 	bl	8004af2 <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e013      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800479c:	897b      	ldrh	r3, [r7, #10]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	4906      	ldr	r1, [pc, #24]	; (80047cc <I2C_RequestMemoryRead+0x1c8>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f9f4 	bl	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	00010002 	.word	0x00010002

080047d0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ec:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004802:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	2200      	movs	r2, #0
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	2200      	movs	r2, #0
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800482a:	2b21      	cmp	r3, #33	; 0x21
 800482c:	d007      	beq.n	800483e <I2C_DMAXferCplt+0x6e>
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004834:	2b22      	cmp	r3, #34	; 0x22
 8004836:	d131      	bne.n	800489c <I2C_DMAXferCplt+0xcc>
 8004838:	7cbb      	ldrb	r3, [r7, #18]
 800483a:	2b20      	cmp	r3, #32
 800483c:	d12e      	bne.n	800489c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	2b29      	cmp	r3, #41	; 0x29
 8004858:	d10a      	bne.n	8004870 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2221      	movs	r2, #33	; 0x21
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2228      	movs	r2, #40	; 0x28
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004868:	6978      	ldr	r0, [r7, #20]
 800486a:	f7fe fd53 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
 800486e:	e00c      	b.n	800488a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b2a      	cmp	r3, #42	; 0x2a
 8004874:	d109      	bne.n	800488a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2222      	movs	r2, #34	; 0x22
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2228      	movs	r2, #40	; 0x28
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004884:	6978      	ldr	r0, [r7, #20]
 8004886:	f7fe fd4f 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004898:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800489a:	e06a      	b.n	8004972 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d064      	beq.n	8004972 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d8:	d009      	beq.n	80048ee <I2C_DMAXferCplt+0x11e>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d006      	beq.n	80048ee <I2C_DMAXferCplt+0x11e>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80048e6:	d002      	beq.n	80048ee <I2C_DMAXferCplt+0x11e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d107      	bne.n	80048fe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800490c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800492c:	6978      	ldr	r0, [r7, #20]
 800492e:	f7fe fd31 	bl	8003394 <HAL_I2C_ErrorCallback>
}
 8004932:	e01e      	b.n	8004972 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d10a      	bne.n	800495e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004956:	6978      	ldr	r0, [r7, #20]
 8004958:	f7fe fd12 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
}
 800495c:	e009      	b.n	8004972 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2212      	movs	r2, #18
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800496c:	6978      	ldr	r0, [r7, #20]
 800496e:	f7fe fcc7 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	2200      	movs	r2, #0
 8004996:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2200      	movs	r2, #0
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fd fcd3 	bl	8002354 <HAL_DMA_GetError>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d01b      	beq.n	80049ec <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7fe fcd4 	bl	8003394 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	2200      	movs	r2, #0
 8004a18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2200      	movs	r2, #0
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d10e      	bne.n	8004a9a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fe fc88 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a98:	e027      	b.n	8004aea <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a9a:	7afb      	ldrb	r3, [r7, #11]
 8004a9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa0:	2b28      	cmp	r3, #40	; 0x28
 8004aa2:	d117      	bne.n	8004ad4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ac2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2228      	movs	r2, #40	; 0x28
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ad2:	e007      	b.n	8004ae4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fe fc55 	bl	8003394 <HAL_I2C_ErrorCallback>
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b02:	e025      	b.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0a:	d021      	beq.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0c:	f7fd f814 	bl	8001b38 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e023      	b.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10d      	bne.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	43da      	mvns	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4013      	ands	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	e00c      	b.n	8004b90 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d0b6      	beq.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bae:	e051      	b.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d123      	bne.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f043 0204 	orr.w	r2, r3, #4
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e046      	b.n	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0e:	d021      	beq.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c10:	f7fc ff92 	bl	8001b38 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d116      	bne.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e020      	b.n	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10c      	bne.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	43da      	mvns	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e00b      	b.n	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d18d      	bne.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004caa:	e02d      	b.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f878 	bl	8004da2 <I2C_IsAcknowledgeFailed>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e02d      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc2:	d021      	beq.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fc ff38 	bl	8001b38 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d1ca      	bne.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2c:	e02d      	b.n	8004d8a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f837 	bl	8004da2 <I2C_IsAcknowledgeFailed>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e02d      	b.n	8004d9a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d44:	d021      	beq.n	8004d8a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fc fef7 	bl	8001b38 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e007      	b.n	8004d9a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d1ca      	bne.n	8004d2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db8:	d11b      	bne.n	8004df2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e10:	d103      	bne.n	8004e1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e18:	e007      	b.n	8004e2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e22:	d102      	bne.n	8004e2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2208      	movs	r2, #8
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e25b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d075      	beq.n	8004f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e56:	4ba3      	ldr	r3, [pc, #652]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00c      	beq.n	8004e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e62:	4ba0      	ldr	r3, [pc, #640]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d112      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6e:	4b9d      	ldr	r3, [pc, #628]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7a:	d10b      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	4b99      	ldr	r3, [pc, #612]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d05b      	beq.n	8004f40 <HAL_RCC_OscConfig+0x108>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d157      	bne.n	8004f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e236      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCC_OscConfig+0x74>
 8004e9e:	4b91      	ldr	r3, [pc, #580]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a90      	ldr	r2, [pc, #576]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e01d      	b.n	8004ee8 <HAL_RCC_OscConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x98>
 8004eb6:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a8a      	ldr	r2, [pc, #552]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a87      	ldr	r2, [pc, #540]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0xb0>
 8004ed0:	4b84      	ldr	r3, [pc, #528]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a83      	ldr	r2, [pc, #524]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fe22 	bl	8001b38 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fc fe1e 	bl	8001b38 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1fb      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xc0>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fe0e 	bl	8001b38 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fc fe0a 	bl	8001b38 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1e7      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	4b6c      	ldr	r3, [pc, #432]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0xe8>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d063      	beq.n	8005016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4e:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b62      	ldr	r3, [pc, #392]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d11c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f66:	4b5f      	ldr	r3, [pc, #380]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d116      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	4b5c      	ldr	r3, [pc, #368]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCC_OscConfig+0x152>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1bb      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4952      	ldr	r1, [pc, #328]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	e03a      	b.n	8005016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCC_OscConfig+0x2b0>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fc fdc3 	bl	8001b38 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb6:	f7fc fdbf 	bl	8001b38 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e19c      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd4:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4940      	ldr	r1, [pc, #256]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCC_OscConfig+0x2b0>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fc fda2 	bl	8001b38 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7fc fd9e 	bl	8001b38 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e17b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d030      	beq.n	8005084 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502a:	4b30      	ldr	r3, [pc, #192]	; (80050ec <HAL_RCC_OscConfig+0x2b4>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fc fd82 	bl	8001b38 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005038:	f7fc fd7e 	bl	8001b38 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e15b      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x200>
 8005056:	e015      	b.n	8005084 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCC_OscConfig+0x2b4>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505e:	f7fc fd6b 	bl	8001b38 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005066:	f7fc fd67 	bl	8001b38 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e144      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a0 	beq.w	80051d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d121      	bne.n	8005112 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_RCC_OscConfig+0x2b8>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fc fd2d 	bl	8001b38 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e011      	b.n	8005106 <HAL_RCC_OscConfig+0x2ce>
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470000 	.word	0x42470000
 80050ec:	42470e80 	.word	0x42470e80
 80050f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fd20 	bl	8001b38 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0fd      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b81      	ldr	r3, [pc, #516]	; (800530c <HAL_RCC_OscConfig+0x4d4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d106      	bne.n	8005128 <HAL_RCC_OscConfig+0x2f0>
 800511a:	4b7d      	ldr	r3, [pc, #500]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a7c      	ldr	r2, [pc, #496]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
 8005126:	e01c      	b.n	8005162 <HAL_RCC_OscConfig+0x32a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x312>
 8005130:	4b77      	ldr	r3, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a76      	ldr	r2, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	4b74      	ldr	r3, [pc, #464]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a73      	ldr	r2, [pc, #460]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	e00b      	b.n	8005162 <HAL_RCC_OscConfig+0x32a>
 800514a:	4b71      	ldr	r3, [pc, #452]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a70      	ldr	r2, [pc, #448]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
 8005156:	4b6e      	ldr	r3, [pc, #440]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a6d      	ldr	r2, [pc, #436]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fc fce5 	bl	8001b38 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fce1 	bl	8001b38 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0bc      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005188:	4b61      	ldr	r3, [pc, #388]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ee      	beq.n	8005172 <HAL_RCC_OscConfig+0x33a>
 8005194:	e014      	b.n	80051c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fc fccf 	bl	8001b38 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc fccb 	bl	8001b38 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0a6      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b4:	4b56      	ldr	r3, [pc, #344]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ee      	bne.n	800519e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d105      	bne.n	80051d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c6:	4b52      	ldr	r3, [pc, #328]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a51      	ldr	r2, [pc, #324]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8092 	beq.w	8005300 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051dc:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d05c      	beq.n	80052a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d141      	bne.n	8005274 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b48      	ldr	r3, [pc, #288]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fc fc9f 	bl	8001b38 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fc fc9b 	bl	8001b38 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e078      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005210:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	019b      	lsls	r3, r3, #6
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	3b01      	subs	r3, #1
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	4933      	ldr	r1, [pc, #204]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005246:	4b33      	ldr	r3, [pc, #204]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fc fc74 	bl	8001b38 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fc fc70 	bl	8001b38 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e04d      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x41c>
 8005272:	e045      	b.n	8005300 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b27      	ldr	r3, [pc, #156]	; (8005314 <HAL_RCC_OscConfig+0x4dc>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc fc5d 	bl	8001b38 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fc59 	bl	8001b38 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e036      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x44a>
 80052a0:	e02e      	b.n	8005300 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e029      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_RCC_OscConfig+0x4d8>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d11c      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d115      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40007000 	.word	0x40007000
 8005310:	40023800 	.word	0x40023800
 8005314:	42470060 	.word	0x42470060

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cc      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d90c      	bls.n	8005354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b65      	ldr	r3, [pc, #404]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0b8      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a58      	ldr	r2, [pc, #352]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005384:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800538e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	494d      	ldr	r1, [pc, #308]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d044      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d119      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e067      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4934      	ldr	r1, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	4313      	orrs	r3, r2
 8005406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fc fb96 	bl	8001b38 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fc fb92 	bl	8001b38 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d20c      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e032      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4916      	ldr	r1, [pc, #88]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	490e      	ldr	r1, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549e:	f000 f821 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4601      	mov	r1, r0
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	fa21 f303 	lsr.w	r3, r1, r3
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc faf6 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	08008098 	.word	0x08008098
 80054dc:	20000000 	.word	0x20000000
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	2300      	movs	r3, #0
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d007      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x32>
 8005506:	2b08      	cmp	r3, #8
 8005508:	d008      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x38>
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80b4 	bne.w	8005678 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b5e      	ldr	r3, [pc, #376]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005512:	60bb      	str	r3, [r7, #8]
       break;
 8005514:	e0b3      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005518:	60bb      	str	r3, [r7, #8]
      break;
 800551a:	e0b0      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b5a      	ldr	r3, [pc, #360]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b58      	ldr	r3, [pc, #352]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04a      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b55      	ldr	r3, [pc, #340]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea03 0501 	and.w	r5, r3, r1
 8005548:	ea04 0602 	and.w	r6, r4, r2
 800554c:	4629      	mov	r1, r5
 800554e:	4632      	mov	r2, r6
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	0154      	lsls	r4, r2, #5
 800555a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800555e:	014b      	lsls	r3, r1, #5
 8005560:	4619      	mov	r1, r3
 8005562:	4622      	mov	r2, r4
 8005564:	1b49      	subs	r1, r1, r5
 8005566:	eb62 0206 	sbc.w	r2, r2, r6
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0194      	lsls	r4, r2, #6
 8005574:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005578:	018b      	lsls	r3, r1, #6
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	eb64 0402 	sbc.w	r4, r4, r2
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	00e2      	lsls	r2, r4, #3
 800558a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800558e:	00d9      	lsls	r1, r3, #3
 8005590:	460b      	mov	r3, r1
 8005592:	4614      	mov	r4, r2
 8005594:	195b      	adds	r3, r3, r5
 8005596:	eb44 0406 	adc.w	r4, r4, r6
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	0262      	lsls	r2, r4, #9
 80055a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055a8:	0259      	lsls	r1, r3, #9
 80055aa:	460b      	mov	r3, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	4621      	mov	r1, r4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	461a      	mov	r2, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	f7fa fe58 	bl	8000270 <__aeabi_uldivmod>
 80055c0:	4603      	mov	r3, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e049      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	ea03 0501 	and.w	r5, r3, r1
 80055de:	ea04 0602 	and.w	r6, r4, r2
 80055e2:	4629      	mov	r1, r5
 80055e4:	4632      	mov	r2, r6
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	0154      	lsls	r4, r2, #5
 80055f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f4:	014b      	lsls	r3, r1, #5
 80055f6:	4619      	mov	r1, r3
 80055f8:	4622      	mov	r2, r4
 80055fa:	1b49      	subs	r1, r1, r5
 80055fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0194      	lsls	r4, r2, #6
 800560a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800560e:	018b      	lsls	r3, r1, #6
 8005610:	1a5b      	subs	r3, r3, r1
 8005612:	eb64 0402 	sbc.w	r4, r4, r2
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005624:	00d9      	lsls	r1, r3, #3
 8005626:	460b      	mov	r3, r1
 8005628:	4614      	mov	r4, r2
 800562a:	195b      	adds	r3, r3, r5
 800562c:	eb44 0406 	adc.w	r4, r4, r6
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	02a2      	lsls	r2, r4, #10
 800563a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800563e:	0299      	lsls	r1, r3, #10
 8005640:	460b      	mov	r3, r1
 8005642:	4614      	mov	r4, r2
 8005644:	4618      	mov	r0, r3
 8005646:	4621      	mov	r1, r4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	461a      	mov	r2, r3
 8005650:	4623      	mov	r3, r4
 8005652:	f7fa fe0d 	bl	8000270 <__aeabi_uldivmod>
 8005656:	4603      	mov	r3, r0
 8005658:	460c      	mov	r4, r1
 800565a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	3301      	adds	r3, #1
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e002      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800567a:	60bb      	str	r3, [r7, #8]
      break;
 800567c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567e:	68bb      	ldr	r3, [r7, #8]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	080080a8 	.word	0x080080a8

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4601      	mov	r1, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	080080a8 	.word	0x080080a8

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005720:	2b00      	cmp	r3, #0
 8005722:	d035      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005724:	4b62      	ldr	r3, [pc, #392]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800572a:	f7fc fa05 	bl	8001b38 <HAL_GetTick>
 800572e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005732:	f7fc fa01 	bl	8001b38 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0b0      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005744:	4b5b      	ldr	r3, [pc, #364]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	019a      	lsls	r2, r3, #6
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	071b      	lsls	r3, r3, #28
 800575c:	4955      	ldr	r1, [pc, #340]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005764:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800576a:	f7fc f9e5 	bl	8001b38 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005772:	f7fc f9e1 	bl	8001b38 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e090      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005784:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8083 	beq.w	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	4b44      	ldr	r3, [pc, #272]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a43      	ldr	r2, [pc, #268]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ba:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a3e      	ldr	r2, [pc, #248]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057c6:	f7fc f9b7 	bl	8001b38 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fc f9b3 	bl	8001b38 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e062      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057e0:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ec:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005814:	4b29      	ldr	r3, [pc, #164]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800581a:	4b28      	ldr	r3, [pc, #160]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005820:	4a24      	ldr	r2, [pc, #144]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b01      	cmp	r3, #1
 8005830:	d114      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005832:	f7fc f981 	bl	8001b38 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fc f97d 	bl	8001b38 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e02a      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ee      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005868:	d10d      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587e:	490d      	ldr	r1, [pc, #52]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]
 8005884:	e005      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005890:	6093      	str	r3, [r2, #8]
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005894:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800589e:	4905      	ldr	r1, [pc, #20]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	42470068 	.word	0x42470068
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40007000 	.word	0x40007000
 80058bc:	42470e40 	.word	0x42470e40

080058c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e083      	b.n	80059da <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7f5b      	ldrb	r3, [r3, #29]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb fd6a 	bl	80013bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	22ca      	movs	r2, #202	; 0xca
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2253      	movs	r2, #83	; 0x53
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f897 	bl	8005a32 <RTC_EnterInitMode>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e05e      	b.n	80059da <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800592a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6899      	ldr	r1, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68d2      	ldr	r2, [r2, #12]
 8005956:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6919      	ldr	r1, [r3, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	041a      	lsls	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10e      	bne.n	80059a8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f829 	bl	80059e2 <HAL_RTC_WaitForSynchro>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	22ff      	movs	r2, #255	; 0xff
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2204      	movs	r2, #4
 80059a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e018      	b.n	80059da <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	22ff      	movs	r2, #255	; 0xff
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80059d8:	2300      	movs	r3, #0
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059fe:	f7fc f89b 	bl	8001b38 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a04:	e009      	b.n	8005a1a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a06:	f7fc f897 	bl	8001b38 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a14:	d901      	bls.n	8005a1a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e007      	b.n	8005a2a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ee      	beq.n	8005a06 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d119      	bne.n	8005a80 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a56:	f7fc f86f 	bl	8001b38 <HAL_GetTick>
 8005a5a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a5c:	e009      	b.n	8005a72 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a5e:	f7fc f86b 	bl	8001b38 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a6c:	d901      	bls.n	8005a72 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e007      	b.n	8005a82 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0ee      	beq.n	8005a5e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e01d      	b.n	8005ad8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fb fc99 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f000 fb49 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e01d      	b.n	8005b2e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f815 	bl	8005b36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f000 fb1e 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fde8 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_TIM_OC_Start+0x74>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIM_OC_Start+0x2c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <HAL_TIM_OC_Start+0x78>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_TIM_OC_Start+0x30>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <HAL_TIM_OC_Start+0x32>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b06      	cmp	r3, #6
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d841      	bhi.n	8005c5c <HAL_TIM_OC_Start_IT+0x94>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_TIM_OC_Start_IT+0x18>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005c5d 	.word	0x08005c5d
 8005be8:	08005c5d 	.word	0x08005c5d
 8005bec:	08005c5d 	.word	0x08005c5d
 8005bf0:	08005c27 	.word	0x08005c27
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005c5d 	.word	0x08005c5d
 8005c00:	08005c39 	.word	0x08005c39
 8005c04:	08005c5d 	.word	0x08005c5d
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	08005c4b 	.word	0x08005c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0202 	orr.w	r2, r2, #2
 8005c22:	60da      	str	r2, [r3, #12]
      break;
 8005c24:	e01b      	b.n	8005c5e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0204 	orr.w	r2, r2, #4
 8005c34:	60da      	str	r2, [r3, #12]
      break;
 8005c36:	e012      	b.n	8005c5e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	60da      	str	r2, [r3, #12]
      break;
 8005c48:	e009      	b.n	8005c5e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0210 	orr.w	r2, r2, #16
 8005c58:	60da      	str	r2, [r3, #12]
      break;
 8005c5a:	e000      	b.n	8005c5e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005c5c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fd64 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <HAL_TIM_OC_Start_IT+0x100>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_OC_Start_IT+0xb8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <HAL_TIM_OC_Start_IT+0x104>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_OC_Start_IT+0xbc>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <HAL_TIM_OC_Start_IT+0xbe>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d007      	beq.n	8005cbc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d122      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d11b      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0202 	mvn.w	r2, #2
 8005cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa05 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fa fdd0 	bl	80008c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa08 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d122      	bne.n	8005d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d11b      	bne.n	8005d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0204 	mvn.w	r2, #4
 8005d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9db 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fa fda6 	bl	80008c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9de 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d122      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d11b      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0208 	mvn.w	r2, #8
 8005da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9b1 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005dc0:	e005      	b.n	8005dce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fa fd7c 	bl	80008c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9b4 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d122      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d11b      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0210 	mvn.w	r2, #16
 8005df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f987 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fa fd52 	bl	80008c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f98a 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0201 	mvn.w	r2, #1
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f95d 	bl	800610e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5e:	2b80      	cmp	r3, #128	; 0x80
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6c:	2b80      	cmp	r3, #128	; 0x80
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fd58 	bl	8006930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d10e      	bne.n	8005eac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d107      	bne.n	8005eac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f94f 	bl	800614a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0220 	mvn.w	r2, #32
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fd22 	bl	800691c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_OC_ConfigChannel+0x1a>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e04e      	b.n	8005f98 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d839      	bhi.n	8005f84 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f85 	.word	0x08005f85
 8005f24:	08005f85 	.word	0x08005f85
 8005f28:	08005f5b 	.word	0x08005f5b
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f85 	.word	0x08005f85
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f85 	.word	0x08005f85
 8005f40:	08005f85 	.word	0x08005f85
 8005f44:	08005f85 	.word	0x08005f85
 8005f48:	08005f77 	.word	0x08005f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f9a4 	bl	80062a0 <TIM_OC1_SetConfig>
      break;
 8005f58:	e015      	b.n	8005f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fa0d 	bl	8006380 <TIM_OC2_SetConfig>
      break;
 8005f66:	e00e      	b.n	8005f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fa7c 	bl	800646c <TIM_OC3_SetConfig>
      break;
 8005f74:	e007      	b.n	8005f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fae9 	bl	8006554 <TIM_OC4_SetConfig>
      break;
 8005f82:	e000      	b.n	8005f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005f84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_ConfigClockSource+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0a6      	b.n	8006106 <HAL_TIM_ConfigClockSource+0x166>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d067      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0x120>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d80b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x6c>
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d073      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x140>
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d802      	bhi.n	8006002 <HAL_TIM_ConfigClockSource+0x62>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d06f      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006000:	e078      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006002:	2b20      	cmp	r3, #32
 8006004:	d06c      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x140>
 8006006:	2b30      	cmp	r3, #48	; 0x30
 8006008:	d06a      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800600a:	e073      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d00d      	beq.n	800602c <HAL_TIM_ConfigClockSource+0x8c>
 8006010:	2b70      	cmp	r3, #112	; 0x70
 8006012:	d804      	bhi.n	800601e <HAL_TIM_ConfigClockSource+0x7e>
 8006014:	2b50      	cmp	r3, #80	; 0x50
 8006016:	d033      	beq.n	8006080 <HAL_TIM_ConfigClockSource+0xe0>
 8006018:	2b60      	cmp	r3, #96	; 0x60
 800601a:	d041      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800601c:	e06a      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d066      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x152>
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d017      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800602a:	e063      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f000 fb5a 	bl	80066f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800604e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	609a      	str	r2, [r3, #8]
      break;
 8006058:	e04c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6899      	ldr	r1, [r3, #8]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f000 fb43 	bl	80066f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607c:	609a      	str	r2, [r3, #8]
      break;
 800607e:	e039      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	461a      	mov	r2, r3
 800608e:	f000 fab7 	bl	8006600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2150      	movs	r1, #80	; 0x50
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fb10 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 800609e:	e029      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6859      	ldr	r1, [r3, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f000 fad6 	bl	800665e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2160      	movs	r1, #96	; 0x60
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb00 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80060be:	e019      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f000 fa97 	bl	8006600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2140      	movs	r1, #64	; 0x40
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 faf0 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80060de:	e009      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 fae7 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80060f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a40      	ldr	r2, [pc, #256]	; (8006274 <TIM_Base_SetConfig+0x114>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d00f      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3d      	ldr	r2, [pc, #244]	; (8006278 <TIM_Base_SetConfig+0x118>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3c      	ldr	r2, [pc, #240]	; (800627c <TIM_Base_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3b      	ldr	r2, [pc, #236]	; (8006280 <TIM_Base_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3a      	ldr	r2, [pc, #232]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2f      	ldr	r2, [pc, #188]	; (8006274 <TIM_Base_SetConfig+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02b      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d027      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2c      	ldr	r2, [pc, #176]	; (8006278 <TIM_Base_SetConfig+0x118>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d023      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <TIM_Base_SetConfig+0x11c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01f      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <TIM_Base_SetConfig+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d01b      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <TIM_Base_SetConfig+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d017      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <TIM_Base_SetConfig+0x128>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a27      	ldr	r2, [pc, #156]	; (800628c <TIM_Base_SetConfig+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00f      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <TIM_Base_SetConfig+0x130>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00b      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a25      	ldr	r2, [pc, #148]	; (8006294 <TIM_Base_SetConfig+0x134>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d007      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <TIM_Base_SetConfig+0x138>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d003      	beq.n	8006212 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <TIM_Base_SetConfig+0x13c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d108      	bne.n	8006224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <TIM_Base_SetConfig+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <TIM_Base_SetConfig+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d103      	bne.n	8006260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800
 8006294:	40001800 	.word	0x40001800
 8006298:	40001c00 	.word	0x40001c00
 800629c:	40002000 	.word	0x40002000

080062a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0302 	bic.w	r3, r3, #2
 80062e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a20      	ldr	r2, [pc, #128]	; (8006378 <TIM_OC1_SetConfig+0xd8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC1_SetConfig+0x64>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <TIM_OC1_SetConfig+0xdc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d10c      	bne.n	800631e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0308 	bic.w	r3, r3, #8
 800630a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0304 	bic.w	r3, r3, #4
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC1_SetConfig+0xd8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC1_SetConfig+0x8e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC1_SetConfig+0xdc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40010000 	.word	0x40010000
 800637c:	40010400 	.word	0x40010400

08006380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0210 	bic.w	r2, r3, #16
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0320 	bic.w	r3, r3, #32
 80063ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a22      	ldr	r2, [pc, #136]	; (8006464 <TIM_OC2_SetConfig+0xe4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC2_SetConfig+0x68>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a21      	ldr	r2, [pc, #132]	; (8006468 <TIM_OC2_SetConfig+0xe8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d10d      	bne.n	8006404 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <TIM_OC2_SetConfig+0xe4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC2_SetConfig+0x94>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	; (8006468 <TIM_OC2_SetConfig+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d113      	bne.n	800643c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800641a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <TIM_OC3_SetConfig+0xe0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC3_SetConfig+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a20      	ldr	r2, [pc, #128]	; (8006550 <TIM_OC3_SetConfig+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10d      	bne.n	80064ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC3_SetConfig+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC3_SetConfig+0x92>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <TIM_OC3_SetConfig+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d113      	bne.n	8006526 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800659e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	031b      	lsls	r3, r3, #12
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a12      	ldr	r2, [pc, #72]	; (80065f8 <TIM_OC4_SetConfig+0xa4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC4_SetConfig+0x68>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a11      	ldr	r2, [pc, #68]	; (80065fc <TIM_OC4_SetConfig+0xa8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d109      	bne.n	80065d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40010400 	.word	0x40010400

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0210 	bic.w	r2, r3, #16
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006794:	2302      	movs	r3, #2
 8006796:	e05a      	b.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a21      	ldr	r2, [pc, #132]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d022      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e4:	d01d      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d018      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00e      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a18      	ldr	r2, [pc, #96]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a17      	ldr	r2, [pc, #92]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a15      	ldr	r2, [pc, #84]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10c      	bne.n	800683c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4313      	orrs	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40010000 	.word	0x40010000
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800
 8006868:	40000c00 	.word	0x40000c00
 800686c:	40010400 	.word	0x40010400
 8006870:	40014000 	.word	0x40014000
 8006874:	40001800 	.word	0x40001800

08006878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e03d      	b.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e03f      	b.n	80069d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fa fe28 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2224      	movs	r2, #36	; 0x24
 8006974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb6b 	bl	8007064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800699c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d153      	bne.n	8006aa2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_UART_Transmit_DMA+0x26>
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e04c      	b.n	8006aa4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Transmit_DMA+0x38>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e045      	b.n	8006aa4 <HAL_UART_Transmit_DMA+0xc4>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2221      	movs	r2, #33	; 0x21
 8006a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <HAL_UART_Transmit_DMA+0xcc>)
 8006a46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_UART_Transmit_DMA+0xd0>)
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_UART_Transmit_DMA+0xd4>)
 8006a56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	6819      	ldr	r1, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3304      	adds	r3, #4
 8006a74:	461a      	mov	r2, r3
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	f7fb fa5a 	bl	8001f30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a9c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e000      	b.n	8006aa4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006aa2:	2302      	movs	r3, #2
  }
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	08006cf5 	.word	0x08006cf5
 8006ab0:	08006d47 	.word	0x08006d47
 8006ab4:	08006d63 	.word	0x08006d63

08006ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_UART_IRQHandler+0x52>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa2d 	bl	8006f62 <UART_Receive_IT>
      return;
 8006b08:	e0d1      	b.n	8006cae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80b0 	beq.w	8006c72 <HAL_UART_IRQHandler+0x1ba>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_UART_IRQHandler+0x70>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80a5 	beq.w	8006c72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <HAL_UART_IRQHandler+0x90>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	f043 0201 	orr.w	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_UART_IRQHandler+0xb0>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b60:	f043 0202 	orr.w	r2, r3, #2
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_UART_IRQHandler+0xd0>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	f043 0204 	orr.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <HAL_UART_IRQHandler+0xfa>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_UART_IRQHandler+0xee>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006baa:	f043 0208 	orr.w	r2, r3, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d078      	beq.n	8006cac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x11c>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9c7 	bl	8006f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d102      	bne.n	8006bfc <HAL_UART_IRQHandler+0x144>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d031      	beq.n	8006c60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f910 	bl	8006e22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d123      	bne.n	8006c58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d013      	beq.n	8006c50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <HAL_UART_IRQHandler+0x1fc>)
 8006c2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fb f9d3 	bl	8001fe0 <HAL_DMA_Abort_IT>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d016      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4e:	e00e      	b.n	8006c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f845 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c56:	e00a      	b.n	8006c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f841 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5e:	e006      	b.n	8006c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f83d 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c6c:	e01e      	b.n	8006cac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6e:	bf00      	nop
    return;
 8006c70:	e01c      	b.n	8006cac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1d6>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8fd 	bl	8006e86 <UART_Transmit_IT>
    return;
 8006c8c:	e00f      	b.n	8006cae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_UART_IRQHandler+0x1f6>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f945 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <HAL_UART_IRQHandler+0x1f6>
    return;
 8006cac:	bf00      	nop
  }
}
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	08006e5f 	.word	0x08006e5f

08006cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d113      	bne.n	8006d38 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695a      	ldr	r2, [r3, #20]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d24:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d34:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d36:	e002      	b.n	8006d3e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff ffbd 	bl	8006cb8 <HAL_UART_TxCpltCallback>
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff ffb9 	bl	8006ccc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b21      	cmp	r3, #33	; 0x21
 8006d94:	d108      	bne.n	8006da8 <UART_DMAError+0x46>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	f000 f827 	bl	8006df6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b22      	cmp	r3, #34	; 0x22
 8006dc8:	d108      	bne.n	8006ddc <UART_DMAError+0x7a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006dd6:	68b8      	ldr	r0, [r7, #8]
 8006dd8:	f000 f823 	bl	8006e22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de8:	68b8      	ldr	r0, [r7, #8]
 8006dea:	f7ff ff79 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006e0c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ff31 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b21      	cmp	r3, #33	; 0x21
 8006e98:	d144      	bne.n	8006f24 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea2:	d11a      	bne.n	8006eda <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]
 8006ecc:	e00e      	b.n	8006eec <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e008      	b.n	8006eec <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6211      	str	r1, [r2, #32]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10f      	bne.n	8006f20 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff feb0 	bl	8006cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b22      	cmp	r3, #34	; 0x22
 8006f74:	d171      	bne.n	800705a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d123      	bne.n	8006fc8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10e      	bne.n	8006fac <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	1c9a      	adds	r2, r3, #2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	629a      	str	r2, [r3, #40]	; 0x28
 8006faa:	e029      	b.n	8007000 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8006fc6:	e01b      	b.n	8007000 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6858      	ldr	r0, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6291      	str	r1, [r2, #40]	; 0x28
 8006fe0:	b2c2      	uxtb	r2, r0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e00c      	b.n	8007000 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	1c58      	adds	r0, r3, #1
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	6288      	str	r0, [r1, #40]	; 0x28
 8006ff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4619      	mov	r1, r3
 800700e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007010:	2b00      	cmp	r3, #0
 8007012:	d120      	bne.n	8007056 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7f9 fca5 	bl	800099c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e002      	b.n	800705c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070a6:	f023 030c 	bic.w	r3, r3, #12
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6812      	ldr	r2, [r2, #0]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d2:	f040 818b 	bne.w	80073ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4ac1      	ldr	r2, [pc, #772]	; (80073e0 <UART_SetConfig+0x37c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d005      	beq.n	80070ec <UART_SetConfig+0x88>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4abf      	ldr	r2, [pc, #764]	; (80073e4 <UART_SetConfig+0x380>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	f040 80bd 	bne.w	8007266 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070ec:	f7fe faf2 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 80070f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	461d      	mov	r5, r3
 80070f6:	f04f 0600 	mov.w	r6, #0
 80070fa:	46a8      	mov	r8, r5
 80070fc:	46b1      	mov	r9, r6
 80070fe:	eb18 0308 	adds.w	r3, r8, r8
 8007102:	eb49 0409 	adc.w	r4, r9, r9
 8007106:	4698      	mov	r8, r3
 8007108:	46a1      	mov	r9, r4
 800710a:	eb18 0805 	adds.w	r8, r8, r5
 800710e:	eb49 0906 	adc.w	r9, r9, r6
 8007112:	f04f 0100 	mov.w	r1, #0
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800711e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007126:	4688      	mov	r8, r1
 8007128:	4691      	mov	r9, r2
 800712a:	eb18 0005 	adds.w	r0, r8, r5
 800712e:	eb49 0106 	adc.w	r1, r9, r6
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	461d      	mov	r5, r3
 8007138:	f04f 0600 	mov.w	r6, #0
 800713c:	196b      	adds	r3, r5, r5
 800713e:	eb46 0406 	adc.w	r4, r6, r6
 8007142:	461a      	mov	r2, r3
 8007144:	4623      	mov	r3, r4
 8007146:	f7f9 f893 	bl	8000270 <__aeabi_uldivmod>
 800714a:	4603      	mov	r3, r0
 800714c:	460c      	mov	r4, r1
 800714e:	461a      	mov	r2, r3
 8007150:	4ba5      	ldr	r3, [pc, #660]	; (80073e8 <UART_SetConfig+0x384>)
 8007152:	fba3 2302 	umull	r2, r3, r3, r2
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	461d      	mov	r5, r3
 8007160:	f04f 0600 	mov.w	r6, #0
 8007164:	46a9      	mov	r9, r5
 8007166:	46b2      	mov	sl, r6
 8007168:	eb19 0309 	adds.w	r3, r9, r9
 800716c:	eb4a 040a 	adc.w	r4, sl, sl
 8007170:	4699      	mov	r9, r3
 8007172:	46a2      	mov	sl, r4
 8007174:	eb19 0905 	adds.w	r9, r9, r5
 8007178:	eb4a 0a06 	adc.w	sl, sl, r6
 800717c:	f04f 0100 	mov.w	r1, #0
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800718c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007190:	4689      	mov	r9, r1
 8007192:	4692      	mov	sl, r2
 8007194:	eb19 0005 	adds.w	r0, r9, r5
 8007198:	eb4a 0106 	adc.w	r1, sl, r6
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	461d      	mov	r5, r3
 80071a2:	f04f 0600 	mov.w	r6, #0
 80071a6:	196b      	adds	r3, r5, r5
 80071a8:	eb46 0406 	adc.w	r4, r6, r6
 80071ac:	461a      	mov	r2, r3
 80071ae:	4623      	mov	r3, r4
 80071b0:	f7f9 f85e 	bl	8000270 <__aeabi_uldivmod>
 80071b4:	4603      	mov	r3, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	461a      	mov	r2, r3
 80071ba:	4b8b      	ldr	r3, [pc, #556]	; (80073e8 <UART_SetConfig+0x384>)
 80071bc:	fba3 1302 	umull	r1, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	2164      	movs	r1, #100	; 0x64
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	3332      	adds	r3, #50	; 0x32
 80071ce:	4a86      	ldr	r2, [pc, #536]	; (80073e8 <UART_SetConfig+0x384>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071dc:	4498      	add	r8, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	461d      	mov	r5, r3
 80071e2:	f04f 0600 	mov.w	r6, #0
 80071e6:	46a9      	mov	r9, r5
 80071e8:	46b2      	mov	sl, r6
 80071ea:	eb19 0309 	adds.w	r3, r9, r9
 80071ee:	eb4a 040a 	adc.w	r4, sl, sl
 80071f2:	4699      	mov	r9, r3
 80071f4:	46a2      	mov	sl, r4
 80071f6:	eb19 0905 	adds.w	r9, r9, r5
 80071fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80071fe:	f04f 0100 	mov.w	r1, #0
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800720a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800720e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007212:	4689      	mov	r9, r1
 8007214:	4692      	mov	sl, r2
 8007216:	eb19 0005 	adds.w	r0, r9, r5
 800721a:	eb4a 0106 	adc.w	r1, sl, r6
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	461d      	mov	r5, r3
 8007224:	f04f 0600 	mov.w	r6, #0
 8007228:	196b      	adds	r3, r5, r5
 800722a:	eb46 0406 	adc.w	r4, r6, r6
 800722e:	461a      	mov	r2, r3
 8007230:	4623      	mov	r3, r4
 8007232:	f7f9 f81d 	bl	8000270 <__aeabi_uldivmod>
 8007236:	4603      	mov	r3, r0
 8007238:	460c      	mov	r4, r1
 800723a:	461a      	mov	r2, r3
 800723c:	4b6a      	ldr	r3, [pc, #424]	; (80073e8 <UART_SetConfig+0x384>)
 800723e:	fba3 1302 	umull	r1, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2164      	movs	r1, #100	; 0x64
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	3332      	adds	r3, #50	; 0x32
 8007250:	4a65      	ldr	r2, [pc, #404]	; (80073e8 <UART_SetConfig+0x384>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 0207 	and.w	r2, r3, #7
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4442      	add	r2, r8
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	e26f      	b.n	8007746 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007266:	f7fe fa21 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800726a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	461d      	mov	r5, r3
 8007270:	f04f 0600 	mov.w	r6, #0
 8007274:	46a8      	mov	r8, r5
 8007276:	46b1      	mov	r9, r6
 8007278:	eb18 0308 	adds.w	r3, r8, r8
 800727c:	eb49 0409 	adc.w	r4, r9, r9
 8007280:	4698      	mov	r8, r3
 8007282:	46a1      	mov	r9, r4
 8007284:	eb18 0805 	adds.w	r8, r8, r5
 8007288:	eb49 0906 	adc.w	r9, r9, r6
 800728c:	f04f 0100 	mov.w	r1, #0
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007298:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800729c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072a0:	4688      	mov	r8, r1
 80072a2:	4691      	mov	r9, r2
 80072a4:	eb18 0005 	adds.w	r0, r8, r5
 80072a8:	eb49 0106 	adc.w	r1, r9, r6
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	461d      	mov	r5, r3
 80072b2:	f04f 0600 	mov.w	r6, #0
 80072b6:	196b      	adds	r3, r5, r5
 80072b8:	eb46 0406 	adc.w	r4, r6, r6
 80072bc:	461a      	mov	r2, r3
 80072be:	4623      	mov	r3, r4
 80072c0:	f7f8 ffd6 	bl	8000270 <__aeabi_uldivmod>
 80072c4:	4603      	mov	r3, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	461a      	mov	r2, r3
 80072ca:	4b47      	ldr	r3, [pc, #284]	; (80073e8 <UART_SetConfig+0x384>)
 80072cc:	fba3 2302 	umull	r2, r3, r3, r2
 80072d0:	095b      	lsrs	r3, r3, #5
 80072d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	461d      	mov	r5, r3
 80072da:	f04f 0600 	mov.w	r6, #0
 80072de:	46a9      	mov	r9, r5
 80072e0:	46b2      	mov	sl, r6
 80072e2:	eb19 0309 	adds.w	r3, r9, r9
 80072e6:	eb4a 040a 	adc.w	r4, sl, sl
 80072ea:	4699      	mov	r9, r3
 80072ec:	46a2      	mov	sl, r4
 80072ee:	eb19 0905 	adds.w	r9, r9, r5
 80072f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800730a:	4689      	mov	r9, r1
 800730c:	4692      	mov	sl, r2
 800730e:	eb19 0005 	adds.w	r0, r9, r5
 8007312:	eb4a 0106 	adc.w	r1, sl, r6
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	461d      	mov	r5, r3
 800731c:	f04f 0600 	mov.w	r6, #0
 8007320:	196b      	adds	r3, r5, r5
 8007322:	eb46 0406 	adc.w	r4, r6, r6
 8007326:	461a      	mov	r2, r3
 8007328:	4623      	mov	r3, r4
 800732a:	f7f8 ffa1 	bl	8000270 <__aeabi_uldivmod>
 800732e:	4603      	mov	r3, r0
 8007330:	460c      	mov	r4, r1
 8007332:	461a      	mov	r2, r3
 8007334:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <UART_SetConfig+0x384>)
 8007336:	fba3 1302 	umull	r1, r3, r3, r2
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2164      	movs	r1, #100	; 0x64
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	3332      	adds	r3, #50	; 0x32
 8007348:	4a27      	ldr	r2, [pc, #156]	; (80073e8 <UART_SetConfig+0x384>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007356:	4498      	add	r8, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	461d      	mov	r5, r3
 800735c:	f04f 0600 	mov.w	r6, #0
 8007360:	46a9      	mov	r9, r5
 8007362:	46b2      	mov	sl, r6
 8007364:	eb19 0309 	adds.w	r3, r9, r9
 8007368:	eb4a 040a 	adc.w	r4, sl, sl
 800736c:	4699      	mov	r9, r3
 800736e:	46a2      	mov	sl, r4
 8007370:	eb19 0905 	adds.w	r9, r9, r5
 8007374:	eb4a 0a06 	adc.w	sl, sl, r6
 8007378:	f04f 0100 	mov.w	r1, #0
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800738c:	4689      	mov	r9, r1
 800738e:	4692      	mov	sl, r2
 8007390:	eb19 0005 	adds.w	r0, r9, r5
 8007394:	eb4a 0106 	adc.w	r1, sl, r6
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	461d      	mov	r5, r3
 800739e:	f04f 0600 	mov.w	r6, #0
 80073a2:	196b      	adds	r3, r5, r5
 80073a4:	eb46 0406 	adc.w	r4, r6, r6
 80073a8:	461a      	mov	r2, r3
 80073aa:	4623      	mov	r3, r4
 80073ac:	f7f8 ff60 	bl	8000270 <__aeabi_uldivmod>
 80073b0:	4603      	mov	r3, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	461a      	mov	r2, r3
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <UART_SetConfig+0x384>)
 80073b8:	fba3 1302 	umull	r1, r3, r3, r2
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	2164      	movs	r1, #100	; 0x64
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	3332      	adds	r3, #50	; 0x32
 80073ca:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <UART_SetConfig+0x384>)
 80073cc:	fba2 2303 	umull	r2, r3, r2, r3
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	f003 0207 	and.w	r2, r3, #7
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4442      	add	r2, r8
 80073dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073de:	e1b2      	b.n	8007746 <UART_SetConfig+0x6e2>
 80073e0:	40011000 	.word	0x40011000
 80073e4:	40011400 	.word	0x40011400
 80073e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4ad7      	ldr	r2, [pc, #860]	; (8007750 <UART_SetConfig+0x6ec>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d005      	beq.n	8007402 <UART_SetConfig+0x39e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4ad6      	ldr	r2, [pc, #856]	; (8007754 <UART_SetConfig+0x6f0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	f040 80d1 	bne.w	80075a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007402:	f7fe f967 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007406:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	469a      	mov	sl, r3
 800740c:	f04f 0b00 	mov.w	fp, #0
 8007410:	46d0      	mov	r8, sl
 8007412:	46d9      	mov	r9, fp
 8007414:	eb18 0308 	adds.w	r3, r8, r8
 8007418:	eb49 0409 	adc.w	r4, r9, r9
 800741c:	4698      	mov	r8, r3
 800741e:	46a1      	mov	r9, r4
 8007420:	eb18 080a 	adds.w	r8, r8, sl
 8007424:	eb49 090b 	adc.w	r9, r9, fp
 8007428:	f04f 0100 	mov.w	r1, #0
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007434:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007438:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800743c:	4688      	mov	r8, r1
 800743e:	4691      	mov	r9, r2
 8007440:	eb1a 0508 	adds.w	r5, sl, r8
 8007444:	eb4b 0609 	adc.w	r6, fp, r9
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4619      	mov	r1, r3
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	f04f 0400 	mov.w	r4, #0
 800745a:	0094      	lsls	r4, r2, #2
 800745c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007460:	008b      	lsls	r3, r1, #2
 8007462:	461a      	mov	r2, r3
 8007464:	4623      	mov	r3, r4
 8007466:	4628      	mov	r0, r5
 8007468:	4631      	mov	r1, r6
 800746a:	f7f8 ff01 	bl	8000270 <__aeabi_uldivmod>
 800746e:	4603      	mov	r3, r0
 8007470:	460c      	mov	r4, r1
 8007472:	461a      	mov	r2, r3
 8007474:	4bb8      	ldr	r3, [pc, #736]	; (8007758 <UART_SetConfig+0x6f4>)
 8007476:	fba3 2302 	umull	r2, r3, r3, r2
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	469b      	mov	fp, r3
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	46d9      	mov	r9, fp
 800748a:	46e2      	mov	sl, ip
 800748c:	eb19 0309 	adds.w	r3, r9, r9
 8007490:	eb4a 040a 	adc.w	r4, sl, sl
 8007494:	4699      	mov	r9, r3
 8007496:	46a2      	mov	sl, r4
 8007498:	eb19 090b 	adds.w	r9, r9, fp
 800749c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074a0:	f04f 0100 	mov.w	r1, #0
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074b4:	4689      	mov	r9, r1
 80074b6:	4692      	mov	sl, r2
 80074b8:	eb1b 0509 	adds.w	r5, fp, r9
 80074bc:	eb4c 060a 	adc.w	r6, ip, sl
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	f04f 0400 	mov.w	r4, #0
 80074d2:	0094      	lsls	r4, r2, #2
 80074d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074d8:	008b      	lsls	r3, r1, #2
 80074da:	461a      	mov	r2, r3
 80074dc:	4623      	mov	r3, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	4631      	mov	r1, r6
 80074e2:	f7f8 fec5 	bl	8000270 <__aeabi_uldivmod>
 80074e6:	4603      	mov	r3, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	461a      	mov	r2, r3
 80074ec:	4b9a      	ldr	r3, [pc, #616]	; (8007758 <UART_SetConfig+0x6f4>)
 80074ee:	fba3 1302 	umull	r1, r3, r3, r2
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	2164      	movs	r1, #100	; 0x64
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	3332      	adds	r3, #50	; 0x32
 8007500:	4a95      	ldr	r2, [pc, #596]	; (8007758 <UART_SetConfig+0x6f4>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800750c:	4498      	add	r8, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	469b      	mov	fp, r3
 8007512:	f04f 0c00 	mov.w	ip, #0
 8007516:	46d9      	mov	r9, fp
 8007518:	46e2      	mov	sl, ip
 800751a:	eb19 0309 	adds.w	r3, r9, r9
 800751e:	eb4a 040a 	adc.w	r4, sl, sl
 8007522:	4699      	mov	r9, r3
 8007524:	46a2      	mov	sl, r4
 8007526:	eb19 090b 	adds.w	r9, r9, fp
 800752a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800752e:	f04f 0100 	mov.w	r1, #0
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800753a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800753e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007542:	4689      	mov	r9, r1
 8007544:	4692      	mov	sl, r2
 8007546:	eb1b 0509 	adds.w	r5, fp, r9
 800754a:	eb4c 060a 	adc.w	r6, ip, sl
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4619      	mov	r1, r3
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	f04f 0400 	mov.w	r4, #0
 8007560:	0094      	lsls	r4, r2, #2
 8007562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007566:	008b      	lsls	r3, r1, #2
 8007568:	461a      	mov	r2, r3
 800756a:	4623      	mov	r3, r4
 800756c:	4628      	mov	r0, r5
 800756e:	4631      	mov	r1, r6
 8007570:	f7f8 fe7e 	bl	8000270 <__aeabi_uldivmod>
 8007574:	4603      	mov	r3, r0
 8007576:	460c      	mov	r4, r1
 8007578:	461a      	mov	r2, r3
 800757a:	4b77      	ldr	r3, [pc, #476]	; (8007758 <UART_SetConfig+0x6f4>)
 800757c:	fba3 1302 	umull	r1, r3, r3, r2
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	2164      	movs	r1, #100	; 0x64
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	3332      	adds	r3, #50	; 0x32
 800758e:	4a72      	ldr	r2, [pc, #456]	; (8007758 <UART_SetConfig+0x6f4>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f003 020f 	and.w	r2, r3, #15
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4442      	add	r2, r8
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	e0d0      	b.n	8007746 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075a4:	f7fe f882 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80075a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	469a      	mov	sl, r3
 80075ae:	f04f 0b00 	mov.w	fp, #0
 80075b2:	46d0      	mov	r8, sl
 80075b4:	46d9      	mov	r9, fp
 80075b6:	eb18 0308 	adds.w	r3, r8, r8
 80075ba:	eb49 0409 	adc.w	r4, r9, r9
 80075be:	4698      	mov	r8, r3
 80075c0:	46a1      	mov	r9, r4
 80075c2:	eb18 080a 	adds.w	r8, r8, sl
 80075c6:	eb49 090b 	adc.w	r9, r9, fp
 80075ca:	f04f 0100 	mov.w	r1, #0
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075de:	4688      	mov	r8, r1
 80075e0:	4691      	mov	r9, r2
 80075e2:	eb1a 0508 	adds.w	r5, sl, r8
 80075e6:	eb4b 0609 	adc.w	r6, fp, r9
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4619      	mov	r1, r3
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	f04f 0400 	mov.w	r4, #0
 80075fc:	0094      	lsls	r4, r2, #2
 80075fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007602:	008b      	lsls	r3, r1, #2
 8007604:	461a      	mov	r2, r3
 8007606:	4623      	mov	r3, r4
 8007608:	4628      	mov	r0, r5
 800760a:	4631      	mov	r1, r6
 800760c:	f7f8 fe30 	bl	8000270 <__aeabi_uldivmod>
 8007610:	4603      	mov	r3, r0
 8007612:	460c      	mov	r4, r1
 8007614:	461a      	mov	r2, r3
 8007616:	4b50      	ldr	r3, [pc, #320]	; (8007758 <UART_SetConfig+0x6f4>)
 8007618:	fba3 2302 	umull	r2, r3, r3, r2
 800761c:	095b      	lsrs	r3, r3, #5
 800761e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	469b      	mov	fp, r3
 8007626:	f04f 0c00 	mov.w	ip, #0
 800762a:	46d9      	mov	r9, fp
 800762c:	46e2      	mov	sl, ip
 800762e:	eb19 0309 	adds.w	r3, r9, r9
 8007632:	eb4a 040a 	adc.w	r4, sl, sl
 8007636:	4699      	mov	r9, r3
 8007638:	46a2      	mov	sl, r4
 800763a:	eb19 090b 	adds.w	r9, r9, fp
 800763e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007642:	f04f 0100 	mov.w	r1, #0
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800764e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007656:	4689      	mov	r9, r1
 8007658:	4692      	mov	sl, r2
 800765a:	eb1b 0509 	adds.w	r5, fp, r9
 800765e:	eb4c 060a 	adc.w	r6, ip, sl
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4619      	mov	r1, r3
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	0094      	lsls	r4, r2, #2
 8007676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800767a:	008b      	lsls	r3, r1, #2
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	4628      	mov	r0, r5
 8007682:	4631      	mov	r1, r6
 8007684:	f7f8 fdf4 	bl	8000270 <__aeabi_uldivmod>
 8007688:	4603      	mov	r3, r0
 800768a:	460c      	mov	r4, r1
 800768c:	461a      	mov	r2, r3
 800768e:	4b32      	ldr	r3, [pc, #200]	; (8007758 <UART_SetConfig+0x6f4>)
 8007690:	fba3 1302 	umull	r1, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	2164      	movs	r1, #100	; 0x64
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	3332      	adds	r3, #50	; 0x32
 80076a2:	4a2d      	ldr	r2, [pc, #180]	; (8007758 <UART_SetConfig+0x6f4>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ae:	4498      	add	r8, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	469b      	mov	fp, r3
 80076b4:	f04f 0c00 	mov.w	ip, #0
 80076b8:	46d9      	mov	r9, fp
 80076ba:	46e2      	mov	sl, ip
 80076bc:	eb19 0309 	adds.w	r3, r9, r9
 80076c0:	eb4a 040a 	adc.w	r4, sl, sl
 80076c4:	4699      	mov	r9, r3
 80076c6:	46a2      	mov	sl, r4
 80076c8:	eb19 090b 	adds.w	r9, r9, fp
 80076cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076d0:	f04f 0100 	mov.w	r1, #0
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076e4:	4689      	mov	r9, r1
 80076e6:	4692      	mov	sl, r2
 80076e8:	eb1b 0509 	adds.w	r5, fp, r9
 80076ec:	eb4c 060a 	adc.w	r6, ip, sl
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	0094      	lsls	r4, r2, #2
 8007704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007708:	008b      	lsls	r3, r1, #2
 800770a:	461a      	mov	r2, r3
 800770c:	4623      	mov	r3, r4
 800770e:	4628      	mov	r0, r5
 8007710:	4631      	mov	r1, r6
 8007712:	f7f8 fdad 	bl	8000270 <__aeabi_uldivmod>
 8007716:	4603      	mov	r3, r0
 8007718:	460c      	mov	r4, r1
 800771a:	461a      	mov	r2, r3
 800771c:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <UART_SetConfig+0x6f4>)
 800771e:	fba3 1302 	umull	r1, r3, r3, r2
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2164      	movs	r1, #100	; 0x64
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	3332      	adds	r3, #50	; 0x32
 8007730:	4a09      	ldr	r2, [pc, #36]	; (8007758 <UART_SetConfig+0x6f4>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4442      	add	r2, r8
 8007742:	609a      	str	r2, [r3, #8]
}
 8007744:	e7ff      	b.n	8007746 <UART_SetConfig+0x6e2>
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007750:	40011000 	.word	0x40011000
 8007754:	40011400 	.word	0x40011400
 8007758:	51eb851f 	.word	0x51eb851f

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	; (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2000000c 	.word	0x2000000c

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4e0d      	ldr	r6, [pc, #52]	; (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	; (80077a4 <__libc_init_array+0x3c>)
 800776e:	1ba4      	subs	r4, r4, r6
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2500      	movs	r5, #0
 8007774:	42a5      	cmp	r5, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4e0b      	ldr	r6, [pc, #44]	; (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	; (80077ac <__libc_init_array+0x44>)
 800777c:	f000 fc26 	bl	8007fcc <_init>
 8007780:	1ba4      	subs	r4, r4, r6
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2500      	movs	r5, #0
 8007786:	42a5      	cmp	r5, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007790:	4798      	blx	r3
 8007792:	3501      	adds	r5, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800779a:	4798      	blx	r3
 800779c:	3501      	adds	r5, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	080080f4 	.word	0x080080f4
 80077a4:	080080f4 	.word	0x080080f4
 80077a8:	080080f4 	.word	0x080080f4
 80077ac:	080080f8 	.word	0x080080f8

080077b0 <memset>:
 80077b0:	4402      	add	r2, r0
 80077b2:	4603      	mov	r3, r0
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d100      	bne.n	80077ba <memset+0xa>
 80077b8:	4770      	bx	lr
 80077ba:	f803 1b01 	strb.w	r1, [r3], #1
 80077be:	e7f9      	b.n	80077b4 <memset+0x4>

080077c0 <siprintf>:
 80077c0:	b40e      	push	{r1, r2, r3}
 80077c2:	b500      	push	{lr}
 80077c4:	b09c      	sub	sp, #112	; 0x70
 80077c6:	ab1d      	add	r3, sp, #116	; 0x74
 80077c8:	9002      	str	r0, [sp, #8]
 80077ca:	9006      	str	r0, [sp, #24]
 80077cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077d0:	4809      	ldr	r0, [pc, #36]	; (80077f8 <siprintf+0x38>)
 80077d2:	9107      	str	r1, [sp, #28]
 80077d4:	9104      	str	r1, [sp, #16]
 80077d6:	4909      	ldr	r1, [pc, #36]	; (80077fc <siprintf+0x3c>)
 80077d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077dc:	9105      	str	r1, [sp, #20]
 80077de:	6800      	ldr	r0, [r0, #0]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	a902      	add	r1, sp, #8
 80077e4:	f000 f866 	bl	80078b4 <_svfiprintf_r>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	b01c      	add	sp, #112	; 0x70
 80077f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f4:	b003      	add	sp, #12
 80077f6:	4770      	bx	lr
 80077f8:	2000000c 	.word	0x2000000c
 80077fc:	ffff0208 	.word	0xffff0208

08007800 <__ssputs_r>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	688e      	ldr	r6, [r1, #8]
 8007806:	429e      	cmp	r6, r3
 8007808:	4682      	mov	sl, r0
 800780a:	460c      	mov	r4, r1
 800780c:	4690      	mov	r8, r2
 800780e:	4699      	mov	r9, r3
 8007810:	d837      	bhi.n	8007882 <__ssputs_r+0x82>
 8007812:	898a      	ldrh	r2, [r1, #12]
 8007814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007818:	d031      	beq.n	800787e <__ssputs_r+0x7e>
 800781a:	6825      	ldr	r5, [r4, #0]
 800781c:	6909      	ldr	r1, [r1, #16]
 800781e:	1a6f      	subs	r7, r5, r1
 8007820:	6965      	ldr	r5, [r4, #20]
 8007822:	2302      	movs	r3, #2
 8007824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007828:	fb95 f5f3 	sdiv	r5, r5, r3
 800782c:	f109 0301 	add.w	r3, r9, #1
 8007830:	443b      	add	r3, r7
 8007832:	429d      	cmp	r5, r3
 8007834:	bf38      	it	cc
 8007836:	461d      	movcc	r5, r3
 8007838:	0553      	lsls	r3, r2, #21
 800783a:	d530      	bpl.n	800789e <__ssputs_r+0x9e>
 800783c:	4629      	mov	r1, r5
 800783e:	f000 fb2b 	bl	8007e98 <_malloc_r>
 8007842:	4606      	mov	r6, r0
 8007844:	b950      	cbnz	r0, 800785c <__ssputs_r+0x5c>
 8007846:	230c      	movs	r3, #12
 8007848:	f8ca 3000 	str.w	r3, [sl]
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	463a      	mov	r2, r7
 800785e:	6921      	ldr	r1, [r4, #16]
 8007860:	f000 faa8 	bl	8007db4 <memcpy>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800786a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	6126      	str	r6, [r4, #16]
 8007872:	6165      	str	r5, [r4, #20]
 8007874:	443e      	add	r6, r7
 8007876:	1bed      	subs	r5, r5, r7
 8007878:	6026      	str	r6, [r4, #0]
 800787a:	60a5      	str	r5, [r4, #8]
 800787c:	464e      	mov	r6, r9
 800787e:	454e      	cmp	r6, r9
 8007880:	d900      	bls.n	8007884 <__ssputs_r+0x84>
 8007882:	464e      	mov	r6, r9
 8007884:	4632      	mov	r2, r6
 8007886:	4641      	mov	r1, r8
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	f000 fa9e 	bl	8007dca <memmove>
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	60a3      	str	r3, [r4, #8]
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	441e      	add	r6, r3
 8007898:	6026      	str	r6, [r4, #0]
 800789a:	2000      	movs	r0, #0
 800789c:	e7dc      	b.n	8007858 <__ssputs_r+0x58>
 800789e:	462a      	mov	r2, r5
 80078a0:	f000 fb54 	bl	8007f4c <_realloc_r>
 80078a4:	4606      	mov	r6, r0
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d1e2      	bne.n	8007870 <__ssputs_r+0x70>
 80078aa:	6921      	ldr	r1, [r4, #16]
 80078ac:	4650      	mov	r0, sl
 80078ae:	f000 faa5 	bl	8007dfc <_free_r>
 80078b2:	e7c8      	b.n	8007846 <__ssputs_r+0x46>

080078b4 <_svfiprintf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	461d      	mov	r5, r3
 80078ba:	898b      	ldrh	r3, [r1, #12]
 80078bc:	061f      	lsls	r7, r3, #24
 80078be:	b09d      	sub	sp, #116	; 0x74
 80078c0:	4680      	mov	r8, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4616      	mov	r6, r2
 80078c6:	d50f      	bpl.n	80078e8 <_svfiprintf_r+0x34>
 80078c8:	690b      	ldr	r3, [r1, #16]
 80078ca:	b96b      	cbnz	r3, 80078e8 <_svfiprintf_r+0x34>
 80078cc:	2140      	movs	r1, #64	; 0x40
 80078ce:	f000 fae3 	bl	8007e98 <_malloc_r>
 80078d2:	6020      	str	r0, [r4, #0]
 80078d4:	6120      	str	r0, [r4, #16]
 80078d6:	b928      	cbnz	r0, 80078e4 <_svfiprintf_r+0x30>
 80078d8:	230c      	movs	r3, #12
 80078da:	f8c8 3000 	str.w	r3, [r8]
 80078de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e2:	e0c8      	b.n	8007a76 <_svfiprintf_r+0x1c2>
 80078e4:	2340      	movs	r3, #64	; 0x40
 80078e6:	6163      	str	r3, [r4, #20]
 80078e8:	2300      	movs	r3, #0
 80078ea:	9309      	str	r3, [sp, #36]	; 0x24
 80078ec:	2320      	movs	r3, #32
 80078ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f2:	2330      	movs	r3, #48	; 0x30
 80078f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078f8:	9503      	str	r5, [sp, #12]
 80078fa:	f04f 0b01 	mov.w	fp, #1
 80078fe:	4637      	mov	r7, r6
 8007900:	463d      	mov	r5, r7
 8007902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007906:	b10b      	cbz	r3, 800790c <_svfiprintf_r+0x58>
 8007908:	2b25      	cmp	r3, #37	; 0x25
 800790a:	d13e      	bne.n	800798a <_svfiprintf_r+0xd6>
 800790c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007910:	d00b      	beq.n	800792a <_svfiprintf_r+0x76>
 8007912:	4653      	mov	r3, sl
 8007914:	4632      	mov	r2, r6
 8007916:	4621      	mov	r1, r4
 8007918:	4640      	mov	r0, r8
 800791a:	f7ff ff71 	bl	8007800 <__ssputs_r>
 800791e:	3001      	adds	r0, #1
 8007920:	f000 80a4 	beq.w	8007a6c <_svfiprintf_r+0x1b8>
 8007924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007926:	4453      	add	r3, sl
 8007928:	9309      	str	r3, [sp, #36]	; 0x24
 800792a:	783b      	ldrb	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 809d 	beq.w	8007a6c <_svfiprintf_r+0x1b8>
 8007932:	2300      	movs	r3, #0
 8007934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	9307      	str	r3, [sp, #28]
 8007940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007944:	931a      	str	r3, [sp, #104]	; 0x68
 8007946:	462f      	mov	r7, r5
 8007948:	2205      	movs	r2, #5
 800794a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800794e:	4850      	ldr	r0, [pc, #320]	; (8007a90 <_svfiprintf_r+0x1dc>)
 8007950:	f7f8 fc3e 	bl	80001d0 <memchr>
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	b9d0      	cbnz	r0, 800798e <_svfiprintf_r+0xda>
 8007958:	06d9      	lsls	r1, r3, #27
 800795a:	bf44      	itt	mi
 800795c:	2220      	movmi	r2, #32
 800795e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007962:	071a      	lsls	r2, r3, #28
 8007964:	bf44      	itt	mi
 8007966:	222b      	movmi	r2, #43	; 0x2b
 8007968:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800796c:	782a      	ldrb	r2, [r5, #0]
 800796e:	2a2a      	cmp	r2, #42	; 0x2a
 8007970:	d015      	beq.n	800799e <_svfiprintf_r+0xea>
 8007972:	9a07      	ldr	r2, [sp, #28]
 8007974:	462f      	mov	r7, r5
 8007976:	2000      	movs	r0, #0
 8007978:	250a      	movs	r5, #10
 800797a:	4639      	mov	r1, r7
 800797c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007980:	3b30      	subs	r3, #48	; 0x30
 8007982:	2b09      	cmp	r3, #9
 8007984:	d94d      	bls.n	8007a22 <_svfiprintf_r+0x16e>
 8007986:	b1b8      	cbz	r0, 80079b8 <_svfiprintf_r+0x104>
 8007988:	e00f      	b.n	80079aa <_svfiprintf_r+0xf6>
 800798a:	462f      	mov	r7, r5
 800798c:	e7b8      	b.n	8007900 <_svfiprintf_r+0x4c>
 800798e:	4a40      	ldr	r2, [pc, #256]	; (8007a90 <_svfiprintf_r+0x1dc>)
 8007990:	1a80      	subs	r0, r0, r2
 8007992:	fa0b f000 	lsl.w	r0, fp, r0
 8007996:	4318      	orrs	r0, r3
 8007998:	9004      	str	r0, [sp, #16]
 800799a:	463d      	mov	r5, r7
 800799c:	e7d3      	b.n	8007946 <_svfiprintf_r+0x92>
 800799e:	9a03      	ldr	r2, [sp, #12]
 80079a0:	1d11      	adds	r1, r2, #4
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	db01      	blt.n	80079ae <_svfiprintf_r+0xfa>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e004      	b.n	80079b8 <_svfiprintf_r+0x104>
 80079ae:	4252      	negs	r2, r2
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	9207      	str	r2, [sp, #28]
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	783b      	ldrb	r3, [r7, #0]
 80079ba:	2b2e      	cmp	r3, #46	; 0x2e
 80079bc:	d10c      	bne.n	80079d8 <_svfiprintf_r+0x124>
 80079be:	787b      	ldrb	r3, [r7, #1]
 80079c0:	2b2a      	cmp	r3, #42	; 0x2a
 80079c2:	d133      	bne.n	8007a2c <_svfiprintf_r+0x178>
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	1d1a      	adds	r2, r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	9203      	str	r2, [sp, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfb8      	it	lt
 80079d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079d4:	3702      	adds	r7, #2
 80079d6:	9305      	str	r3, [sp, #20]
 80079d8:	4d2e      	ldr	r5, [pc, #184]	; (8007a94 <_svfiprintf_r+0x1e0>)
 80079da:	7839      	ldrb	r1, [r7, #0]
 80079dc:	2203      	movs	r2, #3
 80079de:	4628      	mov	r0, r5
 80079e0:	f7f8 fbf6 	bl	80001d0 <memchr>
 80079e4:	b138      	cbz	r0, 80079f6 <_svfiprintf_r+0x142>
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	1b40      	subs	r0, r0, r5
 80079ea:	fa03 f000 	lsl.w	r0, r3, r0
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	4303      	orrs	r3, r0
 80079f2:	3701      	adds	r7, #1
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	7839      	ldrb	r1, [r7, #0]
 80079f8:	4827      	ldr	r0, [pc, #156]	; (8007a98 <_svfiprintf_r+0x1e4>)
 80079fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079fe:	2206      	movs	r2, #6
 8007a00:	1c7e      	adds	r6, r7, #1
 8007a02:	f7f8 fbe5 	bl	80001d0 <memchr>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d038      	beq.n	8007a7c <_svfiprintf_r+0x1c8>
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <_svfiprintf_r+0x1e8>)
 8007a0c:	bb13      	cbnz	r3, 8007a54 <_svfiprintf_r+0x1a0>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	3307      	adds	r3, #7
 8007a12:	f023 0307 	bic.w	r3, r3, #7
 8007a16:	3308      	adds	r3, #8
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1c:	444b      	add	r3, r9
 8007a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a20:	e76d      	b.n	80078fe <_svfiprintf_r+0x4a>
 8007a22:	fb05 3202 	mla	r2, r5, r2, r3
 8007a26:	2001      	movs	r0, #1
 8007a28:	460f      	mov	r7, r1
 8007a2a:	e7a6      	b.n	800797a <_svfiprintf_r+0xc6>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	3701      	adds	r7, #1
 8007a30:	9305      	str	r3, [sp, #20]
 8007a32:	4619      	mov	r1, r3
 8007a34:	250a      	movs	r5, #10
 8007a36:	4638      	mov	r0, r7
 8007a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a3c:	3a30      	subs	r2, #48	; 0x30
 8007a3e:	2a09      	cmp	r2, #9
 8007a40:	d903      	bls.n	8007a4a <_svfiprintf_r+0x196>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0c8      	beq.n	80079d8 <_svfiprintf_r+0x124>
 8007a46:	9105      	str	r1, [sp, #20]
 8007a48:	e7c6      	b.n	80079d8 <_svfiprintf_r+0x124>
 8007a4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4607      	mov	r7, r0
 8007a52:	e7f0      	b.n	8007a36 <_svfiprintf_r+0x182>
 8007a54:	ab03      	add	r3, sp, #12
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <_svfiprintf_r+0x1ec>)
 8007a5c:	a904      	add	r1, sp, #16
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f3af 8000 	nop.w
 8007a64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a68:	4681      	mov	r9, r0
 8007a6a:	d1d6      	bne.n	8007a1a <_svfiprintf_r+0x166>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	065b      	lsls	r3, r3, #25
 8007a70:	f53f af35 	bmi.w	80078de <_svfiprintf_r+0x2a>
 8007a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a76:	b01d      	add	sp, #116	; 0x74
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	ab03      	add	r3, sp, #12
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4622      	mov	r2, r4
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <_svfiprintf_r+0x1ec>)
 8007a84:	a904      	add	r1, sp, #16
 8007a86:	4640      	mov	r0, r8
 8007a88:	f000 f882 	bl	8007b90 <_printf_i>
 8007a8c:	e7ea      	b.n	8007a64 <_svfiprintf_r+0x1b0>
 8007a8e:	bf00      	nop
 8007a90:	080080b8 	.word	0x080080b8
 8007a94:	080080be 	.word	0x080080be
 8007a98:	080080c2 	.word	0x080080c2
 8007a9c:	00000000 	.word	0x00000000
 8007aa0:	08007801 	.word	0x08007801

08007aa4 <_printf_common>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4691      	mov	r9, r2
 8007aaa:	461f      	mov	r7, r3
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	690b      	ldr	r3, [r1, #16]
 8007ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bfb8      	it	lt
 8007ab8:	4613      	movlt	r3, r2
 8007aba:	f8c9 3000 	str.w	r3, [r9]
 8007abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	b112      	cbz	r2, 8007ace <_printf_common+0x2a>
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c9 3000 	str.w	r3, [r9]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	0699      	lsls	r1, r3, #26
 8007ad2:	bf42      	ittt	mi
 8007ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ad8:	3302      	addmi	r3, #2
 8007ada:	f8c9 3000 	strmi.w	r3, [r9]
 8007ade:	6825      	ldr	r5, [r4, #0]
 8007ae0:	f015 0506 	ands.w	r5, r5, #6
 8007ae4:	d107      	bne.n	8007af6 <_printf_common+0x52>
 8007ae6:	f104 0a19 	add.w	sl, r4, #25
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	f8d9 2000 	ldr.w	r2, [r9]
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	42ab      	cmp	r3, r5
 8007af4:	dc28      	bgt.n	8007b48 <_printf_common+0xa4>
 8007af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	3300      	adds	r3, #0
 8007afe:	bf18      	it	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	0692      	lsls	r2, r2, #26
 8007b04:	d42d      	bmi.n	8007b62 <_printf_common+0xbe>
 8007b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	47c0      	blx	r8
 8007b10:	3001      	adds	r0, #1
 8007b12:	d020      	beq.n	8007b56 <_printf_common+0xb2>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	68e5      	ldr	r5, [r4, #12]
 8007b18:	f8d9 2000 	ldr.w	r2, [r9]
 8007b1c:	f003 0306 	and.w	r3, r3, #6
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	bf08      	it	eq
 8007b24:	1aad      	subeq	r5, r5, r2
 8007b26:	68a3      	ldr	r3, [r4, #8]
 8007b28:	6922      	ldr	r2, [r4, #16]
 8007b2a:	bf0c      	ite	eq
 8007b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b30:	2500      	movne	r5, #0
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bfc4      	itt	gt
 8007b36:	1a9b      	subgt	r3, r3, r2
 8007b38:	18ed      	addgt	r5, r5, r3
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	341a      	adds	r4, #26
 8007b40:	454d      	cmp	r5, r9
 8007b42:	d11a      	bne.n	8007b7a <_printf_common+0xd6>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e008      	b.n	8007b5a <_printf_common+0xb6>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	4630      	mov	r0, r6
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d103      	bne.n	8007b5e <_printf_common+0xba>
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	3501      	adds	r5, #1
 8007b60:	e7c3      	b.n	8007aea <_printf_common+0x46>
 8007b62:	18e1      	adds	r1, r4, r3
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	2030      	movs	r0, #48	; 0x30
 8007b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b6c:	4422      	add	r2, r4
 8007b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b76:	3302      	adds	r3, #2
 8007b78:	e7c5      	b.n	8007b06 <_printf_common+0x62>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4630      	mov	r0, r6
 8007b82:	47c0      	blx	r8
 8007b84:	3001      	adds	r0, #1
 8007b86:	d0e6      	beq.n	8007b56 <_printf_common+0xb2>
 8007b88:	f109 0901 	add.w	r9, r9, #1
 8007b8c:	e7d8      	b.n	8007b40 <_printf_common+0x9c>
	...

08007b90 <_printf_i>:
 8007b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b98:	460c      	mov	r4, r1
 8007b9a:	7e09      	ldrb	r1, [r1, #24]
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	296e      	cmp	r1, #110	; 0x6e
 8007ba0:	4617      	mov	r7, r2
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	4698      	mov	r8, r3
 8007ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba8:	f000 80b3 	beq.w	8007d12 <_printf_i+0x182>
 8007bac:	d822      	bhi.n	8007bf4 <_printf_i+0x64>
 8007bae:	2963      	cmp	r1, #99	; 0x63
 8007bb0:	d036      	beq.n	8007c20 <_printf_i+0x90>
 8007bb2:	d80a      	bhi.n	8007bca <_printf_i+0x3a>
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	f000 80b9 	beq.w	8007d2c <_printf_i+0x19c>
 8007bba:	2958      	cmp	r1, #88	; 0x58
 8007bbc:	f000 8083 	beq.w	8007cc6 <_printf_i+0x136>
 8007bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bc8:	e032      	b.n	8007c30 <_printf_i+0xa0>
 8007bca:	2964      	cmp	r1, #100	; 0x64
 8007bcc:	d001      	beq.n	8007bd2 <_printf_i+0x42>
 8007bce:	2969      	cmp	r1, #105	; 0x69
 8007bd0:	d1f6      	bne.n	8007bc0 <_printf_i+0x30>
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	0605      	lsls	r5, r0, #24
 8007bd8:	f103 0104 	add.w	r1, r3, #4
 8007bdc:	d52a      	bpl.n	8007c34 <_printf_i+0xa4>
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da03      	bge.n	8007bee <_printf_i+0x5e>
 8007be6:	222d      	movs	r2, #45	; 0x2d
 8007be8:	425b      	negs	r3, r3
 8007bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bee:	486f      	ldr	r0, [pc, #444]	; (8007dac <_printf_i+0x21c>)
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	e039      	b.n	8007c68 <_printf_i+0xd8>
 8007bf4:	2973      	cmp	r1, #115	; 0x73
 8007bf6:	f000 809d 	beq.w	8007d34 <_printf_i+0x1a4>
 8007bfa:	d808      	bhi.n	8007c0e <_printf_i+0x7e>
 8007bfc:	296f      	cmp	r1, #111	; 0x6f
 8007bfe:	d020      	beq.n	8007c42 <_printf_i+0xb2>
 8007c00:	2970      	cmp	r1, #112	; 0x70
 8007c02:	d1dd      	bne.n	8007bc0 <_printf_i+0x30>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	f043 0320 	orr.w	r3, r3, #32
 8007c0a:	6023      	str	r3, [r4, #0]
 8007c0c:	e003      	b.n	8007c16 <_printf_i+0x86>
 8007c0e:	2975      	cmp	r1, #117	; 0x75
 8007c10:	d017      	beq.n	8007c42 <_printf_i+0xb2>
 8007c12:	2978      	cmp	r1, #120	; 0x78
 8007c14:	d1d4      	bne.n	8007bc0 <_printf_i+0x30>
 8007c16:	2378      	movs	r3, #120	; 0x78
 8007c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1c:	4864      	ldr	r0, [pc, #400]	; (8007db0 <_printf_i+0x220>)
 8007c1e:	e055      	b.n	8007ccc <_printf_i+0x13c>
 8007c20:	6813      	ldr	r3, [r2, #0]
 8007c22:	1d19      	adds	r1, r3, #4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6011      	str	r1, [r2, #0]
 8007c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c30:	2301      	movs	r3, #1
 8007c32:	e08c      	b.n	8007d4e <_printf_i+0x1be>
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6011      	str	r1, [r2, #0]
 8007c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c3c:	bf18      	it	ne
 8007c3e:	b21b      	sxthne	r3, r3
 8007c40:	e7cf      	b.n	8007be2 <_printf_i+0x52>
 8007c42:	6813      	ldr	r3, [r2, #0]
 8007c44:	6825      	ldr	r5, [r4, #0]
 8007c46:	1d18      	adds	r0, r3, #4
 8007c48:	6010      	str	r0, [r2, #0]
 8007c4a:	0628      	lsls	r0, r5, #24
 8007c4c:	d501      	bpl.n	8007c52 <_printf_i+0xc2>
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	e002      	b.n	8007c58 <_printf_i+0xc8>
 8007c52:	0668      	lsls	r0, r5, #25
 8007c54:	d5fb      	bpl.n	8007c4e <_printf_i+0xbe>
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	4854      	ldr	r0, [pc, #336]	; (8007dac <_printf_i+0x21c>)
 8007c5a:	296f      	cmp	r1, #111	; 0x6f
 8007c5c:	bf14      	ite	ne
 8007c5e:	220a      	movne	r2, #10
 8007c60:	2208      	moveq	r2, #8
 8007c62:	2100      	movs	r1, #0
 8007c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c68:	6865      	ldr	r5, [r4, #4]
 8007c6a:	60a5      	str	r5, [r4, #8]
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	f2c0 8095 	blt.w	8007d9c <_printf_i+0x20c>
 8007c72:	6821      	ldr	r1, [r4, #0]
 8007c74:	f021 0104 	bic.w	r1, r1, #4
 8007c78:	6021      	str	r1, [r4, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d13d      	bne.n	8007cfa <_printf_i+0x16a>
 8007c7e:	2d00      	cmp	r5, #0
 8007c80:	f040 808e 	bne.w	8007da0 <_printf_i+0x210>
 8007c84:	4665      	mov	r5, ip
 8007c86:	2a08      	cmp	r2, #8
 8007c88:	d10b      	bne.n	8007ca2 <_printf_i+0x112>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d508      	bpl.n	8007ca2 <_printf_i+0x112>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	bfde      	ittt	le
 8007c98:	2330      	movle	r3, #48	; 0x30
 8007c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ca2:	ebac 0305 	sub.w	r3, ip, r5
 8007ca6:	6123      	str	r3, [r4, #16]
 8007ca8:	f8cd 8000 	str.w	r8, [sp]
 8007cac:	463b      	mov	r3, r7
 8007cae:	aa03      	add	r2, sp, #12
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff fef6 	bl	8007aa4 <_printf_common>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d14d      	bne.n	8007d58 <_printf_i+0x1c8>
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc0:	b005      	add	sp, #20
 8007cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc6:	4839      	ldr	r0, [pc, #228]	; (8007dac <_printf_i+0x21c>)
 8007cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	6821      	ldr	r1, [r4, #0]
 8007cd0:	1d1d      	adds	r5, r3, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6015      	str	r5, [r2, #0]
 8007cd6:	060a      	lsls	r2, r1, #24
 8007cd8:	d50b      	bpl.n	8007cf2 <_printf_i+0x162>
 8007cda:	07ca      	lsls	r2, r1, #31
 8007cdc:	bf44      	itt	mi
 8007cde:	f041 0120 	orrmi.w	r1, r1, #32
 8007ce2:	6021      	strmi	r1, [r4, #0]
 8007ce4:	b91b      	cbnz	r3, 8007cee <_printf_i+0x15e>
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	f022 0220 	bic.w	r2, r2, #32
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	2210      	movs	r2, #16
 8007cf0:	e7b7      	b.n	8007c62 <_printf_i+0xd2>
 8007cf2:	064d      	lsls	r5, r1, #25
 8007cf4:	bf48      	it	mi
 8007cf6:	b29b      	uxthmi	r3, r3
 8007cf8:	e7ef      	b.n	8007cda <_printf_i+0x14a>
 8007cfa:	4665      	mov	r5, ip
 8007cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d00:	fb02 3311 	mls	r3, r2, r1, r3
 8007d04:	5cc3      	ldrb	r3, [r0, r3]
 8007d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d1f5      	bne.n	8007cfc <_printf_i+0x16c>
 8007d10:	e7b9      	b.n	8007c86 <_printf_i+0xf6>
 8007d12:	6813      	ldr	r3, [r2, #0]
 8007d14:	6825      	ldr	r5, [r4, #0]
 8007d16:	6961      	ldr	r1, [r4, #20]
 8007d18:	1d18      	adds	r0, r3, #4
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	0628      	lsls	r0, r5, #24
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	d501      	bpl.n	8007d26 <_printf_i+0x196>
 8007d22:	6019      	str	r1, [r3, #0]
 8007d24:	e002      	b.n	8007d2c <_printf_i+0x19c>
 8007d26:	066a      	lsls	r2, r5, #25
 8007d28:	d5fb      	bpl.n	8007d22 <_printf_i+0x192>
 8007d2a:	8019      	strh	r1, [r3, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	4665      	mov	r5, ip
 8007d32:	e7b9      	b.n	8007ca8 <_printf_i+0x118>
 8007d34:	6813      	ldr	r3, [r2, #0]
 8007d36:	1d19      	adds	r1, r3, #4
 8007d38:	6011      	str	r1, [r2, #0]
 8007d3a:	681d      	ldr	r5, [r3, #0]
 8007d3c:	6862      	ldr	r2, [r4, #4]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7f8 fa45 	bl	80001d0 <memchr>
 8007d46:	b108      	cbz	r0, 8007d4c <_printf_i+0x1bc>
 8007d48:	1b40      	subs	r0, r0, r5
 8007d4a:	6060      	str	r0, [r4, #4]
 8007d4c:	6863      	ldr	r3, [r4, #4]
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	2300      	movs	r3, #0
 8007d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d56:	e7a7      	b.n	8007ca8 <_printf_i+0x118>
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4630      	mov	r0, r6
 8007d60:	47c0      	blx	r8
 8007d62:	3001      	adds	r0, #1
 8007d64:	d0aa      	beq.n	8007cbc <_printf_i+0x12c>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	079b      	lsls	r3, r3, #30
 8007d6a:	d413      	bmi.n	8007d94 <_printf_i+0x204>
 8007d6c:	68e0      	ldr	r0, [r4, #12]
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	4298      	cmp	r0, r3
 8007d72:	bfb8      	it	lt
 8007d74:	4618      	movlt	r0, r3
 8007d76:	e7a3      	b.n	8007cc0 <_printf_i+0x130>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	464a      	mov	r2, r9
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4630      	mov	r0, r6
 8007d80:	47c0      	blx	r8
 8007d82:	3001      	adds	r0, #1
 8007d84:	d09a      	beq.n	8007cbc <_printf_i+0x12c>
 8007d86:	3501      	adds	r5, #1
 8007d88:	68e3      	ldr	r3, [r4, #12]
 8007d8a:	9a03      	ldr	r2, [sp, #12]
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	42ab      	cmp	r3, r5
 8007d90:	dcf2      	bgt.n	8007d78 <_printf_i+0x1e8>
 8007d92:	e7eb      	b.n	8007d6c <_printf_i+0x1dc>
 8007d94:	2500      	movs	r5, #0
 8007d96:	f104 0919 	add.w	r9, r4, #25
 8007d9a:	e7f5      	b.n	8007d88 <_printf_i+0x1f8>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ac      	bne.n	8007cfa <_printf_i+0x16a>
 8007da0:	7803      	ldrb	r3, [r0, #0]
 8007da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007daa:	e76c      	b.n	8007c86 <_printf_i+0xf6>
 8007dac:	080080c9 	.word	0x080080c9
 8007db0:	080080da 	.word	0x080080da

08007db4 <memcpy>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	1e43      	subs	r3, r0, #1
 8007db8:	440a      	add	r2, r1
 8007dba:	4291      	cmp	r1, r2
 8007dbc:	d100      	bne.n	8007dc0 <memcpy+0xc>
 8007dbe:	bd10      	pop	{r4, pc}
 8007dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc8:	e7f7      	b.n	8007dba <memcpy+0x6>

08007dca <memmove>:
 8007dca:	4288      	cmp	r0, r1
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	eb01 0302 	add.w	r3, r1, r2
 8007dd2:	d807      	bhi.n	8007de4 <memmove+0x1a>
 8007dd4:	1e42      	subs	r2, r0, #1
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	d00a      	beq.n	8007df0 <memmove+0x26>
 8007dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dde:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007de2:	e7f8      	b.n	8007dd6 <memmove+0xc>
 8007de4:	4283      	cmp	r3, r0
 8007de6:	d9f5      	bls.n	8007dd4 <memmove+0xa>
 8007de8:	1881      	adds	r1, r0, r2
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	42d3      	cmn	r3, r2
 8007dee:	d100      	bne.n	8007df2 <memmove+0x28>
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007df6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dfa:	e7f7      	b.n	8007dec <memmove+0x22>

08007dfc <_free_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4605      	mov	r5, r0
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d045      	beq.n	8007e90 <_free_r+0x94>
 8007e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e08:	1f0c      	subs	r4, r1, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfb8      	it	lt
 8007e0e:	18e4      	addlt	r4, r4, r3
 8007e10:	f000 f8d2 	bl	8007fb8 <__malloc_lock>
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <_free_r+0x98>)
 8007e16:	6813      	ldr	r3, [r2, #0]
 8007e18:	4610      	mov	r0, r2
 8007e1a:	b933      	cbnz	r3, 8007e2a <_free_r+0x2e>
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	6014      	str	r4, [r2, #0]
 8007e20:	4628      	mov	r0, r5
 8007e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e26:	f000 b8c8 	b.w	8007fba <__malloc_unlock>
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	d90c      	bls.n	8007e48 <_free_r+0x4c>
 8007e2e:	6821      	ldr	r1, [r4, #0]
 8007e30:	1862      	adds	r2, r4, r1
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bf04      	itt	eq
 8007e36:	681a      	ldreq	r2, [r3, #0]
 8007e38:	685b      	ldreq	r3, [r3, #4]
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	bf04      	itt	eq
 8007e3e:	1852      	addeq	r2, r2, r1
 8007e40:	6022      	streq	r2, [r4, #0]
 8007e42:	6004      	str	r4, [r0, #0]
 8007e44:	e7ec      	b.n	8007e20 <_free_r+0x24>
 8007e46:	4613      	mov	r3, r2
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	b10a      	cbz	r2, 8007e50 <_free_r+0x54>
 8007e4c:	42a2      	cmp	r2, r4
 8007e4e:	d9fa      	bls.n	8007e46 <_free_r+0x4a>
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	1858      	adds	r0, r3, r1
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d10b      	bne.n	8007e70 <_free_r+0x74>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	4401      	add	r1, r0
 8007e5c:	1858      	adds	r0, r3, r1
 8007e5e:	4282      	cmp	r2, r0
 8007e60:	6019      	str	r1, [r3, #0]
 8007e62:	d1dd      	bne.n	8007e20 <_free_r+0x24>
 8007e64:	6810      	ldr	r0, [r2, #0]
 8007e66:	6852      	ldr	r2, [r2, #4]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	4401      	add	r1, r0
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	e7d7      	b.n	8007e20 <_free_r+0x24>
 8007e70:	d902      	bls.n	8007e78 <_free_r+0x7c>
 8007e72:	230c      	movs	r3, #12
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	e7d3      	b.n	8007e20 <_free_r+0x24>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	1821      	adds	r1, r4, r0
 8007e7c:	428a      	cmp	r2, r1
 8007e7e:	bf04      	itt	eq
 8007e80:	6811      	ldreq	r1, [r2, #0]
 8007e82:	6852      	ldreq	r2, [r2, #4]
 8007e84:	6062      	str	r2, [r4, #4]
 8007e86:	bf04      	itt	eq
 8007e88:	1809      	addeq	r1, r1, r0
 8007e8a:	6021      	streq	r1, [r4, #0]
 8007e8c:	605c      	str	r4, [r3, #4]
 8007e8e:	e7c7      	b.n	8007e20 <_free_r+0x24>
 8007e90:	bd38      	pop	{r3, r4, r5, pc}
 8007e92:	bf00      	nop
 8007e94:	200000a8 	.word	0x200000a8

08007e98 <_malloc_r>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	1ccd      	adds	r5, r1, #3
 8007e9c:	f025 0503 	bic.w	r5, r5, #3
 8007ea0:	3508      	adds	r5, #8
 8007ea2:	2d0c      	cmp	r5, #12
 8007ea4:	bf38      	it	cc
 8007ea6:	250c      	movcc	r5, #12
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	db01      	blt.n	8007eb2 <_malloc_r+0x1a>
 8007eae:	42a9      	cmp	r1, r5
 8007eb0:	d903      	bls.n	8007eba <_malloc_r+0x22>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	f000 f87d 	bl	8007fb8 <__malloc_lock>
 8007ebe:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <_malloc_r+0xac>)
 8007ec0:	6814      	ldr	r4, [r2, #0]
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	b991      	cbnz	r1, 8007eec <_malloc_r+0x54>
 8007ec6:	4c20      	ldr	r4, [pc, #128]	; (8007f48 <_malloc_r+0xb0>)
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	b91b      	cbnz	r3, 8007ed4 <_malloc_r+0x3c>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f863 	bl	8007f98 <_sbrk_r>
 8007ed2:	6020      	str	r0, [r4, #0]
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 f85e 	bl	8007f98 <_sbrk_r>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d124      	bne.n	8007f2a <_malloc_r+0x92>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	6033      	str	r3, [r6, #0]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f868 	bl	8007fba <__malloc_unlock>
 8007eea:	e7e4      	b.n	8007eb6 <_malloc_r+0x1e>
 8007eec:	680b      	ldr	r3, [r1, #0]
 8007eee:	1b5b      	subs	r3, r3, r5
 8007ef0:	d418      	bmi.n	8007f24 <_malloc_r+0x8c>
 8007ef2:	2b0b      	cmp	r3, #11
 8007ef4:	d90f      	bls.n	8007f16 <_malloc_r+0x7e>
 8007ef6:	600b      	str	r3, [r1, #0]
 8007ef8:	50cd      	str	r5, [r1, r3]
 8007efa:	18cc      	adds	r4, r1, r3
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 f85c 	bl	8007fba <__malloc_unlock>
 8007f02:	f104 000b 	add.w	r0, r4, #11
 8007f06:	1d23      	adds	r3, r4, #4
 8007f08:	f020 0007 	bic.w	r0, r0, #7
 8007f0c:	1ac3      	subs	r3, r0, r3
 8007f0e:	d0d3      	beq.n	8007eb8 <_malloc_r+0x20>
 8007f10:	425a      	negs	r2, r3
 8007f12:	50e2      	str	r2, [r4, r3]
 8007f14:	e7d0      	b.n	8007eb8 <_malloc_r+0x20>
 8007f16:	428c      	cmp	r4, r1
 8007f18:	684b      	ldr	r3, [r1, #4]
 8007f1a:	bf16      	itet	ne
 8007f1c:	6063      	strne	r3, [r4, #4]
 8007f1e:	6013      	streq	r3, [r2, #0]
 8007f20:	460c      	movne	r4, r1
 8007f22:	e7eb      	b.n	8007efc <_malloc_r+0x64>
 8007f24:	460c      	mov	r4, r1
 8007f26:	6849      	ldr	r1, [r1, #4]
 8007f28:	e7cc      	b.n	8007ec4 <_malloc_r+0x2c>
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d005      	beq.n	8007f40 <_malloc_r+0xa8>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f82e 	bl	8007f98 <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d0cf      	beq.n	8007ee0 <_malloc_r+0x48>
 8007f40:	6025      	str	r5, [r4, #0]
 8007f42:	e7db      	b.n	8007efc <_malloc_r+0x64>
 8007f44:	200000a8 	.word	0x200000a8
 8007f48:	200000ac 	.word	0x200000ac

08007f4c <_realloc_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	4607      	mov	r7, r0
 8007f50:	4614      	mov	r4, r2
 8007f52:	460e      	mov	r6, r1
 8007f54:	b921      	cbnz	r1, 8007f60 <_realloc_r+0x14>
 8007f56:	4611      	mov	r1, r2
 8007f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f5c:	f7ff bf9c 	b.w	8007e98 <_malloc_r>
 8007f60:	b922      	cbnz	r2, 8007f6c <_realloc_r+0x20>
 8007f62:	f7ff ff4b 	bl	8007dfc <_free_r>
 8007f66:	4625      	mov	r5, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	f000 f826 	bl	8007fbc <_malloc_usable_size_r>
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d20f      	bcs.n	8007f94 <_realloc_r+0x48>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ff8e 	bl	8007e98 <_malloc_r>
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0f2      	beq.n	8007f68 <_realloc_r+0x1c>
 8007f82:	4631      	mov	r1, r6
 8007f84:	4622      	mov	r2, r4
 8007f86:	f7ff ff15 	bl	8007db4 <memcpy>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff ff35 	bl	8007dfc <_free_r>
 8007f92:	e7e9      	b.n	8007f68 <_realloc_r+0x1c>
 8007f94:	4635      	mov	r5, r6
 8007f96:	e7e7      	b.n	8007f68 <_realloc_r+0x1c>

08007f98 <_sbrk_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4c06      	ldr	r4, [pc, #24]	; (8007fb4 <_sbrk_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	f7f9 fcec 	bl	8001980 <_sbrk>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_sbrk_r+0x1a>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_sbrk_r+0x1a>
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20000498 	.word	0x20000498

08007fb8 <__malloc_lock>:
 8007fb8:	4770      	bx	lr

08007fba <__malloc_unlock>:
 8007fba:	4770      	bx	lr

08007fbc <_malloc_usable_size_r>:
 8007fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc0:	1f18      	subs	r0, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bfbc      	itt	lt
 8007fc6:	580b      	ldrlt	r3, [r1, r0]
 8007fc8:	18c0      	addlt	r0, r0, r3
 8007fca:	4770      	bx	lr

08007fcc <_init>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr

08007fd8 <_fini>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr
