
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008218  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080083a8  080083a8  000093a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000094b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080084b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  2000005c  08008514  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08008514  0000a5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a1  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b1  00000000  00000000  0001962d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  0001ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022005  00000000  00000000  0001d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001130d  00000000  00000000  0003f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1381  00000000  00000000  000509bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  00121d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00126790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008390 	.word	0x08008390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008390 	.word	0x08008390

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <read_TIM5>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t read_TIM5() {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <read_TIM5+0x14>)
 8000566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000568:	4618      	mov	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40000c00 	.word	0x40000c00

08000578 <HAL_GPIO_EXTI_Callback>:

// IMU interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(GPIO_Pin == GPIO_PIN_9)
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000588:	d114      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x3c>
  {
  	flag_read_imu_values = 1;
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <HAL_GPIO_EXTI_Callback+0x44>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
  	soft_rtc_imu_subs = read_TIM5();
 8000590:	f7ff ffe6 	bl	8000560 <read_TIM5>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000598:	6013      	str	r3, [r2, #0]
		soft_rtc_imu_s = soft_rtc_s;
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0x50>)
 80005a0:	701a      	strb	r2, [r3, #0]
		soft_rtc_imu_m = soft_rtc_m;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_GPIO_EXTI_Callback+0x54>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80005a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ae:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005b0:	f002 f987 	bl	80028c2 <HAL_GPIO_TogglePin>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200003fa 	.word	0x200003fa
 80005c0:	20000468 	.word	0x20000468
 80005c4:	20000464 	.word	0x20000464
 80005c8:	20000466 	.word	0x20000466
 80005cc:	20000463 	.word	0x20000463
 80005d0:	20000465 	.word	0x20000465
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <setup_mpu>:

// IMU setup
void setup_mpu(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 1, 1};
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <setup_mpu+0x5c>)
 80005e0:	60bb      	str	r3, [r7, #8]
	uint8_t adds[] = {107, 55, 26, 56};
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <setup_mpu+0x60>)
 80005e4:	607b      	str	r3, [r7, #4]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 80005e6:	2304      	movs	r3, #4
 80005e8:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e018      	b.n	8000622 <setup_mpu+0x4a>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 1000);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	3310      	adds	r3, #16
 80005f4:	443b      	add	r3, r7
 80005f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005fa:	4619      	mov	r1, r3
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f107 0208 	add.w	r2, r7, #8
 8000602:	4413      	add	r3, r2
 8000604:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	2201      	movs	r2, #1
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	460a      	mov	r2, r1
 8000614:	21d0      	movs	r1, #208	@ 0xd0
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <setup_mpu+0x64>)
 8000618:	f002 faca 	bl	8002bb0 <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	3301      	adds	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	7bfa      	ldrb	r2, [r7, #15]
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	429a      	cmp	r2, r3
 8000628:	d3e2      	bcc.n	80005f0 <setup_mpu+0x18>
	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	01011005 	.word	0x01011005
 8000638:	381a376b 	.word	0x381a376b
 800063c:	20000078 	.word	0x20000078

08000640 <make_message>:

// Message preparation to be sent to PC
void make_message(void) {
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b08f      	sub	sp, #60	@ 0x3c
 8000644:	af0a      	add	r7, sp, #40	@ 0x28
	sprintf((char*)str,
 8000646:	4b47      	ldr	r3, [pc, #284]	@ (8000764 <make_message+0x124>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	469c      	mov	ip, r3
 800064c:	4b46      	ldr	r3, [pc, #280]	@ (8000768 <make_message+0x128>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	469e      	mov	lr, r3
		"%04x"																			//4
		"\n", 																			//1
																								//=58
		(uint8_t)soft_rtc_imu_m,
		(uint8_t)soft_rtc_imu_s,
		(uint16_t)(soft_rtc_imu_subs>>16),
 8000652:	4b46      	ldr	r3, [pc, #280]	@ (800076c <make_message+0x12c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	0c1b      	lsrs	r3, r3, #16
 8000658:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 800065a:	4619      	mov	r1, r3
		(uint16_t)(soft_rtc_imu_subs),
 800065c:	4b43      	ldr	r3, [pc, #268]	@ (800076c <make_message+0x12c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 8000662:	4618      	mov	r0, r3

		(uint16_t)(dat_buf[0]<<8 | dat_buf[1]),
 8000664:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <make_message+0x130>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <make_message+0x130>)
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 8000678:	461c      	mov	r4, r3
		(uint16_t)(dat_buf[2]<<8 | dat_buf[3]),
 800067a:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <make_message+0x130>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <make_message+0x130>)
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 800068e:	461d      	mov	r5, r3
		(uint16_t)(dat_buf[4]<<8 | dat_buf[5]),
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <make_message+0x130>)
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21a      	sxth	r2, r3
 8000698:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <make_message+0x130>)
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006a4:	461e      	mov	r6, r3
		(uint16_t)(dat_buf[6]<<8 | dat_buf[7]),
 80006a6:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <make_message+0x130>)
 80006a8:	799b      	ldrb	r3, [r3, #6]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <make_message+0x130>)
 80006b0:	79db      	ldrb	r3, [r3, #7]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006ba:	60fb      	str	r3, [r7, #12]
		(uint16_t)(dat_buf[8]<<8 | dat_buf[9]),
 80006bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <make_message+0x130>)
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <make_message+0x130>)
 80006c6:	7a5b      	ldrb	r3, [r3, #9]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006d0:	60bb      	str	r3, [r7, #8]
		(uint16_t)(dat_buf[10]<<8 | dat_buf[11]),
 80006d2:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <make_message+0x130>)
 80006d4:	7a9b      	ldrb	r3, [r3, #10]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b21a      	sxth	r2, r3
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <make_message+0x130>)
 80006dc:	7adb      	ldrb	r3, [r3, #11]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006e6:	607b      	str	r3, [r7, #4]
		(uint16_t)(dat_buf[12]<<8 | dat_buf[13]),
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <make_message+0x130>)
 80006ea:	7b1b      	ldrb	r3, [r3, #12]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <make_message+0x130>)
 80006f2:	7b5b      	ldrb	r3, [r3, #13]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	b29b      	uxth	r3, r3
	sprintf((char*)str,
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <make_message+0x134>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	9309      	str	r3, [sp, #36]	@ 0x24
 8000704:	9208      	str	r2, [sp, #32]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	9207      	str	r2, [sp, #28]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	9206      	str	r2, [sp, #24]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	9305      	str	r3, [sp, #20]
 8000712:	9604      	str	r6, [sp, #16]
 8000714:	9503      	str	r5, [sp, #12]
 8000716:	9402      	str	r4, [sp, #8]
 8000718:	9001      	str	r0, [sp, #4]
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	4673      	mov	r3, lr
 800071e:	4662      	mov	r2, ip
 8000720:	4915      	ldr	r1, [pc, #84]	@ (8000778 <make_message+0x138>)
 8000722:	4816      	ldr	r0, [pc, #88]	@ (800077c <make_message+0x13c>)
 8000724:	f007 f994 	bl	8007a50 <siprintf>

		count);
	if (buf_flag_lidar_ts_ready == 1) {
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <make_message+0x140>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d115      	bne.n	800075c <make_message+0x11c>
		sprintf((char*)(str + N_IMU_CHARS),
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <make_message+0x144>)
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <make_message+0x148>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <make_message+0x14c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461c      	mov	r4, r3
			"%02x %02x %04x %04x"											//15
			"\n", 																		//1
																								//=18
			(uint8_t)soft_rtc_lidar_m,
			(uint8_t)soft_rtc_lidar_s,
			(uint16_t)(soft_rtc_lidar_subs>>16),
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <make_message+0x150>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	b29b      	uxth	r3, r3
		sprintf((char*)(str + N_IMU_CHARS),
 8000746:	461a      	mov	r2, r3
			(uint16_t)(soft_rtc_lidar_subs)
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <make_message+0x150>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
		sprintf((char*)(str + N_IMU_CHARS),
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	9200      	str	r2, [sp, #0]
 8000752:	4623      	mov	r3, r4
 8000754:	460a      	mov	r2, r1
 8000756:	490f      	ldr	r1, [pc, #60]	@ (8000794 <make_message+0x154>)
 8000758:	f007 f97a 	bl	8007a50 <siprintf>
		);
	}
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	20000465 	.word	0x20000465
 8000768:	20000466 	.word	0x20000466
 800076c:	20000468 	.word	0x20000468
 8000770:	20000410 	.word	0x20000410
 8000774:	200003f8 	.word	0x200003f8
 8000778:	080083a8 	.word	0x080083a8
 800077c:	200003ac 	.word	0x200003ac
 8000780:	200003fd 	.word	0x200003fd
 8000784:	200003e6 	.word	0x200003e6
 8000788:	2000046d 	.word	0x2000046d
 800078c:	2000046e 	.word	0x2000046e
 8000790:	20000470 	.word	0x20000470
 8000794:	080083e8 	.word	0x080083e8

08000798 <checksum>:

uint8_t checksum(char * s, uint8_t start, uint8_t end) {
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	4613      	mov	r3, r2
 80007a6:	70bb      	strb	r3, [r7, #2]
    uint8_t c = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=start; i<end; i++) {
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	73bb      	strb	r3, [r7, #14]
 80007b0:	e009      	b.n	80007c6 <checksum+0x2e>
      c = c ^ s[i];
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	4053      	eors	r3, r2
 80007be:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=start; i<end; i++) {
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3301      	adds	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d3f1      	bcc.n	80007b2 <checksum+0x1a>
    }
    return c;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <make_lidar_string>:
// NMEA GPRMC message generation
void make_lidar_string(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af02      	add	r7, sp, #8
	sprintf((char*)lidar_str,
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <make_lidar_string+0x54>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <make_lidar_string+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <make_lidar_string+0x5c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	4911      	ldr	r1, [pc, #68]	@ (800083c <make_lidar_string+0x60>)
 80007f8:	4811      	ldr	r0, [pc, #68]	@ (8000840 <make_lidar_string+0x64>)
 80007fa:	f007 f929 	bl	8007a50 <siprintf>
																													//=66
		(uint8_t)soft_rtc_lidar_h,
		(uint8_t)soft_rtc_lidar_m,
		(uint8_t)soft_rtc_lidar_s
	);
	uint8_t start = 1, end = N_CHARS_TO_LIDAR-5;
 80007fe:	2301      	movs	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	233d      	movs	r3, #61	@ 0x3d
 8000804:	71bb      	strb	r3, [r7, #6]
	uint8_t c = checksum((char*)lidar_str, start, end);
 8000806:	79ba      	ldrb	r2, [r7, #6]
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <make_lidar_string+0x64>)
 800080e:	f7ff ffc3 	bl	8000798 <checksum>
 8000812:	4603      	mov	r3, r0
 8000814:	717b      	strb	r3, [r7, #5]
	sprintf((char*)&lidar_str[end+1], "%02X", c);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	3301      	adds	r3, #1
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <make_lidar_string+0x64>)
 800081c:	4413      	add	r3, r2
 800081e:	797a      	ldrb	r2, [r7, #5]
 8000820:	4908      	ldr	r1, [pc, #32]	@ (8000844 <make_lidar_string+0x68>)
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f914 	bl	8007a50 <siprintf>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000046c 	.word	0x2000046c
 8000834:	2000046d 	.word	0x2000046d
 8000838:	2000046e 	.word	0x2000046e
 800083c:	08008400 	.word	0x08008400
 8000840:	20000420 	.word	0x20000420
 8000844:	0800844c 	.word	0x0800844c

08000848 <delay>:

void delay(uint16_t n) {
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<n; i++) {
 8000852:	2300      	movs	r3, #0
 8000854:	81fb      	strh	r3, [r7, #14]
 8000856:	e002      	b.n	800085e <delay+0x16>
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	3301      	adds	r3, #1
 800085c:	81fb      	strh	r3, [r7, #14]
 800085e:	89fa      	ldrh	r2, [r7, #14]
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	429a      	cmp	r2, r3
 8000864:	d3f8      	bcc.n	8000858 <delay+0x10>
		;
	}
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <cp>:

void cp() {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	e008      	b.n	8000892 <cp+0x1e>
		dat_buf[i] = dat[i];
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4908      	ldr	r1, [pc, #32]	@ (80008a8 <cp+0x34>)
 8000886:	5c89      	ldrb	r1, [r1, r2]
 8000888:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <cp+0x38>)
 800088a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3301      	adds	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b0d      	cmp	r3, #13
 8000896:	d9f3      	bls.n	8000880 <cp+0xc>
	}
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000400 	.word	0x20000400
 80008ac:	20000410 	.word	0x20000410

080008b0 <HAL_TIM_OC_DelayElapsedCallback>:
// Timers interrupts handler
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d127      	bne.n	8000914 <HAL_TIM_OC_DelayElapsedCallback+0x64>
		soft_rtc_s ++;
 80008c4:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008ce:	701a      	strb	r2, [r3, #0]
		if (soft_rtc_s == 60) {
 80008d0:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b3c      	cmp	r3, #60	@ 0x3c
 80008d6:	d13e      	bne.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
			soft_rtc_s = 0;
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
			soft_rtc_m ++;
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008e8:	701a      	strb	r2, [r3, #0]
			if (soft_rtc_m == 60) {
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80008f0:	d131      	bne.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
				soft_rtc_m = 0;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
				soft_rtc_h ++;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8000902:	701a      	strb	r2, [r3, #0]
				if (soft_rtc_h == 24) {
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b18      	cmp	r3, #24
 800090a:	d124      	bne.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
					soft_rtc_h = 0;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
			soft_rtc_lidar_m = soft_rtc_m;
			flag_lidar_ts_ready = 1;
			flag_transmit_to_lidar = 1;
		}
	}
}
 8000912:	e020      	b.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
	else if (htim->Instance == htim1.Instance)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d11a      	bne.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)==GPIO_PIN_SET) { // if timer output is HIGH
 8000920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8000926:	f001 ff9b 	bl	8002860 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d112      	bne.n	8000956 <HAL_TIM_OC_DelayElapsedCallback+0xa6>
			soft_rtc_lidar_subs = read_TIM5();
 8000930:	f7ff fe16 	bl	8000560 <read_TIM5>
 8000934:	4603      	mov	r3, r0
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 8000938:	6013      	str	r3, [r2, #0]
			soft_rtc_lidar_s = soft_rtc_s;
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 8000940:	701a      	strb	r2, [r3, #0]
			soft_rtc_lidar_m = soft_rtc_m;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000948:	701a      	strb	r2, [r3, #0]
			flag_lidar_ts_ready = 1;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
			flag_transmit_to_lidar = 1;
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200001cc 	.word	0x200001cc
 8000964:	20000464 	.word	0x20000464
 8000968:	20000463 	.word	0x20000463
 800096c:	20000462 	.word	0x20000462
 8000970:	2000014c 	.word	0x2000014c
 8000974:	40021000 	.word	0x40021000
 8000978:	20000470 	.word	0x20000470
 800097c:	2000046e 	.word	0x2000046e
 8000980:	2000046d 	.word	0x2000046d
 8000984:	200003fc 	.word	0x200003fc
 8000988:	200003fb 	.word	0x200003fb

0800098c <HAL_UART_RxCpltCallback>:
// UART receive (PC -> MCU) interrupt handler template
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
    	;
    }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f001 f85d 	bl	8001a64 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f8b3 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 fbb5 	bl	800111c <MX_GPIO_Init>
  MX_TIM1_Init();
 80009b2:	f000 f987 	bl	8000cc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009b6:	f000 fa27 	bl	8000e08 <MX_TIM3_Init>
  MX_DMA_Init();
 80009ba:	f000 fb77 	bl	80010ac <MX_DMA_Init>
  MX_I2C1_Init();
 80009be:	f000 f92b 	bl	8000c18 <MX_I2C1_Init>
  MX_RTC_Init();
 80009c2:	f000 f959 	bl	8000c78 <MX_RTC_Init>
  MX_UART4_Init();
 80009c6:	f000 fb1d 	bl	8001004 <MX_UART4_Init>
  MX_UART5_Init();
 80009ca:	f000 fb45 	bl	8001058 <MX_UART5_Init>
  MX_TIM5_Init();
 80009ce:	f000 fa99 	bl	8000f04 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80009d2:	2017      	movs	r0, #23
 80009d4:	f001 f9e1 	bl	8001d9a <HAL_NVIC_DisableIRQ>
  setup_mpu();
 80009d8:	f7ff fdfe 	bl	80005d8 <setup_mpu>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009dc:	2017      	movs	r0, #23
 80009de:	f001 f9ce 	bl	8001d7e <HAL_NVIC_EnableIRQ>

	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_1);
 80009e2:	2100      	movs	r1, #0
 80009e4:	483a      	ldr	r0, [pc, #232]	@ (8000ad0 <main+0x130>)
 80009e6:	f005 f909 	bl	8005bfc <HAL_TIM_OC_Start_IT>
	delay(10);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f7ff ff2c 	bl	8000848 <delay>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80009f0:	2100      	movs	r1, #0
 80009f2:	4838      	ldr	r0, [pc, #224]	@ (8000ad4 <main+0x134>)
 80009f4:	f005 f8c4 	bl	8005b80 <HAL_TIM_OC_Start>
	delay(10);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f7ff ff25 	bl	8000848 <delay>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009fe:	2100      	movs	r1, #0
 8000a00:	4835      	ldr	r0, [pc, #212]	@ (8000ad8 <main+0x138>)
 8000a02:	f005 f8fb 	bl	8005bfc <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // for debugging
 8000a06:	2120      	movs	r1, #32
 8000a08:	4834      	ldr	r0, [pc, #208]	@ (8000adc <main+0x13c>)
 8000a0a:	f001 ff29 	bl	8002860 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a16:	4832      	ldr	r0, [pc, #200]	@ (8000ae0 <main+0x140>)
 8000a18:	f001 ff3a 	bl	8002890 <HAL_GPIO_WritePin>
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)); // forward timer output signal to led pin
  	if (flag_read_imu_values == 1) { // if IMU data is ready to be read
 8000a1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <main+0x144>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d145      	bne.n	8000ab0 <main+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000a24:	2017      	movs	r0, #23
 8000a26:	f001 f9b8 	bl	8001d9a <HAL_NVIC_DisableIRQ>
			flag_read_imu_values = 0;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <main+0x144>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			count++;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <main+0x148>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <main+0x148>)
 8000a3a:	801a      	strh	r2, [r3, #0]
			cp();
 8000a3c:	f7ff ff1a 	bl	8000874 <cp>
			// Read IMU data
			HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat, 14);
 8000a40:	230e      	movs	r3, #14
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <main+0x14c>)
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	223b      	movs	r2, #59	@ 0x3b
 8000a4c:	21d0      	movs	r1, #208	@ 0xd0
 8000a4e:	4828      	ldr	r0, [pc, #160]	@ (8000af0 <main+0x150>)
 8000a50:	f002 f9a8 	bl	8002da4 <HAL_I2C_Mem_Read_DMA>
			buf_flag_lidar_ts_ready = flag_lidar_ts_ready;
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <main+0x154>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <main+0x158>)
 8000a5a:	701a      	strb	r2, [r3, #0]

			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
			// Send data to PC
			uint8_t mes_length = N_IMU_CHARS + buf_flag_lidar_ts_ready * N_LIDAR_CHARS;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <main+0x158>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	333a      	adds	r3, #58	@ 0x3a
 8000a6c:	71fb      	strb	r3, [r7, #7]
			make_message();
 8000a6e:	f7ff fde7 	bl	8000640 <make_message>
			HAL_UART_Transmit_DMA(&huart4, str, mes_length);//, 1000);	//HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	4920      	ldr	r1, [pc, #128]	@ (8000afc <main+0x15c>)
 8000a7a:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <main+0x160>)
 8000a7c:	f005 ffd6 	bl	8006a2c <HAL_UART_Transmit_DMA>
			delay(7000);
 8000a80:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8000a84:	f7ff fee0 	bl	8000848 <delay>
			//if(count & 1024) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);}
			if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);}
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <main+0x164>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <main+0xfc>
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <main+0x164>)
 8000a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9a:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a9c:	2017      	movs	r0, #23
 8000a9e:	f001 f96e 	bl	8001d7e <HAL_NVIC_EnableIRQ>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);

			if (buf_flag_lidar_ts_ready == 1) {
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <main+0x158>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <main+0x110>
				flag_lidar_ts_ready = 0;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <main+0x154>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
			}
		}
  	if (flag_transmit_to_lidar==1) { // if NMEA GPRMC message must be sent
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <main+0x168>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1a6      	bne.n	8000a06 <main+0x66>
  		flag_transmit_to_lidar = 0;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <main+0x168>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
  		make_lidar_string();
 8000abe:	f7ff fe8d 	bl	80007dc <make_lidar_string>
  		// Send NMEA GPRMC message to lidar
  		HAL_UART_Transmit_DMA(&huart5, lidar_str, N_CHARS_TO_LIDAR);
 8000ac2:	2242      	movs	r2, #66	@ 0x42
 8000ac4:	4911      	ldr	r1, [pc, #68]	@ (8000b0c <main+0x16c>)
 8000ac6:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <main+0x170>)
 8000ac8:	f005 ffb0 	bl	8006a2c <HAL_UART_Transmit_DMA>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // for debugging
 8000acc:	e79b      	b.n	8000a06 <main+0x66>
 8000ace:	bf00      	nop
 8000ad0:	200001cc 	.word	0x200001cc
 8000ad4:	2000018c 	.word	0x2000018c
 8000ad8:	2000014c 	.word	0x2000014c
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	200003fa 	.word	0x200003fa
 8000ae8:	200003f8 	.word	0x200003f8
 8000aec:	20000400 	.word	0x20000400
 8000af0:	20000078 	.word	0x20000078
 8000af4:	200003fc 	.word	0x200003fc
 8000af8:	200003fd 	.word	0x200003fd
 8000afc:	200003ac 	.word	0x200003ac
 8000b00:	2000020c 	.word	0x2000020c
 8000b04:	40013c00 	.word	0x40013c00
 8000b08:	200003fb 	.word	0x200003fb
 8000b0c:	20000420 	.word	0x20000420
 8000b10:	2000024c 	.word	0x2000024c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b098      	sub	sp, #96	@ 0x60
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b1e:	2230      	movs	r2, #48	@ 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f006 ffb4 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <SystemClock_Config+0xf8>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c0c <SystemClock_Config+0xf8>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <SystemClock_Config+0xf8>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <SystemClock_Config+0xfc>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a29      	ldr	r2, [pc, #164]	@ (8000c10 <SystemClock_Config+0xfc>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <SystemClock_Config+0xfc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b96:	2305      	movs	r3, #5
 8000b98:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b9a:	2360      	movs	r3, #96	@ 0x60
 8000b9c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 f932 	bl	8004e14 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bb6:	f000 fb47 	bl	8001248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fb8a 	bl	80052f0 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000be2:	f000 fb31 	bl	8001248 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <SystemClock_Config+0x100>)
 8000bec:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fd9c 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000bfe:	f000 fb23 	bl	8001248 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3760      	adds	r7, #96	@ 0x60
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000
 8000c14:	00190300 	.word	0x00190300

08000c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <MX_I2C1_Init+0x58>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c24:	4a13      	ldr	r2, [pc, #76]	@ (8000c74 <MX_I2C1_Init+0x5c>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000c28:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c2e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c58:	f001 fe66 	bl	8002928 <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c62:	f000 faf1 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000078 	.word	0x20000078
 8000c70:	40005400 	.word	0x40005400
 8000c74:	00061a80 	.word	0x00061a80

08000c78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <MX_RTC_Init+0x48>)
 8000c80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32-1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c8a:	221f      	movs	r2, #31
 8000c8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c90:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000caa:	f004 fe23 	bl	80058f4 <HAL_RTC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000cb4:	f000 fac8 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000012c 	.word	0x2000012c
 8000cc0:	40002800 	.word	0x40002800

08000cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	@ 0x58
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f006 fec7 	bl	8007a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d02:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d04:	4a3f      	ldr	r2, [pc, #252]	@ (8000e04 <MX_TIM1_Init+0x140>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7680-1;
 8000d08:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d0a:	f641 52ff 	movw	r2, #7679	@ 0x1dff
 8000d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b3b      	ldr	r3, [pc, #236]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 8000d16:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d18:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d30:	4833      	ldr	r0, [pc, #204]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d32:	f004 fec4 	bl	8005abe <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 fa84 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482c      	ldr	r0, [pc, #176]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d4e:	f005 f941 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d58:	f000 fa76 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d5c:	4828      	ldr	r0, [pc, #160]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d5e:	f004 fed9 	bl	8005b14 <HAL_TIM_OC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d68:	f000 fa6e 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4821      	ldr	r0, [pc, #132]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000d7c:	f005 fd26 	bl	80067cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d86:	f000 fa5f 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d8a:	2330      	movs	r3, #48	@ 0x30
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4814      	ldr	r0, [pc, #80]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000db0:	f005 f8b0 	bl	8005f14 <HAL_TIM_OC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000dba:	f000 fa45 	bl	8001248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000de2:	f005 fd6f 	bl	80068c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000dec:	f000 fa2c 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000df0:	4803      	ldr	r0, [pc, #12]	@ (8000e00 <MX_TIM1_Init+0x13c>)
 8000df2:	f000 fb55 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3758      	adds	r7, #88	@ 0x58
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000014c 	.word	0x2000014c
 8000e04:	40010000 	.word	0x40010000

08000e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e38:	4b30      	ldr	r3, [pc, #192]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e3a:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_TIM3_Init+0xf8>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e56:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e58:	2280      	movs	r2, #128	@ 0x80
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e5c:	4827      	ldr	r0, [pc, #156]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e5e:	f004 fe2e 	bl	8005abe <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e68:	f000 f9ee 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4820      	ldr	r0, [pc, #128]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e7a:	f005 f8ab 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e84:	f000 f9e0 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e88:	481c      	ldr	r0, [pc, #112]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000e8a:	f004 fe43 	bl	8005b14 <HAL_TIM_OC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e94:	f000 f9d8 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4815      	ldr	r0, [pc, #84]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000ea8:	f005 fc90 	bl	80067cc <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000eb2:	f000 f9c9 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000eb6:	2330      	movs	r3, #48	@ 0x30
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000ece:	f005 f821 	bl	8005f14 <HAL_TIM_OC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ed8:	f000 f9b6 	bl	8001248 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0208 	orr.w	r2, r2, #8
 8000eea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <MX_TIM3_Init+0xf4>)
 8000eee:	f000 fad7 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	@ 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000018c 	.word	0x2000018c
 8000f00:	40000400 	.word	0x40000400

08000f04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f34:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f36:	4a31      	ldr	r2, [pc, #196]	@ (8000ffc <MX_TIM5_Init+0xf8>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3-1;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25600000 - 1;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f48:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <MX_TIM5_Init+0xfc>)
 8000f4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f58:	4827      	ldr	r0, [pc, #156]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f5a:	f004 fdb0 	bl	8005abe <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f64:	f000 f970 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f76:	f005 f82d 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000f80:	f000 f962 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000f84:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000f86:	f004 fdc5 	bl	8005b14 <HAL_TIM_OC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000f90:	f000 f95a 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4815      	ldr	r0, [pc, #84]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000fa4:	f005 fc12 	bl	80067cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000fae:	f000 f94b 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fb2:	2330      	movs	r3, #48	@ 0x30
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000fca:	f004 ffa3 	bl	8005f14 <HAL_TIM_OC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000fd4:	f000 f938 	bl	8001248 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fe8:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <MX_TIM5_Init+0xf4>)
 8000fea:	f000 fa59 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	@ 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001cc 	.word	0x200001cc
 8000ffc:	40000c00 	.word	0x40000c00
 8001000:	01869fff 	.word	0x01869fff

08001004 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <MX_UART4_Init+0x48>)
 800100a:	4a11      	ldr	r2, [pc, #68]	@ (8001050 <MX_UART4_Init+0x4c>)
 800100c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_UART4_Init+0x48>)
 8001010:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <MX_UART4_Init+0x50>)
 8001012:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001014:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <MX_UART4_Init+0x48>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_UART4_Init+0x48>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_UART4_Init+0x48>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_UART4_Init+0x48>)
 8001028:	220c      	movs	r2, #12
 800102a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_UART4_Init+0x48>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_UART4_Init+0x48>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_UART4_Init+0x48>)
 800103a:	f005 fca9 	bl	8006990 <HAL_UART_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8001044:	f000 f900 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000020c 	.word	0x2000020c
 8001050:	40004c00 	.word	0x40004c00
 8001054:	0007a120 	.word	0x0007a120

08001058 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_UART5_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_UART5_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_UART5_Init+0x4c>)
 8001064:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_UART5_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_UART5_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_UART5_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_UART5_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_UART5_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_UART5_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_UART5_Init+0x4c>)
 8001090:	f005 fc7e 	bl	8006990 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f8d5 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000024c 	.word	0x2000024c
 80010a8:	40005000 	.word	0x40005000

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_DMA_Init+0x6c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <MX_DMA_Init+0x6c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_DMA_Init+0x6c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2105      	movs	r1, #5
 80010d2:	200d      	movs	r0, #13
 80010d4:	f000 fe37 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010d8:	200d      	movs	r0, #13
 80010da:	f000 fe50 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	200f      	movs	r0, #15
 80010e4:	f000 fe2f 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010e8:	200f      	movs	r0, #15
 80010ea:	f000 fe48 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2010      	movs	r0, #16
 80010f4:	f000 fe27 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010f8:	2010      	movs	r0, #16
 80010fa:	f000 fe40 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	202f      	movs	r0, #47	@ 0x2f
 8001104:	f000 fe1f 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001108:	202f      	movs	r0, #47	@ 0x2f
 800110a:	f000 fe38 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a3f      	ldr	r2, [pc, #252]	@ (8001238 <MX_GPIO_Init+0x11c>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b3d      	ldr	r3, [pc, #244]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4b39      	ldr	r3, [pc, #228]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a38      	ldr	r2, [pc, #224]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <MX_GPIO_Init+0x11c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <MX_GPIO_Init+0x11c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a2a      	ldr	r2, [pc, #168]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_GPIO_Init+0x11c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x11c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011e0:	4816      	ldr	r0, [pc, #88]	@ (800123c <MX_GPIO_Init+0x120>)
 80011e2:	f001 fb55 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	480f      	ldr	r0, [pc, #60]	@ (800123c <MX_GPIO_Init+0x120>)
 8001200:	f001 f992 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_GPIO_Init+0x124>)
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	480a      	ldr	r0, [pc, #40]	@ (8001244 <MX_GPIO_Init+0x128>)
 800121a:	f001 f985 	bl	8002528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2017      	movs	r0, #23
 8001224:	f000 fd8f 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001228:	2017      	movs	r0, #23
 800122a:	f000 fda8 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	@ 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	10110000 	.word	0x10110000
 8001244:	40020800 	.word	0x40020800

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <HAL_I2C_MspInit+0xf0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d162      	bne.n	8001390 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b33      	ldr	r3, [pc, #204]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a32      	ldr	r2, [pc, #200]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b30      	ldr	r3, [pc, #192]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4827      	ldr	r0, [pc, #156]	@ (80013a0 <HAL_I2C_MspInit+0xf8>)
 8001302:	f001 f911 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a23      	ldr	r2, [pc, #140]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b21      	ldr	r3, [pc, #132]	@ (800139c <HAL_I2C_MspInit+0xf4>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001324:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <HAL_I2C_MspInit+0x100>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 800132a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800132e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 800133e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001342:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001358:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800135c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001364:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001366:	f000 fd33 	bl	8001dd0 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001370:	f7ff ff6a 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 8001378:	639a      	str	r2, [r3, #56]	@ 0x38
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_I2C_MspInit+0xfc>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	201f      	movs	r0, #31
 8001386:	f000 fcde 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800138a:	201f      	movs	r0, #31
 800138c:	f000 fcf7 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400
 80013a4:	200000cc 	.word	0x200000cc
 80013a8:	40026088 	.word	0x40026088

080013ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_RTC_MspInit+0x24>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d102      	bne.n	80013c4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RTC_MspInit+0x28>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40002800 	.word	0x40002800
 80013d4:	42470e3c 	.word	0x42470e3c

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001490 <HAL_TIM_Base_MspInit+0xb8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d116      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 4, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	201b      	movs	r0, #27
 800140c:	f000 fc9b 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001410:	201b      	movs	r0, #27
 8001412:	f000 fcb4 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001416:	e036      	b.n	8001486 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <HAL_TIM_Base_MspInit+0xc0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d116      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2104      	movs	r1, #4
 8001442:	201d      	movs	r0, #29
 8001444:	f000 fc7f 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001448:	201d      	movs	r0, #29
 800144a:	f000 fc98 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 800144e:	e01a      	b.n	8001486 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a11      	ldr	r2, [pc, #68]	@ (800149c <HAL_TIM_Base_MspInit+0xc4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d115      	bne.n	8001486 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_TIM_Base_MspInit+0xbc>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2032      	movs	r0, #50	@ 0x32
 800147c:	f000 fc63 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001480:	2032      	movs	r0, #50	@ 0x32
 8001482:	f000 fc7c 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40010000 	.word	0x40010000
 8001494:	40023800 	.word	0x40023800
 8001498:	40000400 	.word	0x40000400
 800149c:	40000c00 	.word	0x40000c00

080014a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a36      	ldr	r2, [pc, #216]	@ (8001598 <HAL_TIM_MspPostInit+0xf8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11f      	bne.n	8001502 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a34      	ldr	r2, [pc, #208]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b32      	ldr	r3, [pc, #200]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4829      	ldr	r0, [pc, #164]	@ (80015a0 <HAL_TIM_MspPostInit+0x100>)
 80014fc:	f001 f814 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001500:	e046      	b.n	8001590 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <HAL_TIM_MspPostInit+0x104>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d11e      	bne.n	800154a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4819      	ldr	r0, [pc, #100]	@ (80015a8 <HAL_TIM_MspPostInit+0x108>)
 8001544:	f000 fff0 	bl	8002528 <HAL_GPIO_Init>
}
 8001548:	e022      	b.n	8001590 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_TIM_MspPostInit+0x10c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d11d      	bne.n	8001590 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_TIM_MspPostInit+0xfc>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001580:	2302      	movs	r3, #2
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <HAL_TIM_MspPostInit+0x108>)
 800158c:	f000 ffcc 	bl	8002528 <HAL_GPIO_Init>
}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40010000 	.word	0x40010000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40000400 	.word	0x40000400
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40000c00 	.word	0x40000c00

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a90      	ldr	r2, [pc, #576]	@ (8001810 <HAL_UART_MspInit+0x260>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	f040 8092 	bne.w	80016f8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001814 <HAL_UART_MspInit+0x264>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a8d      	ldr	r2, [pc, #564]	@ (8001814 <HAL_UART_MspInit+0x264>)
 80015de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e4:	4b8b      	ldr	r3, [pc, #556]	@ (8001814 <HAL_UART_MspInit+0x264>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	4b87      	ldr	r3, [pc, #540]	@ (8001814 <HAL_UART_MspInit+0x264>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	4a86      	ldr	r2, [pc, #536]	@ (8001814 <HAL_UART_MspInit+0x264>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001600:	4b84      	ldr	r3, [pc, #528]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800160c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800161e:	2308      	movs	r3, #8
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	487b      	ldr	r0, [pc, #492]	@ (8001818 <HAL_UART_MspInit+0x268>)
 800162a:	f000 ff7d 	bl	8002528 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800162e:	4b7b      	ldr	r3, [pc, #492]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001630:	4a7b      	ldr	r2, [pc, #492]	@ (8001820 <HAL_UART_MspInit+0x270>)
 8001632:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001634:	4b79      	ldr	r3, [pc, #484]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001636:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800163a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163c:	4b77      	ldr	r3, [pc, #476]	@ (800181c <HAL_UART_MspInit+0x26c>)
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b76      	ldr	r3, [pc, #472]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b74      	ldr	r3, [pc, #464]	@ (800181c <HAL_UART_MspInit+0x26c>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001650:	4b72      	ldr	r3, [pc, #456]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001656:	4b71      	ldr	r3, [pc, #452]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800165c:	4b6f      	ldr	r3, [pc, #444]	@ (800181c <HAL_UART_MspInit+0x26c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b6e      	ldr	r3, [pc, #440]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b6c      	ldr	r3, [pc, #432]	@ (800181c <HAL_UART_MspInit+0x26c>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800166e:	486b      	ldr	r0, [pc, #428]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001670:	f000 fbae 	bl	8001dd0 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800167a:	f7ff fde5 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a66      	ldr	r2, [pc, #408]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
 8001684:	4a65      	ldr	r2, [pc, #404]	@ (800181c <HAL_UART_MspInit+0x26c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800168a:	4b66      	ldr	r3, [pc, #408]	@ (8001824 <HAL_UART_MspInit+0x274>)
 800168c:	4a66      	ldr	r2, [pc, #408]	@ (8001828 <HAL_UART_MspInit+0x278>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_UART_MspInit+0x274>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001698:	4b62      	ldr	r3, [pc, #392]	@ (8001824 <HAL_UART_MspInit+0x274>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80016b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b59      	ldr	r3, [pc, #356]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c4:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80016ca:	4856      	ldr	r0, [pc, #344]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016cc:	f000 fb80 	bl	8001dd0 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80016d6:	f7ff fdb7 	bl	8001248 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a51      	ldr	r2, [pc, #324]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e0:	4a50      	ldr	r2, [pc, #320]	@ (8001824 <HAL_UART_MspInit+0x274>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2034      	movs	r0, #52	@ 0x34
 80016ec:	f000 fb2b 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016f0:	2034      	movs	r0, #52	@ 0x34
 80016f2:	f000 fb44 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80016f6:	e086      	b.n	8001806 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==UART5)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	@ (800182c <HAL_UART_MspInit+0x27c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	f040 8081 	bne.w	8001806 <HAL_UART_MspInit+0x256>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <HAL_UART_MspInit+0x264>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	4a41      	ldr	r2, [pc, #260]	@ (8001814 <HAL_UART_MspInit+0x264>)
 800170e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001712:	6413      	str	r3, [r2, #64]	@ 0x40
 8001714:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	4a3a      	ldr	r2, [pc, #232]	@ (8001814 <HAL_UART_MspInit+0x264>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001730:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	4a33      	ldr	r2, [pc, #204]	@ (8001814 <HAL_UART_MspInit+0x264>)
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	6313      	str	r3, [r2, #48]	@ 0x30
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_UART_MspInit+0x264>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001762:	2301      	movs	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800176a:	2308      	movs	r3, #8
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4828      	ldr	r0, [pc, #160]	@ (8001818 <HAL_UART_MspInit+0x268>)
 8001776:	f000 fed7 	bl	8002528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800177a:	2304      	movs	r3, #4
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800178a:	2308      	movs	r3, #8
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4826      	ldr	r0, [pc, #152]	@ (8001830 <HAL_UART_MspInit+0x280>)
 8001796:	f000 fec7 	bl	8002528 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <HAL_UART_MspInit+0x284>)
 800179c:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <HAL_UART_MspInit+0x288>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80017a0:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017aa:	2240      	movs	r2, #64	@ 0x40
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80017da:	4816      	ldr	r0, [pc, #88]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017dc:	f000 faf8 	bl	8001dd0 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80017e6:	f7ff fd2f 	bl	8001248 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80017f0:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <HAL_UART_MspInit+0x284>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	2035      	movs	r0, #53	@ 0x35
 80017fc:	f000 faa3 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001800:	2035      	movs	r0, #53	@ 0x35
 8001802:	f000 fabc 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3730      	adds	r7, #48	@ 0x30
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40004c00 	.word	0x40004c00
 8001814:	40023800 	.word	0x40023800
 8001818:	40020800 	.word	0x40020800
 800181c:	2000028c 	.word	0x2000028c
 8001820:	40026070 	.word	0x40026070
 8001824:	200002ec 	.word	0x200002ec
 8001828:	40026040 	.word	0x40026040
 800182c:	40005000 	.word	0x40005000
 8001830:	40020c00 	.word	0x40020c00
 8001834:	2000034c 	.word	0x2000034c
 8001838:	400260b8 	.word	0x400260b8

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	bf00      	nop
 8001850:	e7fd      	b.n	800184e <HardFault_Handler+0x4>

08001852 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001856:	bf00      	nop
 8001858:	e7fd      	b.n	8001856 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	bf00      	nop
 8001860:	e7fd      	b.n	800185e <BusFault_Handler+0x4>

08001862 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001866:	bf00      	nop
 8001868:	e7fd      	b.n	8001866 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f936 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <DMA1_Stream2_IRQHandler+0x10>)
 80018a6:	f000 fbbb 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002ec 	.word	0x200002ec

080018b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA1_Stream4_IRQHandler+0x10>)
 80018ba:	f000 fbb1 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000028c 	.word	0x2000028c

080018c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA1_Stream5_IRQHandler+0x10>)
 80018ce:	f000 fba7 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000cc 	.word	0x200000cc

080018dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80018e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018e4:	f001 f808 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <TIM1_CC_IRQHandler+0x10>)
 80018f2:	f004 fa07 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000014c 	.word	0x2000014c

08001900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <TIM3_IRQHandler+0x10>)
 8001906:	f004 f9fd 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000018c 	.word	0x2000018c

08001914 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <I2C1_EV_IRQHandler+0x10>)
 800191a:	f001 fb8f 	bl	800303c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000078 	.word	0x20000078

08001928 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <DMA1_Stream7_IRQHandler+0x10>)
 800192e:	f000 fb77 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000034c 	.word	0x2000034c

0800193c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <TIM5_IRQHandler+0x10>)
 8001942:	f004 f9df 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001cc 	.word	0x200001cc

08001950 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <UART4_IRQHandler+0x10>)
 8001956:	f005 f8d5 	bl	8006b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000020c 	.word	0x2000020c

08001964 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <UART5_IRQHandler+0x10>)
 800196a:	f005 f8cb 	bl	8006b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000024c 	.word	0x2000024c

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f006 f87a 	bl	8007aa0 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20020000 	.word	0x20020000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000474 	.word	0x20000474
 80019e0:	200005c8 	.word	0x200005c8

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <SystemInit+0x28>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <SystemInit+0x28>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SystemInit+0x28>)
 80019fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a16:	e003      	b.n	8001a20 <LoopCopyDataInit>

08001a18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a1e:	3104      	adds	r1, #4

08001a20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a20:	480b      	ldr	r0, [pc, #44]	@ (8001a50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a28:	d3f6      	bcc.n	8001a18 <CopyDataInit>
  ldr  r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a2c:	e002      	b.n	8001a34 <LoopFillZerobss>

08001a2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a30:	f842 3b04 	str.w	r3, [r2], #4

08001a34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a38:	d3f9      	bcc.n	8001a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd3 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f006 f835 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7fe ffad 	bl	80009a0 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a4c:	080084b8 	.word	0x080084b8
  ldr  r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a54:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 8001a58:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8001a5c:	200005c4 	.word	0x200005c4

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f94f 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fbde 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f975 	bl	8001db6 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ae4:	f000 f92f 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000478 	.word	0x20000478

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000478 	.word	0x20000478

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db12      	blt.n	8001c20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	490a      	ldr	r1, [pc, #40]	@ (8001c2c <__NVIC_DisableIRQ+0x44>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	3320      	adds	r3, #32
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c14:	f3bf 8f4f 	dsb	sy
}
 8001c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c1a:	f3bf 8f6f 	isb	sy
}
 8001c1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	@ (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	@ 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff05 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff1a 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff0d 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff1d 	bl	8001be8 <__NVIC_DisableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff94 	bl	8001cec <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fea8 	bl	8001b30 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e099      	b.n	8001f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fe8f 	bl	8001b30 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d908      	bls.n	8001e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e078      	b.n	8001f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e8      	bne.n	8001e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_DMA_Init+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d117      	bne.n	8001ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 faab 	bl	8002430 <DMA_CheckFifoParam>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa62 	bl	80023c4 <DMA_CalcBaseAndBitshift>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	223f      	movs	r2, #63	@ 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	f010803f 	.word	0xf010803f

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e040      	b.n	8001fd4 <HAL_DMA_Start_IT+0xa8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12f      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9f4 	bl	8002368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	223f      	movs	r2, #63	@ 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0216 	orr.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00c      	b.n	8002014 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800202c:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_DMA_IRQHandler+0x248>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8e      	ldr	r2, [pc, #568]	@ (800226c <HAL_DMA_IRQHandler+0x24c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2208      	movs	r2, #8
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2208      	movs	r2, #8
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2201      	movs	r2, #1
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2204      	movs	r2, #4
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2210      	movs	r2, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d043      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	2210      	movs	r2, #16
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e01f      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e016      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2220      	movs	r2, #32
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 808f 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8087 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2220      	movs	r2, #32
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d136      	bne.n	8002238 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_IRQHandler+0x1da>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	223f      	movs	r2, #63	@ 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07e      	beq.n	800232c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
        }
        return;
 8002236:	e079      	b.n	800232c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e02c      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
 8002266:	bf00      	nop
 8002268:	20000000 	.word	0x20000000
 800226c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e01e      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d032      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d307      	bcc.n	8002308 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f2      	bne.n	80022ec <HAL_DMA_IRQHandler+0x2cc>
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002308:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x30e>
        return;
 800232c:	bf00      	nop
    }
  }
}
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b40      	cmp	r3, #64	@ 0x40
 8002394:	d108      	bne.n	80023a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023a6:	e007      	b.n	80023b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b10      	subs	r3, #16
 80023d4:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <DMA_CalcBaseAndBitshift+0x64>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023de:	4a13      	ldr	r2, [pc, #76]	@ (800242c <DMA_CalcBaseAndBitshift+0x68>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d909      	bls.n	8002406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	1d1a      	adds	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58
 8002404:	e007      	b.n	8002416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	aaaaaaab 	.word	0xaaaaaaab
 800242c:	0800846c 	.word	0x0800846c

08002430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d856      	bhi.n	80024fe <DMA_CheckFifoParam+0xce>
 8002450:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <DMA_CheckFifoParam+0x28>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002469 	.word	0x08002469
 800245c:	0800247b 	.word	0x0800247b
 8002460:	08002469 	.word	0x08002469
 8002464:	080024ff 	.word	0x080024ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d046      	beq.n	8002502 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e043      	b.n	8002502 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002482:	d140      	bne.n	8002506 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e03d      	b.n	8002506 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002492:	d121      	bne.n	80024d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d837      	bhi.n	800250a <DMA_CheckFifoParam+0xda>
 800249a:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <DMA_CheckFifoParam+0x70>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024b7 	.word	0x080024b7
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	080024c9 	.word	0x080024c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      break;
 80024b4:	e030      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d025      	beq.n	800250e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c6:	e022      	b.n	800250e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024d6:	e01c      	b.n	8002512 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d903      	bls.n	80024e6 <DMA_CheckFifoParam+0xb6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e4:	e018      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ea:	e015      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00e      	beq.n	8002516 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e00b      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 80024fe:	bf00      	nop
 8002500:	e00a      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e008      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e006      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e004      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e002      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;   
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
    }
  } 
  
  return status; 
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e16b      	b.n	800281c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 815a 	bne.w	8002816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d00b      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002576:	2b11      	cmp	r3, #17
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d130      	bne.n	80025e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0xfc>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80b4 	beq.w	8002816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b60      	ldr	r3, [pc, #384]	@ (8002834 <HAL_GPIO_Init+0x30c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002834 <HAL_GPIO_Init+0x30c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_GPIO_Init+0x30c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002838 <HAL_GPIO_Init+0x310>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_GPIO_Init+0x314>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x226>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a51      	ldr	r2, [pc, #324]	@ (8002840 <HAL_GPIO_Init+0x318>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x222>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a50      	ldr	r2, [pc, #320]	@ (8002844 <HAL_GPIO_Init+0x31c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4f      	ldr	r2, [pc, #316]	@ (8002848 <HAL_GPIO_Init+0x320>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x21a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4e      	ldr	r2, [pc, #312]	@ (800284c <HAL_GPIO_Init+0x324>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x216>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4d      	ldr	r2, [pc, #308]	@ (8002850 <HAL_GPIO_Init+0x328>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x212>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4c      	ldr	r2, [pc, #304]	@ (8002854 <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <HAL_GPIO_Init+0x330>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x20a>
 800272e:	2307      	movs	r3, #7
 8002730:	e00e      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002732:	2308      	movs	r3, #8
 8002734:	e00c      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002736:	2306      	movs	r3, #6
 8002738:	e00a      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273a:	2305      	movs	r3, #5
 800273c:	e008      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800273e:	2304      	movs	r3, #4
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002742:	2303      	movs	r3, #3
 8002744:	e004      	b.n	8002750 <HAL_GPIO_Init+0x228>
 8002746:	2302      	movs	r3, #2
 8002748:	e002      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_GPIO_Init+0x228>
 800274e:	2300      	movs	r3, #0
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f002 0203 	and.w	r2, r2, #3
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	4093      	lsls	r3, r2
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002760:	4935      	ldr	r1, [pc, #212]	@ (8002838 <HAL_GPIO_Init+0x310>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276e:	4b3b      	ldr	r3, [pc, #236]	@ (800285c <HAL_GPIO_Init+0x334>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002792:	4a32      	ldr	r2, [pc, #200]	@ (800285c <HAL_GPIO_Init+0x334>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002798:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_GPIO_Init+0x334>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027bc:	4a27      	ldr	r2, [pc, #156]	@ (800285c <HAL_GPIO_Init+0x334>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c2:	4b26      	ldr	r3, [pc, #152]	@ (800285c <HAL_GPIO_Init+0x334>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e6:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_GPIO_Init+0x334>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_GPIO_Init+0x334>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002810:	4a12      	ldr	r2, [pc, #72]	@ (800285c <HAL_GPIO_Init+0x334>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2b0f      	cmp	r3, #15
 8002820:	f67f ae90 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3724      	adds	r7, #36	@ 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800
 8002838:	40013800 	.word	0x40013800
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40021000 	.word	0x40021000
 8002850:	40021400 	.word	0x40021400
 8002854:	40021800 	.word	0x40021800
 8002858:	40021c00 	.word	0x40021c00
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e001      	b.n	8002882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	401a      	ands	r2, r3
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d104      	bne.n	80028e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	041a      	lsls	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe2e 	bl	8000578 <HAL_GPIO_EXTI_Callback>
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e12b      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fcaa 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	@ 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800298c:	f002 fea8 	bl	80056e0 <HAL_RCC_GetPCLK1Freq>
 8002990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a81      	ldr	r2, [pc, #516]	@ (8002b9c <HAL_I2C_Init+0x274>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d807      	bhi.n	80029ac <HAL_I2C_Init+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a80      	ldr	r2, [pc, #512]	@ (8002ba0 <HAL_I2C_Init+0x278>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e006      	b.n	80029ba <HAL_I2C_Init+0x92>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba4 <HAL_I2C_Init+0x27c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0e7      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a78      	ldr	r2, [pc, #480]	@ (8002ba8 <HAL_I2C_Init+0x280>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b9c <HAL_I2C_Init+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d802      	bhi.n	80029fc <HAL_I2C_Init+0xd4>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e009      	b.n	8002a10 <HAL_I2C_Init+0xe8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a69      	ldr	r2, [pc, #420]	@ (8002bac <HAL_I2C_Init+0x284>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	3301      	adds	r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	495c      	ldr	r1, [pc, #368]	@ (8002b9c <HAL_I2C_Init+0x274>)
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	d819      	bhi.n	8002a64 <HAL_I2C_Init+0x13c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e59      	subs	r1, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a44:	400b      	ands	r3, r1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_I2C_Init+0x138>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e59      	subs	r1, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5e:	e051      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e04f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <HAL_I2C_Init+0x168>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e012      	b.n	8002ab6 <HAL_I2C_Init+0x18e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x196>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_I2C_Init+0x1bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e58      	subs	r0, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6809      	ldr	r1, [r1, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6911      	ldr	r1, [r2, #16]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000186a0 	.word	0x000186a0
 8002ba0:	001e847f 	.word	0x001e847f
 8002ba4:	003d08ff 	.word	0x003d08ff
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bca:	f7fe ffb1 	bl	8001b30 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	f040 80d9 	bne.w	8002d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2319      	movs	r3, #25
 8002be4:	2201      	movs	r2, #1
 8002be6:	496d      	ldr	r1, [pc, #436]	@ (8002d9c <HAL_I2C_Mem_Write+0x1ec>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f001 ff70 	bl	8004ace <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Mem_Write+0x56>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0c5      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d007      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2221      	movs	r2, #33	@ 0x21
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002da0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6e:	88f8      	ldrh	r0, [r7, #6]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	8979      	ldrh	r1, [r7, #10]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 fc1a 	bl	80044b8 <I2C_RequestMemoryWrite>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d052      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e081      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f001 fff1 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Mem_Write+0x180>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1aa      	bne.n	8002c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f001 ffdd 	bl	8004cfc <I2C_WaitOnBTFFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e016      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dbe:	f7fe feb7 	bl	8001b30 <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	f040 8123 	bne.w	800301c <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dd6:	4b94      	ldr	r3, [pc, #592]	@ (8003028 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	4a93      	ldr	r2, [pc, #588]	@ (800302c <HAL_I2C_Mem_Read_DMA+0x288>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a1a      	lsrs	r2, r3, #8
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0f9      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d0db      	beq.n	8002df0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0eb      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2222      	movs	r2, #34	@ 0x22
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	@ 0x40
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	@ (8003030 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002eac:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hi2c->XferSize > 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8085 	beq.w	8002fc2 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8003034 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	@ (8003038 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002ec6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	2200      	movs	r2, #0
 8002ede:	649a      	str	r2, [r3, #72]	@ 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3310      	adds	r3, #16
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	f7ff f815 	bl	8001f2c <HAL_DMA_Start_IT>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

      if (dmaxferstatus == HAL_OK)
 8002f08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d144      	bne.n	8002f9a <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f10:	88f8      	ldrh	r0, [r7, #6]
 8002f12:	893a      	ldrh	r2, [r7, #8]
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2323      	movs	r3, #35	@ 0x23
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4603      	mov	r3, r0
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f001 fb5d 	bl	80045e0 <I2C_RequestMemoryRead>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e076      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e007      	b.n	8002f5a <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f86:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e03e      	b.n	8003018 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02d      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002fc2:	88f8      	ldrh	r0, [r7, #6]
 8002fc4:	893a      	ldrh	r2, [r7, #8]
 8002fc6:	8979      	ldrh	r1, [r7, #10]
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2323      	movs	r3, #35	@ 0x23
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f001 fb04 	bl	80045e0 <I2C_RequestMemoryRead>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01d      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003006:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	@ 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000000 	.word	0x20000000
 800302c:	14f8b589 	.word	0x14f8b589
 8003030:	ffff0000 	.word	0xffff0000
 8003034:	080047ad 	.word	0x080047ad
 8003038:	08004957 	.word	0x08004957

0800303c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800305c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b10      	cmp	r3, #16
 800306a:	d003      	beq.n	8003074 <HAL_I2C_EV_IRQHandler+0x38>
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	f040 80a6 	bne.w	80031c0 <HAL_I2C_EV_IRQHandler+0x184>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_I2C_EV_IRQHandler+0x6e>
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003094:	d003      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x62>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_EV_IRQHandler+0x66>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_EV_IRQHandler+0x68>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f000 8109 	beq.w	80032bc <HAL_I2C_EV_IRQHandler+0x280>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x90>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f001 fe8c 	bl	8004ddc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fc58 	bl	800397a <I2C_Master_SB>
 80030ca:	e078      	b.n	80031be <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_EV_IRQHandler+0xac>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fcd0 	bl	8003a86 <I2C_Master_ADD10>
 80030e6:	e06a      	b.n	80031be <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_I2C_EV_IRQHandler+0xc8>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fcec 	bl	8003ada <I2C_Master_ADDR>
 8003102:	e05c      	b.n	80031be <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02b      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x12a>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311c:	f000 80d0 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_EV_IRQHandler+0x10a>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_I2C_EV_IRQHandler+0x10a>
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f92c 	bl	800339c <I2C_MasterTransmit_TXE>
 8003144:	e03b      	b.n	80031be <HAL_I2C_EV_IRQHandler+0x182>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80b7 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80b1 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9b8 	bl	80034d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003164:	e0ac      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003174:	f000 80a4 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x162>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x162>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_I2C_EV_IRQHandler+0x162>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa83 	bl	80036a2 <I2C_MasterReceive_RXNE>
 800319c:	e00f      	b.n	80031be <HAL_I2C_EV_IRQHandler+0x182>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 808b 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8085 	beq.w	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 faf5 	bl	80037a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031bc:	e080      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
 80031be:	e07f      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x284>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d004      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x196>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e007      	b.n	80031e2 <HAL_I2C_EV_IRQHandler+0x1a6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d011      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0x1d4>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0x1d4>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_I2C_EV_IRQHandler+0x1ca>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003206:	69b9      	ldr	r1, [r7, #24]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 feb5 	bl	8003f78 <I2C_Slave_ADDR>
 800320e:	e05a      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x1f0>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x1f0>
    {
      I2C_Slave_STOPF(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fee9 	bl	8003ffc <I2C_Slave_STOPF>
 800322a:	e04c      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	2b21      	cmp	r3, #33	@ 0x21
 8003230:	d002      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x1fc>
 8003232:	7bbb      	ldrb	r3, [r7, #14]
 8003234:	2b29      	cmp	r3, #41	@ 0x29
 8003236:	d120      	bne.n	800327a <HAL_I2C_EV_IRQHandler+0x23e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x222>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x222>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_I2C_EV_IRQHandler+0x222>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fdd0 	bl	8003dfc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325c:	e032      	b.n	80032c4 <HAL_I2C_EV_IRQHandler+0x288>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02d      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x288>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326e:	2b00      	cmp	r3, #0
 8003270:	d028      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x288>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fdff 	bl	8003e76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003278:	e024      	b.n	80032c4 <HAL_I2C_EV_IRQHandler+0x288>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x264>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x264>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d103      	bne.n	80032a0 <HAL_I2C_EV_IRQHandler+0x264>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fe0d 	bl	8003eb8 <I2C_SlaveReceive_RXNE>
 800329e:	e012      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fe3d 	bl	8003f34 <I2C_SlaveReceive_BTF>
 80032ba:	e004      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
      return;
 80032bc:	bf00      	nop
 80032be:	e002      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_I2C_EV_IRQHandler+0x28a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d150      	bne.n	8003464 <I2C_MasterTransmit_TXE+0xc8>
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b21      	cmp	r3, #33	@ 0x21
 80033c6:	d14d      	bne.n	8003464 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d01d      	beq.n	800340a <I2C_MasterTransmit_TXE+0x6e>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d01a      	beq.n	800340a <I2C_MasterTransmit_TXE+0x6e>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033da:	d016      	beq.n	800340a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2211      	movs	r2, #17
 80033f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff62 	bl	80032cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003408:	e060      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003418:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003428:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d107      	bne.n	8003454 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff7d 	bl	800334c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003452:	e03b      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff35 	bl	80032cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003462:	e033      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b21      	cmp	r3, #33	@ 0x21
 8003468:	d005      	beq.n	8003476 <I2C_MasterTransmit_TXE+0xda>
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	d12d      	bne.n	80034cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b22      	cmp	r3, #34	@ 0x22
 8003474:	d12a      	bne.n	80034cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d108      	bne.n	8003492 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003490:	e01c      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d103      	bne.n	80034a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f898 	bl	80035d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80034a4:	e012      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034ca:	e7ff      	b.n	80034cc <I2C_MasterTransmit_TXE+0x130>
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b21      	cmp	r3, #33	@ 0x21
 80034ec:	d165      	bne.n	80035ba <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800351c:	e056      	b.n	80035cc <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d01d      	beq.n	8003560 <I2C_MasterTransmit_BTF+0x8c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b20      	cmp	r3, #32
 8003528:	d01a      	beq.n	8003560 <I2C_MasterTransmit_BTF+0x8c>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003530:	d016      	beq.n	8003560 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003540:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2211      	movs	r2, #17
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff feb7 	bl	80032cc <HAL_I2C_MasterTxCpltCallback>
}
 800355e:	e035      	b.n	80035cc <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800356e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b40      	cmp	r3, #64	@ 0x40
 8003598:	d107      	bne.n	80035aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fed2 	bl	800334c <HAL_I2C_MemTxCpltCallback>
}
 80035a8:	e010      	b.n	80035cc <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fe8a 	bl	80032cc <HAL_I2C_MasterTxCpltCallback>
}
 80035b8:	e008      	b.n	80035cc <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b40      	cmp	r3, #64	@ 0x40
 80035c4:	d102      	bne.n	80035cc <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f804 	bl	80035d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10b      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003602:	e048      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003608:	b29b      	uxth	r3, r3
 800360a:	121b      	asrs	r3, r3, #8
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800361e:	e03a      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10b      	bne.n	8003640 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362c:	b2da      	uxtb	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800363e:	e02a      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	2b02      	cmp	r3, #2
 8003646:	d126      	bne.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b22      	cmp	r3, #34	@ 0x22
 8003652:	d108      	bne.n	8003666 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	e017      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b21      	cmp	r3, #33	@ 0x21
 8003670:	d111      	bne.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b22      	cmp	r3, #34	@ 0x22
 80036b4:	d173      	bne.n	800379e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d920      	bls.n	8003706 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d154      	bne.n	800379e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003702:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003704:	e04b      	b.n	800379e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	2b02      	cmp	r3, #2
 800370c:	d047      	beq.n	800379e <I2C_MasterReceive_RXNE+0xfc>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d002      	beq.n	800371a <I2C_MasterReceive_RXNE+0x78>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d141      	bne.n	800379e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003728:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003738:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b40      	cmp	r3, #64	@ 0x40
 8003772:	d10a      	bne.n	800378a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fdec 	bl	8003360 <HAL_I2C_MemRxCpltCallback>
}
 8003788:	e009      	b.n	800379e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2212      	movs	r2, #18
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fda1 	bl	80032e0 <HAL_I2C_MasterRxCpltCallback>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d11b      	bne.n	80037f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037f4:	e0bd      	b.n	8003972 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d129      	bne.n	8003854 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800380e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00a      	beq.n	800382c <I2C_MasterReceive_BTF+0x86>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d007      	beq.n	800382c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003852:	e08e      	b.n	8003972 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d176      	bne.n	800394c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d002      	beq.n	800386a <I2C_MasterReceive_BTF+0xc4>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b10      	cmp	r3, #16
 8003868:	d108      	bne.n	800387c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e019      	b.n	80038b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d002      	beq.n	8003888 <I2C_MasterReceive_BTF+0xe2>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d108      	bne.n	800389a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e00a      	b.n	80038b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b10      	cmp	r3, #16
 800389e:	d007      	beq.n	80038b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800390a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b40      	cmp	r3, #64	@ 0x40
 800391e:	d10a      	bne.n	8003936 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fd16 	bl	8003360 <HAL_I2C_MemRxCpltCallback>
}
 8003934:	e01d      	b.n	8003972 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2212      	movs	r2, #18
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fccb 	bl	80032e0 <HAL_I2C_MasterRxCpltCallback>
}
 800394a:	e012      	b.n	8003972 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d117      	bne.n	80039be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039a8:	e067      	b.n	8003a7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
}
 80039bc:	e05d      	b.n	8003a7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039c6:	d133      	bne.n	8003a30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b21      	cmp	r3, #33	@ 0x21
 80039d2:	d109      	bne.n	80039e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	e008      	b.n	80039fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <I2C_Master_SB+0x92>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d108      	bne.n	8003a1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d032      	beq.n	8003a7a <I2C_Master_SB+0x100>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02d      	beq.n	8003a7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a2c:	605a      	str	r2, [r3, #4]
}
 8003a2e:	e024      	b.n	8003a7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10e      	bne.n	8003a56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	11db      	asrs	r3, r3, #7
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0306 	and.w	r3, r3, #6
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f063 030f 	orn	r3, r3, #15
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]
}
 8003a54:	e011      	b.n	8003a7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10d      	bne.n	8003a7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	11db      	asrs	r3, r3, #7
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 0306 	and.w	r3, r3, #6
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f063 030e 	orn	r3, r3, #14
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <I2C_Master_ADD10+0x24>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <I2C_Master_ADD10+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003acc:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b091      	sub	sp, #68	@ 0x44
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ae8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b22      	cmp	r3, #34	@ 0x22
 8003b02:	f040 8169 	bne.w	8003dd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <I2C_Master_ADDR+0x54>
 8003b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d10b      	bne.n	8003b2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b16:	2300      	movs	r3, #0
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	e160      	b.n	8003df0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11d      	bne.n	8003b72 <I2C_Master_ADDR+0x98>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b3e:	d118      	bne.n	8003b72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b70:	e13e      	b.n	8003df0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e115      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	f040 808a 	bne.w	8003cc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb6:	d137      	bne.n	8003c28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd6:	d113      	bne.n	8003c00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	e0e7      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e0d3      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d02e      	beq.n	8003c8c <I2C_Master_ADDR+0x1b2>
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d02b      	beq.n	8003c8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	2b12      	cmp	r3, #18
 8003c38:	d102      	bne.n	8003c40 <I2C_Master_ADDR+0x166>
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d125      	bne.n	8003c8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d00e      	beq.n	8003c64 <I2C_Master_ADDR+0x18a>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d00b      	beq.n	8003c64 <I2C_Master_ADDR+0x18a>
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d008      	beq.n	8003c64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e007      	b.n	8003c74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	e0a1      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e085      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d14d      	bne.n	8003d6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d016      	beq.n	8003d02 <I2C_Master_ADDR+0x228>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d013      	beq.n	8003d02 <I2C_Master_ADDR+0x228>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d010      	beq.n	8003d02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e007      	b.n	8003d12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d20:	d117      	bne.n	8003d52 <I2C_Master_ADDR+0x278>
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d28:	d00b      	beq.n	8003d42 <I2C_Master_ADDR+0x268>
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d008      	beq.n	8003d42 <I2C_Master_ADDR+0x268>
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d005      	beq.n	8003d42 <I2C_Master_ADDR+0x268>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d002      	beq.n	8003d42 <I2C_Master_ADDR+0x268>
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d107      	bne.n	8003d52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	e032      	b.n	8003dd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d88:	d117      	bne.n	8003dba <I2C_Master_ADDR+0x2e0>
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d90:	d00b      	beq.n	8003daa <I2C_Master_ADDR+0x2d0>
 8003d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d008      	beq.n	8003daa <I2C_Master_ADDR+0x2d0>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d005      	beq.n	8003daa <I2C_Master_ADDR+0x2d0>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d002      	beq.n	8003daa <I2C_Master_ADDR+0x2d0>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d107      	bne.n	8003dba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003db8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003dd6:	e00b      	b.n	8003df0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	e7ff      	b.n	8003df0 <I2C_Master_ADDR+0x316>
 8003df0:	bf00      	nop
 8003df2:	3744      	adds	r7, #68	@ 0x44
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02b      	beq.n	8003e6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d114      	bne.n	8003e6e <I2C_SlaveTransmit_TXE+0x72>
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b29      	cmp	r3, #41	@ 0x29
 8003e48:	d111      	bne.n	8003e6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2221      	movs	r2, #33	@ 0x21
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2228      	movs	r2, #40	@ 0x28
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fa43 	bl	80032f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d011      	beq.n	8003eac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02c      	beq.n	8003f2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d114      	bne.n	8003f2c <I2C_SlaveReceive_RXNE+0x74>
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f06:	d111      	bne.n	8003f2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2222      	movs	r2, #34	@ 0x22
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2228      	movs	r2, #40	@ 0x28
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff f9ee 	bl	8003308 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f92:	2b28      	cmp	r3, #40	@ 0x28
 8003f94:	d125      	bne.n	8003fe2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	81bb      	strh	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fd4:	89ba      	ldrh	r2, [r7, #12]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff f99e 	bl	800331c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fe0:	e008      	b.n	8003ff4 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f06f 0202 	mvn.w	r2, #2
 8003fea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800401a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004048:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004058:	d172      	bne.n	8004140 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b22      	cmp	r3, #34	@ 0x22
 800405e:	d002      	beq.n	8004066 <I2C_Slave_STOPF+0x6a>
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b2a      	cmp	r3, #42	@ 0x2a
 8004064:	d135      	bne.n	80040d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004098:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe f948 	bl	8002334 <HAL_DMA_GetState>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d049      	beq.n	800413e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <I2C_Slave_STOPF+0x258>)
 80040b0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd ff90 	bl	8001fdc <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03d      	beq.n	800413e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040d0:	e035      	b.n	800413e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe f912 	bl	8002334 <HAL_DMA_GetState>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d014      	beq.n	8004140 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	4a4e      	ldr	r2, [pc, #312]	@ (8004254 <I2C_Slave_STOPF+0x258>)
 800411c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd ff5a 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
 800413c:	e000      	b.n	8004140 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800413e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d03e      	beq.n	80041c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d112      	bne.n	800417e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d112      	bne.n	80041b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f843 	bl	800425c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041d6:	e039      	b.n	800424c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b2a      	cmp	r3, #42	@ 0x2a
 80041dc:	d109      	bne.n	80041f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2228      	movs	r2, #40	@ 0x28
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff f88b 	bl	8003308 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b28      	cmp	r3, #40	@ 0x28
 80041fc:	d111      	bne.n	8004222 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a15      	ldr	r2, [pc, #84]	@ (8004258 <I2C_Slave_STOPF+0x25c>)
 8004202:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff f88c 	bl	8003338 <HAL_I2C_ListenCpltCallback>
}
 8004220:	e014      	b.n	800424c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	2b22      	cmp	r3, #34	@ 0x22
 8004228:	d002      	beq.n	8004230 <I2C_Slave_STOPF+0x234>
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b22      	cmp	r3, #34	@ 0x22
 800422e:	d10d      	bne.n	800424c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff f85e 	bl	8003308 <HAL_I2C_SlaveRxCpltCallback>
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	080049d1 	.word	0x080049d1
 8004258:	ffff0000 	.word	0xffff0000

0800425c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b10      	cmp	r3, #16
 8004276:	d10a      	bne.n	800428e <I2C_ITError+0x32>
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b22      	cmp	r3, #34	@ 0x22
 800427c:	d107      	bne.n	800428e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800428c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004294:	2b28      	cmp	r3, #40	@ 0x28
 8004296:	d107      	bne.n	80042a8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2228      	movs	r2, #40	@ 0x28
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042a6:	e015      	b.n	80042d4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b6:	d006      	beq.n	80042c6 <I2C_ITError+0x6a>
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b60      	cmp	r3, #96	@ 0x60
 80042bc:	d003      	beq.n	80042c6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e2:	d162      	bne.n	80043aa <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d020      	beq.n	8004344 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004306:	4a6a      	ldr	r2, [pc, #424]	@ (80044b0 <I2C_ITError+0x254>)
 8004308:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fe64 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8089 	beq.w	800442e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800433e:	4610      	mov	r0, r2
 8004340:	4798      	blx	r3
 8004342:	e074      	b.n	800442e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	4a59      	ldr	r2, [pc, #356]	@ (80044b0 <I2C_ITError+0x254>)
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd fe43 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d068      	beq.n	800442e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	d10b      	bne.n	8004382 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
 80043a8:	e041      	b.n	800442e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b60      	cmp	r3, #96	@ 0x60
 80043b4:	d125      	bne.n	8004402 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d10b      	bne.n	80043ea <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe ffc4 	bl	8003388 <HAL_I2C_AbortCpltCallback>
 8004400:	e015      	b.n	800442e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d10b      	bne.n	8004428 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fe ffa3 	bl	8003374 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800446a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d113      	bne.n	80044a8 <I2C_ITError+0x24c>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b28      	cmp	r3, #40	@ 0x28
 8004484:	d110      	bne.n	80044a8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <I2C_ITError+0x258>)
 800448a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe ff48 	bl	8003338 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	080049d1 	.word	0x080049d1
 80044b4:	ffff0000 	.word	0xffff0000

080044b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 faed 	bl	8004ace <I2C_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e05f      	b.n	80045d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004522:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	492c      	ldr	r1, [pc, #176]	@ (80045dc <I2C_RequestMemoryWrite+0x124>)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fb26 	bl	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e04c      	b.n	80045d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004552:	6a39      	ldr	r1, [r7, #32]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb90 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b04      	cmp	r3, #4
 8004566:	d107      	bne.n	8004578 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e02b      	b.n	80045d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]
 800458c:	e021      	b.n	80045d2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b29b      	uxth	r3, r3
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	6a39      	ldr	r1, [r7, #32]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fb6a 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e005      	b.n	80045d4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	00010002 	.word	0x00010002

080045e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	4608      	mov	r0, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	461a      	mov	r2, r3
 80045ee:	4603      	mov	r3, r0
 80045f0:	817b      	strh	r3, [r7, #10]
 80045f2:	460b      	mov	r3, r1
 80045f4:	813b      	strh	r3, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2200      	movs	r2, #0
 8004622:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fa51 	bl	8004ace <I2C_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0a9      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464c:	897b      	ldrh	r3, [r7, #10]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800465a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	6a3a      	ldr	r2, [r7, #32]
 8004660:	4951      	ldr	r1, [pc, #324]	@ (80047a8 <I2C_RequestMemoryRead+0x1c8>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fa8a 	bl	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e096      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	6a39      	ldr	r1, [r7, #32]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 faf4 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2b04      	cmp	r3, #4
 800469e:	d107      	bne.n	80046b0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e075      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	e021      	b.n	800470a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c6:	893b      	ldrh	r3, [r7, #8]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d6:	6a39      	ldr	r1, [r7, #32]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 face 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e04f      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004700:	893b      	ldrh	r3, [r7, #8]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470c:	6a39      	ldr	r1, [r7, #32]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fab3 	bl	8004c7a <I2C_WaitOnTXEFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	2b04      	cmp	r3, #4
 8004720:	d107      	bne.n	8004732 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004730:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e034      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	2200      	movs	r2, #0
 800474e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9bb 	bl	8004ace <I2C_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e013      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004778:	897b      	ldrh	r3, [r7, #10]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	4906      	ldr	r1, [pc, #24]	@ (80047a8 <I2C_RequestMemoryRead+0x1c8>)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f9f4 	bl	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	00010002 	.word	0x00010002

080047ac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047c8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047de:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ec:	2200      	movs	r2, #0
 80047ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	2200      	movs	r2, #0
 80047fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004806:	2b21      	cmp	r3, #33	@ 0x21
 8004808:	d007      	beq.n	800481a <I2C_DMAXferCplt+0x6e>
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004810:	2b22      	cmp	r3, #34	@ 0x22
 8004812:	d131      	bne.n	8004878 <I2C_DMAXferCplt+0xcc>
 8004814:	7cbb      	ldrb	r3, [r7, #18]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d12e      	bne.n	8004878 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004828:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b29      	cmp	r3, #41	@ 0x29
 8004834:	d10a      	bne.n	800484c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2221      	movs	r2, #33	@ 0x21
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2228      	movs	r2, #40	@ 0x28
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004844:	6978      	ldr	r0, [r7, #20]
 8004846:	f7fe fd55 	bl	80032f4 <HAL_I2C_SlaveTxCpltCallback>
 800484a:	e00c      	b.n	8004866 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004850:	d109      	bne.n	8004866 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2222      	movs	r2, #34	@ 0x22
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2228      	movs	r2, #40	@ 0x28
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004860:	6978      	ldr	r0, [r7, #20]
 8004862:	f7fe fd51 	bl	8003308 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004874:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004876:	e06a      	b.n	800494e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d064      	beq.n	800494e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048b4:	d009      	beq.n	80048ca <I2C_DMAXferCplt+0x11e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d006      	beq.n	80048ca <I2C_DMAXferCplt+0x11e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80048c2:	d002      	beq.n	80048ca <I2C_DMAXferCplt+0x11e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d107      	bne.n	80048da <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004908:	6978      	ldr	r0, [r7, #20]
 800490a:	f7fe fd33 	bl	8003374 <HAL_I2C_ErrorCallback>
}
 800490e:	e01e      	b.n	800494e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b40      	cmp	r3, #64	@ 0x40
 8004922:	d10a      	bne.n	800493a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7fe fd14 	bl	8003360 <HAL_I2C_MemRxCpltCallback>
}
 8004938:	e009      	b.n	800494e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2212      	movs	r2, #18
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004948:	6978      	ldr	r0, [r7, #20]
 800494a:	f7fe fcc9 	bl	80032e0 <HAL_I2C_MasterRxCpltCallback>
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004970:	2200      	movs	r2, #0
 8004972:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fd fce3 	bl	8002350 <HAL_DMA_GetError>
 800498a:	4603      	mov	r3, r0
 800498c:	2b02      	cmp	r3, #2
 800498e:	d01b      	beq.n	80049c8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fe fcd6 	bl	8003374 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	2200      	movs	r2, #0
 80049f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	2200      	movs	r2, #0
 8004a04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a28:	2200      	movs	r2, #0
 8004a2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	2200      	movs	r2, #0
 8004a3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b60      	cmp	r3, #96	@ 0x60
 8004a56:	d10e      	bne.n	8004a76 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7fe fc8a 	bl	8003388 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a74:	e027      	b.n	8004ac6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a7c:	2b28      	cmp	r3, #40	@ 0x28
 8004a7e:	d117      	bne.n	8004ab0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2228      	movs	r2, #40	@ 0x28
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004aae:	e007      	b.n	8004ac0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7fe fc57 	bl	8003374 <HAL_I2C_ErrorCallback>
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ade:	e025      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae6:	d021      	beq.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fd f822 	bl	8001b30 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e023      	b.n	8004b74 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10d      	bne.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	e00c      	b.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d0b6      	beq.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8a:	e051      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d123      	bne.n	8004be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004baa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e046      	b.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bea:	d021      	beq.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bec:	f7fc ffa0 	bl	8001b30 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e020      	b.n	8004c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10c      	bne.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e00b      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d18d      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c86:	e02d      	b.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f878 	bl	8004d7e <I2C_IsAcknowledgeFailed>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e02d      	b.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9e:	d021      	beq.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fc ff46 	bl	8001b30 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b80      	cmp	r3, #128	@ 0x80
 8004cf0:	d1ca      	bne.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d08:	e02d      	b.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f837 	bl	8004d7e <I2C_IsAcknowledgeFailed>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e02d      	b.n	8004d76 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d20:	d021      	beq.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fc ff05 	bl	8001b30 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e007      	b.n	8004d76 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d1ca      	bne.n	8004d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d94:	d11b      	bne.n	8004dce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f043 0204 	orr.w	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dec:	d103      	bne.n	8004df6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004df4:	e007      	b.n	8004e06 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004dfe:	d102      	bne.n	8004e06 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2208      	movs	r2, #8
 8004e04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e25e      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d075      	beq.n	8004f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e32:	4b88      	ldr	r3, [pc, #544]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d00c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b85      	ldr	r3, [pc, #532]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d112      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b82      	ldr	r3, [pc, #520]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	4b7e      	ldr	r3, [pc, #504]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <HAL_RCC_OscConfig+0x108>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d157      	bne.n	8004f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e239      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x74>
 8004e7a:	4b76      	ldr	r3, [pc, #472]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a75      	ldr	r2, [pc, #468]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e01d      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x98>
 8004e92:	4b70      	ldr	r3, [pc, #448]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6f      	ldr	r2, [pc, #444]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6c      	ldr	r2, [pc, #432]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004eac:	4b69      	ldr	r3, [pc, #420]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a68      	ldr	r2, [pc, #416]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b66      	ldr	r3, [pc, #408]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a65      	ldr	r2, [pc, #404]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fc fe30 	bl	8001b30 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fc fe2c 	bl	8001b30 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	@ 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1fe      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0xc0>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fc fe1c 	bl	8001b30 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fc fe18 	bl	8001b30 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1ea      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	4b51      	ldr	r3, [pc, #324]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0xe8>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b44      	ldr	r3, [pc, #272]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	4b41      	ldr	r3, [pc, #260]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e1be      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4937      	ldr	r1, [pc, #220]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e03a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f84:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fc fdd1 	bl	8001b30 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fc fdcd 	bl	8001b30 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e19f      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b28      	ldr	r3, [pc, #160]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4925      	ldr	r1, [pc, #148]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fdb0 	bl	8001b30 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fc fdac 	bl	8001b30 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e17e      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b15      	ldr	r3, [pc, #84]	@ (800505c <HAL_RCC_OscConfig+0x248>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fd90 	bl	8001b30 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fc fd8c 	bl	8001b30 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e15e      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCC_OscConfig+0x240>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x200>
 8005032:	e01b      	b.n	800506c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <HAL_RCC_OscConfig+0x248>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fc fd79 	bl	8001b30 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	e00e      	b.n	8005060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005042:	f7fc fd75 	bl	8001b30 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d907      	bls.n	8005060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e147      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
 8005054:	40023800 	.word	0x40023800
 8005058:	42470000 	.word	0x42470000
 800505c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b88      	ldr	r3, [pc, #544]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ea      	bne.n	8005042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8097 	beq.w	80051a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b81      	ldr	r3, [pc, #516]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	4b7d      	ldr	r3, [pc, #500]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	4a7c      	ldr	r2, [pc, #496]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	@ 0x40
 800509a:	4b7a      	ldr	r3, [pc, #488]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	4b77      	ldr	r3, [pc, #476]	@ (8005288 <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b6:	4b74      	ldr	r3, [pc, #464]	@ (8005288 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a73      	ldr	r2, [pc, #460]	@ (8005288 <HAL_RCC_OscConfig+0x474>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fc fd35 	bl	8001b30 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fc fd31 	bl	8001b30 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e103      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005288 <HAL_RCC_OscConfig+0x474>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x2ea>
 80050f0:	4b64      	ldr	r3, [pc, #400]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	4a63      	ldr	r2, [pc, #396]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fc:	e01c      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b05      	cmp	r3, #5
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x30c>
 8005106:	4b5f      	ldr	r3, [pc, #380]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	4a5e      	ldr	r2, [pc, #376]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	4b5c      	ldr	r3, [pc, #368]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	4a5b      	ldr	r2, [pc, #364]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	@ 0x70
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 8005120:	4b58      	ldr	r3, [pc, #352]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a57      	ldr	r2, [pc, #348]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	@ 0x70
 800512c:	4b55      	ldr	r3, [pc, #340]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	4a54      	ldr	r2, [pc, #336]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fc fcf6 	bl	8001b30 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fc fcf2 	bl	8001b30 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0c2      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ee      	beq.n	8005148 <HAL_RCC_OscConfig+0x334>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fc fce0 	bl	8001b30 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fc fcdc 	bl	8001b30 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0ac      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	4b3e      	ldr	r3, [pc, #248]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ee      	bne.n	8005174 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4b39      	ldr	r3, [pc, #228]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	4a38      	ldr	r2, [pc, #224]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8098 	beq.w	80052e2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b2:	4b34      	ldr	r3, [pc, #208]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d05c      	beq.n	8005278 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d141      	bne.n	800524a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b31      	ldr	r3, [pc, #196]	@ (800528c <HAL_RCC_OscConfig+0x478>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fc fcb0 	bl	8001b30 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fc fcac 	bl	8001b30 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e07e      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	3b01      	subs	r3, #1
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	491b      	ldr	r1, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <HAL_RCC_OscConfig+0x478>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fc fc85 	bl	8001b30 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fc fc81 	bl	8001b30 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e053      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523c:	4b11      	ldr	r3, [pc, #68]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x416>
 8005248:	e04b      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b10      	ldr	r3, [pc, #64]	@ (800528c <HAL_RCC_OscConfig+0x478>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fc fc6e 	bl	8001b30 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fc fc6a 	bl	8001b30 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e03c      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <HAL_RCC_OscConfig+0x470>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x444>
 8005276:	e034      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e02f      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000
 800528c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005290:	4b16      	ldr	r3, [pc, #88]	@ (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d11c      	bne.n	80052de <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d115      	bne.n	80052de <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10d      	bne.n	80052de <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800

080052f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0cc      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005304:	4b68      	ldr	r3, [pc, #416]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d90c      	bls.n	800532c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b65      	ldr	r3, [pc, #404]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531a:	4b63      	ldr	r3, [pc, #396]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0b8      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d020      	beq.n	800537a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005344:	4b59      	ldr	r3, [pc, #356]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a58      	ldr	r2, [pc, #352]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800534e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a52      	ldr	r2, [pc, #328]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005368:	4b50      	ldr	r3, [pc, #320]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	494d      	ldr	r1, [pc, #308]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d044      	beq.n	8005410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d107      	bne.n	800539e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	4b47      	ldr	r3, [pc, #284]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d119      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07f      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ae:	4b3f      	ldr	r3, [pc, #252]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e06f      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053be:	4b3b      	ldr	r3, [pc, #236]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e067      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ce:	4b37      	ldr	r3, [pc, #220]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 0203 	bic.w	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4934      	ldr	r1, [pc, #208]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e0:	f7fc fba6 	bl	8001b30 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fc fba2 	bl	8001b30 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e04f      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 020c 	and.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	429a      	cmp	r2, r3
 800540e:	d1eb      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005410:	4b25      	ldr	r3, [pc, #148]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d20c      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b22      	ldr	r3, [pc, #136]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b20      	ldr	r3, [pc, #128]	@ (80054a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e032      	b.n	800549e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4916      	ldr	r1, [pc, #88]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	490e      	ldr	r1, [pc, #56]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005476:	f000 f821 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 800547a:	4602      	mov	r2, r0
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	490a      	ldr	r1, [pc, #40]	@ (80054b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	5ccb      	ldrb	r3, [r1, r3]
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	4a09      	ldr	r2, [pc, #36]	@ (80054b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fb06 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40023c00 	.word	0x40023c00
 80054ac:	40023800 	.word	0x40023800
 80054b0:	08008454 	.word	0x08008454
 80054b4:	20000000 	.word	0x20000000
 80054b8:	20000004 	.word	0x20000004

080054bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c0:	b094      	sub	sp, #80	@ 0x50
 80054c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c8:	2300      	movs	r3, #0
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054cc:	2300      	movs	r3, #0
 80054ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d4:	4b79      	ldr	r3, [pc, #484]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 030c 	and.w	r3, r3, #12
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d00d      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x40>
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	f200 80e1 	bhi.w	80056a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x34>
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d003      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ee:	e0db      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b73      	ldr	r3, [pc, #460]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80054f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80054f4:	e0db      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054f6:	4b73      	ldr	r3, [pc, #460]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80054f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054fa:	e0d8      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054fc:	4b6f      	ldr	r3, [pc, #444]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005504:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005506:	4b6d      	ldr	r3, [pc, #436]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d063      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005512:	4b6a      	ldr	r3, [pc, #424]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	2200      	movs	r2, #0
 800551a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800551c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005524:	633b      	str	r3, [r7, #48]	@ 0x30
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	@ 0x34
 800552a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800552e:	4622      	mov	r2, r4
 8005530:	462b      	mov	r3, r5
 8005532:	f04f 0000 	mov.w	r0, #0
 8005536:	f04f 0100 	mov.w	r1, #0
 800553a:	0159      	lsls	r1, r3, #5
 800553c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005540:	0150      	lsls	r0, r2, #5
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4621      	mov	r1, r4
 8005548:	1a51      	subs	r1, r2, r1
 800554a:	6139      	str	r1, [r7, #16]
 800554c:	4629      	mov	r1, r5
 800554e:	eb63 0301 	sbc.w	r3, r3, r1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005560:	4659      	mov	r1, fp
 8005562:	018b      	lsls	r3, r1, #6
 8005564:	4651      	mov	r1, sl
 8005566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800556a:	4651      	mov	r1, sl
 800556c:	018a      	lsls	r2, r1, #6
 800556e:	4651      	mov	r1, sl
 8005570:	ebb2 0801 	subs.w	r8, r2, r1
 8005574:	4659      	mov	r1, fp
 8005576:	eb63 0901 	sbc.w	r9, r3, r1
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800558a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800558e:	4690      	mov	r8, r2
 8005590:	4699      	mov	r9, r3
 8005592:	4623      	mov	r3, r4
 8005594:	eb18 0303 	adds.w	r3, r8, r3
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	462b      	mov	r3, r5
 800559c:	eb49 0303 	adc.w	r3, r9, r3
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ae:	4629      	mov	r1, r5
 80055b0:	024b      	lsls	r3, r1, #9
 80055b2:	4621      	mov	r1, r4
 80055b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055b8:	4621      	mov	r1, r4
 80055ba:	024a      	lsls	r2, r1, #9
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c2:	2200      	movs	r2, #0
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055cc:	f7fa fe50 	bl	8000270 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d8:	e058      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055da:	4b38      	ldr	r3, [pc, #224]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	2200      	movs	r2, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	4611      	mov	r1, r2
 80055e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	2300      	movs	r3, #0
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	f04f 0000 	mov.w	r0, #0
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	0159      	lsls	r1, r3, #5
 8005602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005606:	0150      	lsls	r0, r2, #5
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4641      	mov	r1, r8
 800560e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005612:	4649      	mov	r1, r9
 8005614:	eb63 0b01 	sbc.w	fp, r3, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800562c:	ebb2 040a 	subs.w	r4, r2, sl
 8005630:	eb63 050b 	sbc.w	r5, r3, fp
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	00eb      	lsls	r3, r5, #3
 800563e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005642:	00e2      	lsls	r2, r4, #3
 8005644:	4614      	mov	r4, r2
 8005646:	461d      	mov	r5, r3
 8005648:	4643      	mov	r3, r8
 800564a:	18e3      	adds	r3, r4, r3
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	464b      	mov	r3, r9
 8005650:	eb45 0303 	adc.w	r3, r5, r3
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005662:	4629      	mov	r1, r5
 8005664:	028b      	lsls	r3, r1, #10
 8005666:	4621      	mov	r1, r4
 8005668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800566c:	4621      	mov	r1, r4
 800566e:	028a      	lsls	r2, r1, #10
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005676:	2200      	movs	r2, #0
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	61fa      	str	r2, [r7, #28]
 800567c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005680:	f7fa fdf6 	bl	8000270 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4613      	mov	r3, r2
 800568a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800568c:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x200>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	3301      	adds	r3, #1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800569c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800569e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056a6:	e002      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3750      	adds	r7, #80	@ 0x50
 80056b4:	46bd      	mov	sp, r7
 80056b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ba:	bf00      	nop
 80056bc:	40023800 	.word	0x40023800
 80056c0:	00f42400 	.word	0x00f42400
 80056c4:	007a1200 	.word	0x007a1200

080056c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056cc:	4b03      	ldr	r3, [pc, #12]	@ (80056dc <HAL_RCC_GetHCLKFreq+0x14>)
 80056ce:	681b      	ldr	r3, [r3, #0]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000000 	.word	0x20000000

080056e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056e4:	f7ff fff0 	bl	80056c8 <HAL_RCC_GetHCLKFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0a9b      	lsrs	r3, r3, #10
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	4903      	ldr	r1, [pc, #12]	@ (8005704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40023800 	.word	0x40023800
 8005704:	08008464 	.word	0x08008464

08005708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800570c:	f7ff ffdc 	bl	80056c8 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0b5b      	lsrs	r3, r3, #13
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	@ (800572c <HAL_RCC_GetPCLK2Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	08008464 	.word	0x08008464

08005730 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d035      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005758:	4b62      	ldr	r3, [pc, #392]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800575e:	f7fc f9e7 	bl	8001b30 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005766:	f7fc f9e3 	bl	8001b30 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0b0      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005778:	4b5b      	ldr	r3, [pc, #364]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	019a      	lsls	r2, r3, #6
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	071b      	lsls	r3, r3, #28
 8005790:	4955      	ldr	r1, [pc, #340]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005798:	4b52      	ldr	r3, [pc, #328]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800579e:	f7fc f9c7 	bl	8001b30 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057a6:	f7fc f9c3 	bl	8001b30 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e090      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057b8:	4b4b      	ldr	r3, [pc, #300]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8083 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	4b44      	ldr	r3, [pc, #272]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	4a43      	ldr	r2, [pc, #268]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057e2:	4b41      	ldr	r3, [pc, #260]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ee:	4b3f      	ldr	r3, [pc, #252]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a3e      	ldr	r2, [pc, #248]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057fa:	f7fc f999 	bl	8001b30 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005802:	f7fc f995 	bl	8001b30 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e062      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005820:	4b31      	ldr	r3, [pc, #196]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005828:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d02f      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d028      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800583e:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005846:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005848:	4b29      	ldr	r3, [pc, #164]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800584e:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005854:	4a24      	ldr	r2, [pc, #144]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800585a:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b01      	cmp	r3, #1
 8005864:	d114      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005866:	f7fc f963 	bl	8001b30 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586c:	e00a      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fc f95f 	bl	8001b30 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e02a      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005884:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ee      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800589c:	d10d      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800589e:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80058ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b2:	490d      	ldr	r1, [pc, #52]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058ba:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d2:	4905      	ldr	r1, [pc, #20]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	42470068 	.word	0x42470068
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000
 80058f0:	42470e40 	.word	0x42470e40

080058f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e083      	b.n	8005a0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7f5b      	ldrb	r3, [r3, #29]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb fd48 	bl	80013ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	22ca      	movs	r2, #202	@ 0xca
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2253      	movs	r2, #83	@ 0x53
 8005930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f897 	bl	8005a66 <RTC_EnterInitMode>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	22ff      	movs	r2, #255	@ 0xff
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2204      	movs	r2, #4
 800594a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e05e      	b.n	8005a0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800595e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005962:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6899      	ldr	r1, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68d2      	ldr	r2, [r2, #12]
 800598a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6919      	ldr	r1, [r3, #16]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	041a      	lsls	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10e      	bne.n	80059dc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f829 	bl	8005a16 <HAL_RTC_WaitForSynchro>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	22ff      	movs	r2, #255	@ 0xff
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2204      	movs	r2, #4
 80059d6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e018      	b.n	8005a0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a32:	f7fc f87d 	bl	8001b30 <HAL_GetTick>
 8005a36:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a38:	e009      	b.n	8005a4e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a3a:	f7fc f879 	bl	8001b30 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a48:	d901      	bls.n	8005a4e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e007      	b.n	8005a5e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ee      	beq.n	8005a3a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d119      	bne.n	8005ab4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a8a:	f7fc f851 	bl	8001b30 <HAL_GetTick>
 8005a8e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a90:	e009      	b.n	8005aa6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a92:	f7fc f84d 	bl	8001b30 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aa0:	d901      	bls.n	8005aa6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e007      	b.n	8005ab6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0ee      	beq.n	8005a92 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e01d      	b.n	8005b0c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fb fc77 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 fb55 	bl	80061ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e01d      	b.n	8005b62 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f815 	bl	8005b6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f000 fb2a 	bl	80061ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fdf4 	bl	8006780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	@ (8005bf4 <HAL_TIM_OC_Start+0x74>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_OC_Start+0x2c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a14      	ldr	r2, [pc, #80]	@ (8005bf8 <HAL_TIM_OC_Start+0x78>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_OC_Start+0x30>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_TIM_OC_Start+0x32>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d007      	beq.n	8005be8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	d841      	bhi.n	8005c90 <HAL_TIM_OC_Start_IT+0x94>
 8005c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <HAL_TIM_OC_Start_IT+0x18>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005c91 	.word	0x08005c91
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005c91 	.word	0x08005c91
 8005c24:	08005c5b 	.word	0x08005c5b
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005c91 	.word	0x08005c91
 8005c30:	08005c91 	.word	0x08005c91
 8005c34:	08005c6d 	.word	0x08005c6d
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	08005c7f 	.word	0x08005c7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0202 	orr.w	r2, r2, #2
 8005c56:	60da      	str	r2, [r3, #12]
      break;
 8005c58:	e01b      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0204 	orr.w	r2, r2, #4
 8005c68:	60da      	str	r2, [r3, #12]
      break;
 8005c6a:	e012      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	60da      	str	r2, [r3, #12]
      break;
 8005c7c:	e009      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0210 	orr.w	r2, r2, #16
 8005c8c:	60da      	str	r2, [r3, #12]
      break;
 8005c8e:	e000      	b.n	8005c92 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005c90:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2201      	movs	r2, #1
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fd70 	bl	8006780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <HAL_TIM_OC_Start_IT+0x100>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_OC_Start_IT+0xb8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a14      	ldr	r2, [pc, #80]	@ (8005d00 <HAL_TIM_OC_Start_IT+0x104>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_OC_Start_IT+0xbc>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_TIM_OC_Start_IT+0xbe>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b06      	cmp	r3, #6
 8005cde:	d007      	beq.n	8005cf0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40010400 	.word	0x40010400

08005d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d122      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d11b      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0202 	mvn.w	r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa12 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fa fdae 	bl	80008b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fa15 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0204 	mvn.w	r2, #4
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9e8 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fa fd84 	bl	80008b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f9eb 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0208 	mvn.w	r2, #8
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f9be 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fa fd5a 	bl	80008b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f9c1 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0210 	mvn.w	r2, #16
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2208      	movs	r2, #8
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f994 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fa fd30 	bl	80008b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f997 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d10e      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d107      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0201 	mvn.w	r2, #1
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f96a 	bl	800615c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e92:	2b80      	cmp	r3, #128	@ 0x80
 8005e94:	d10e      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea0:	2b80      	cmp	r3, #128	@ 0x80
 8005ea2:	d107      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fd64 	bl	800697c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b40      	cmp	r3, #64	@ 0x40
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f95c 	bl	8006198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d10e      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0220 	mvn.w	r2, #32
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fd2e 	bl	8006968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_OC_ConfigChannel+0x1a>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e04e      	b.n	8005fcc <HAL_TIM_OC_ConfigChannel+0xb8>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (Channel)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	d839      	bhi.n	8005fb8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005f44:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <HAL_TIM_OC_ConfigChannel+0x38>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08005fb9 	.word	0x08005fb9
 8005f54:	08005fb9 	.word	0x08005fb9
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	08005fb9 	.word	0x08005fb9
 8005f6c:	08005f9d 	.word	0x08005f9d
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fb9 	.word	0x08005fb9
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fab 	.word	0x08005fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f9b0 	bl	80062ec <TIM_OC1_SetConfig>
      break;
 8005f8c:	e015      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fa19 	bl	80063cc <TIM_OC2_SetConfig>
      break;
 8005f9a:	e00e      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fa88 	bl	80064b8 <TIM_OC3_SetConfig>
      break;
 8005fa8:	e007      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 faf5 	bl	80065a0 <TIM_OC4_SetConfig>
      break;
 8005fb6:	e000      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005fb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_ConfigClockSource+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0b3      	b.n	8006154 <HAL_TIM_ConfigClockSource+0x180>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800600a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006024:	d03e      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0xd0>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602a:	f200 8087 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x168>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006032:	f000 8085 	beq.w	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800603a:	d87f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 800603c:	2b70      	cmp	r3, #112	@ 0x70
 800603e:	d01a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xa2>
 8006040:	2b70      	cmp	r3, #112	@ 0x70
 8006042:	d87b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 8006044:	2b60      	cmp	r3, #96	@ 0x60
 8006046:	d050      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x116>
 8006048:	2b60      	cmp	r3, #96	@ 0x60
 800604a:	d877      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 800604c:	2b50      	cmp	r3, #80	@ 0x50
 800604e:	d03c      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xf6>
 8006050:	2b50      	cmp	r3, #80	@ 0x50
 8006052:	d873      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 8006054:	2b40      	cmp	r3, #64	@ 0x40
 8006056:	d058      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x136>
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	d86f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 800605c:	2b30      	cmp	r3, #48	@ 0x30
 800605e:	d064      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x156>
 8006060:	2b30      	cmp	r3, #48	@ 0x30
 8006062:	d86b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d060      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x156>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d867      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x168>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x156>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d05a      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006074:	e062      	b.n	800613c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6899      	ldr	r1, [r3, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f000 fb5b 	bl	8006740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	609a      	str	r2, [r3, #8]
      break;
 80060a2:	e04e      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 fb44 	bl	8006740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060c6:	609a      	str	r2, [r3, #8]
      break;
 80060c8:	e03b      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fab8 	bl	800664c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2150      	movs	r1, #80	@ 0x50
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fb11 	bl	800670a <TIM_ITRx_SetConfig>
      break;
 80060e8:	e02b      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fad7 	bl	80066aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2160      	movs	r1, #96	@ 0x60
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb01 	bl	800670a <TIM_ITRx_SetConfig>
      break;
 8006108:	e01b      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fa98 	bl	800664c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2140      	movs	r1, #64	@ 0x40
 8006122:	4618      	mov	r0, r3
 8006124:	f000 faf1 	bl	800670a <TIM_ITRx_SetConfig>
      break;
 8006128:	e00b      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 fae8 	bl	800670a <TIM_ITRx_SetConfig>
      break;
 800613a:	e002      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a40      	ldr	r2, [pc, #256]	@ (80062c0 <TIM_Base_SetConfig+0x114>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	d00f      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3d      	ldr	r2, [pc, #244]	@ (80062c4 <TIM_Base_SetConfig+0x118>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a3c      	ldr	r2, [pc, #240]	@ (80062c8 <TIM_Base_SetConfig+0x11c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a3b      	ldr	r2, [pc, #236]	@ (80062cc <TIM_Base_SetConfig+0x120>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3a      	ldr	r2, [pc, #232]	@ (80062d0 <TIM_Base_SetConfig+0x124>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a2f      	ldr	r2, [pc, #188]	@ (80062c0 <TIM_Base_SetConfig+0x114>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d02b      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d027      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2c      	ldr	r2, [pc, #176]	@ (80062c4 <TIM_Base_SetConfig+0x118>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d023      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2b      	ldr	r2, [pc, #172]	@ (80062c8 <TIM_Base_SetConfig+0x11c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01f      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2a      	ldr	r2, [pc, #168]	@ (80062cc <TIM_Base_SetConfig+0x120>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01b      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a29      	ldr	r2, [pc, #164]	@ (80062d0 <TIM_Base_SetConfig+0x124>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d017      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a28      	ldr	r2, [pc, #160]	@ (80062d4 <TIM_Base_SetConfig+0x128>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a27      	ldr	r2, [pc, #156]	@ (80062d8 <TIM_Base_SetConfig+0x12c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00f      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a26      	ldr	r2, [pc, #152]	@ (80062dc <TIM_Base_SetConfig+0x130>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a25      	ldr	r2, [pc, #148]	@ (80062e0 <TIM_Base_SetConfig+0x134>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a24      	ldr	r2, [pc, #144]	@ (80062e4 <TIM_Base_SetConfig+0x138>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a23      	ldr	r2, [pc, #140]	@ (80062e8 <TIM_Base_SetConfig+0x13c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d108      	bne.n	8006270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0a      	ldr	r2, [pc, #40]	@ (80062c0 <TIM_Base_SetConfig+0x114>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0xf8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <TIM_Base_SetConfig+0x124>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	615a      	str	r2, [r3, #20]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800
 80062e0:	40001800 	.word	0x40001800
 80062e4:	40001c00 	.word	0x40001c00
 80062e8:	40002000 	.word	0x40002000

080062ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 0302 	bic.w	r3, r3, #2
 8006334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a20      	ldr	r2, [pc, #128]	@ (80063c4 <TIM_OC1_SetConfig+0xd8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC1_SetConfig+0x64>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1f      	ldr	r2, [pc, #124]	@ (80063c8 <TIM_OC1_SetConfig+0xdc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10c      	bne.n	800636a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0308 	bic.w	r3, r3, #8
 8006356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a15      	ldr	r2, [pc, #84]	@ (80063c4 <TIM_OC1_SetConfig+0xd8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_OC1_SetConfig+0x8e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <TIM_OC1_SetConfig+0xdc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d111      	bne.n	800639e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	621a      	str	r2, [r3, #32]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400

080063cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f023 0210 	bic.w	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0320 	bic.w	r3, r3, #32
 8006416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a22      	ldr	r2, [pc, #136]	@ (80064b0 <TIM_OC2_SetConfig+0xe4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC2_SetConfig+0x68>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a21      	ldr	r2, [pc, #132]	@ (80064b4 <TIM_OC2_SetConfig+0xe8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10d      	bne.n	8006450 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800644e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <TIM_OC2_SetConfig+0xe4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC2_SetConfig+0x94>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <TIM_OC2_SetConfig+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d113      	bne.n	8006488 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800646e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400

080064b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a21      	ldr	r2, [pc, #132]	@ (8006598 <TIM_OC3_SetConfig+0xe0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC3_SetConfig+0x66>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a20      	ldr	r2, [pc, #128]	@ (800659c <TIM_OC3_SetConfig+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d10d      	bne.n	800653a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a16      	ldr	r2, [pc, #88]	@ (8006598 <TIM_OC3_SetConfig+0xe0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC3_SetConfig+0x92>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a15      	ldr	r2, [pc, #84]	@ (800659c <TIM_OC3_SetConfig+0xe4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d113      	bne.n	8006572 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400

080065a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	031b      	lsls	r3, r3, #12
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a12      	ldr	r2, [pc, #72]	@ (8006644 <TIM_OC4_SetConfig+0xa4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC4_SetConfig+0x68>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <TIM_OC4_SetConfig+0xa8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d109      	bne.n	800661c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800660e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	019b      	lsls	r3, r3, #6
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40010000 	.word	0x40010000
 8006648:	40010400 	.word	0x40010400

0800664c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0201 	bic.w	r2, r3, #1
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 030a 	bic.w	r3, r3, #10
 8006688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b087      	sub	sp, #28
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0210 	bic.w	r2, r3, #16
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	f043 0307 	orr.w	r3, r3, #7
 800672c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	021a      	lsls	r2, r3, #8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	431a      	orrs	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	609a      	str	r2, [r3, #8]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2201      	movs	r2, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1a      	ldr	r2, [r3, #32]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	43db      	mvns	r3, r3
 80067a2:	401a      	ands	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1a      	ldr	r2, [r3, #32]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	fa01 f303 	lsl.w	r3, r1, r3
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e05a      	b.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	@ (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006830:	d01d      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1d      	ldr	r2, [pc, #116]	@ (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1a      	ldr	r2, [pc, #104]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a18      	ldr	r2, [pc, #96]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10c      	bne.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40010400 	.word	0x40010400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40001800 	.word	0x40001800

080068c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e03d      	b.n	800695c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e03f      	b.n	8006a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fa fdfa 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	@ 0x24
 80069c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb6b 	bl	80070b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d153      	bne.n	8006aee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_UART_Transmit_DMA+0x26>
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e04c      	b.n	8006af0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_UART_Transmit_DMA+0x38>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e045      	b.n	8006af0 <HAL_UART_Transmit_DMA+0xc4>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pTxBuffPtr = pData;
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2221      	movs	r2, #33	@ 0x21
 8006a88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	4a19      	ldr	r2, [pc, #100]	@ (8006af8 <HAL_UART_Transmit_DMA+0xcc>)
 8006a92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <HAL_UART_Transmit_DMA+0xd0>)
 8006a9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <HAL_UART_Transmit_DMA+0xd4>)
 8006aa2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	f7fb fa32 	bl	8001f2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ad0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ae8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e000      	b.n	8006af0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006aee:	2302      	movs	r3, #2
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08006d41 	.word	0x08006d41
 8006afc:	08006d93 	.word	0x08006d93
 8006b00:	08006daf 	.word	0x08006daf

08006b04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_UART_IRQHandler+0x52>
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa2d 	bl	8006fae <UART_Receive_IT>
      return;
 8006b54:	e0d0      	b.n	8006cf8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80b0 	beq.w	8006cbe <HAL_UART_IRQHandler+0x1ba>
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <HAL_UART_IRQHandler+0x70>
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a5 	beq.w	8006cbe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_UART_IRQHandler+0x90>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_UART_IRQHandler+0xb0>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_UART_IRQHandler+0xd0>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bcc:	f043 0204 	orr.w	r2, r3, #4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <HAL_UART_IRQHandler+0xfa>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <HAL_UART_IRQHandler+0xee>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	f043 0208 	orr.w	r2, r3, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d077      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_UART_IRQHandler+0x11c>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9c7 	bl	8006fae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2a:	2b40      	cmp	r3, #64	@ 0x40
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <HAL_UART_IRQHandler+0x144>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d031      	beq.n	8006cac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f910 	bl	8006e6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d123      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695a      	ldr	r2, [r3, #20]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c6a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d013      	beq.n	8006c9c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c78:	4a21      	ldr	r2, [pc, #132]	@ (8006d00 <HAL_UART_IRQHandler+0x1fc>)
 8006c7a:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fb f9ab 	bl	8001fdc <HAL_DMA_Abort_IT>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d016      	beq.n	8006cba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c96:	4610      	mov	r0, r2
 8006c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	e00e      	b.n	8006cba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f845 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca2:	e00a      	b.n	8006cba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f841 	bl	8006d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006caa:	e006      	b.n	8006cba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f83d 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8006cb8:	e01d      	b.n	8006cf6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cba:	bf00      	nop
    return;
 8006cbc:	e01b      	b.n	8006cf6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_UART_IRQHandler+0x1d6>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f8fd 	bl	8006ed2 <UART_Transmit_IT>
    return;
 8006cd8:	e00e      	b.n	8006cf8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1f4>
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f945 	bl	8006f7e <UART_EndTransmit_IT>
    return;
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006cf6:	bf00      	nop
  }
}
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	08006eab 	.word	0x08006eab

08006d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d113      	bne.n	8006d84 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d70:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d80:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d82:	e002      	b.n	8006d8a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff ffbd 	bl	8006d04 <HAL_UART_TxCpltCallback>
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff ffb9 	bl	8006d18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dca:	2b80      	cmp	r3, #128	@ 0x80
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b21      	cmp	r3, #33	@ 0x21
 8006de0:	d108      	bne.n	8006df4 <UART_DMAError+0x46>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006dee:	68b8      	ldr	r0, [r7, #8]
 8006df0:	f000 f827 	bl	8006e42 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b22      	cmp	r3, #34	@ 0x22
 8006e14:	d108      	bne.n	8006e28 <UART_DMAError+0x7a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f000 f823 	bl	8006e6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2c:	f043 0210 	orr.w	r2, r3, #16
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	63da      	str	r2, [r3, #60]	@ 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e34:	68b8      	ldr	r0, [r7, #8]
 8006e36:	f7ff ff79 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006e58:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8006e84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff ff31 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b21      	cmp	r3, #33	@ 0x21
 8006ee4:	d144      	bne.n	8006f70 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eee:	d11a      	bne.n	8006f26 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f04:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]
 8006f18:	e00e      	b.n	8006f38 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]
 8006f24:	e008      	b.n	8006f38 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6211      	str	r1, [r2, #32]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4619      	mov	r1, r3
 8006f46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff feb0 	bl	8006d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b22      	cmp	r3, #34	@ 0x22
 8006fc0:	d171      	bne.n	80070a6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fca:	d123      	bne.n	8007014 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10e      	bne.n	8006ff8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	1c9a      	adds	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ff6:	e029      	b.n	800704c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	b2db      	uxtb	r3, r3
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	629a      	str	r2, [r3, #40]	@ 0x28
 8007012:	e01b      	b.n	800704c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6858      	ldr	r0, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6291      	str	r1, [r2, #40]	@ 0x28
 800702c:	b2c2      	uxtb	r2, r0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e00c      	b.n	800704c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	1c58      	adds	r0, r3, #1
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	6288      	str	r0, [r1, #40]	@ 0x28
 8007044:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29b      	uxth	r3, r3
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4619      	mov	r1, r3
 800705a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800705c:	2b00      	cmp	r3, #0
 800705e:	d120      	bne.n	80070a2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0220 	bic.w	r2, r2, #32
 800706e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800707e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695a      	ldr	r2, [r3, #20]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7f9 fc77 	bl	800098c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e002      	b.n	80070a8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b4:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070ce:	68d9      	ldr	r1, [r3, #12]
 80070d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	ea40 0301 	orr.w	r3, r0, r1
 80070da:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80070fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800710a:	f021 010c 	bic.w	r1, r1, #12
 800710e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8007118:	430b      	orrs	r3, r1
 800711a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800711c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007128:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800712c:	6999      	ldr	r1, [r3, #24]
 800712e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	ea40 0301 	orr.w	r3, r0, r1
 8007138:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007144:	f040 824a 	bne.w	80075dc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007148:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b96      	ldr	r3, [pc, #600]	@ (80073a8 <UART_SetConfig+0x2f8>)
 8007150:	429a      	cmp	r2, r3
 8007152:	d006      	beq.n	8007162 <UART_SetConfig+0xb2>
 8007154:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b94      	ldr	r3, [pc, #592]	@ (80073ac <UART_SetConfig+0x2fc>)
 800715c:	429a      	cmp	r2, r3
 800715e:	f040 8129 	bne.w	80073b4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007162:	f7fe fad1 	bl	8005708 <HAL_RCC_GetPCLK2Freq>
 8007166:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800716a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800716e:	2200      	movs	r2, #0
 8007170:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8007174:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8007178:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	1891      	adds	r1, r2, r2
 8007182:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007186:	415b      	adcs	r3, r3
 8007188:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800718c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8007190:	4621      	mov	r1, r4
 8007192:	1851      	adds	r1, r2, r1
 8007194:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8007198:	4629      	mov	r1, r5
 800719a:	414b      	adcs	r3, r1
 800719c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80071ac:	4649      	mov	r1, r9
 80071ae:	00cb      	lsls	r3, r1, #3
 80071b0:	4641      	mov	r1, r8
 80071b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b6:	4641      	mov	r1, r8
 80071b8:	00ca      	lsls	r2, r1, #3
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	4622      	mov	r2, r4
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80071c8:	462b      	mov	r3, r5
 80071ca:	460a      	mov	r2, r1
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80071d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80071e0:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80071e4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80071e8:	460b      	mov	r3, r1
 80071ea:	18db      	adds	r3, r3, r3
 80071ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071f0:	4613      	mov	r3, r2
 80071f2:	eb42 0303 	adc.w	r3, r2, r3
 80071f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071fa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80071fe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8007202:	f7f9 f835 	bl	8000270 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4b69      	ldr	r3, [pc, #420]	@ (80073b0 <UART_SetConfig+0x300>)
 800720c:	fba3 2302 	umull	r2, r3, r3, r2
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	011c      	lsls	r4, r3, #4
 8007214:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800721e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8007222:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	1891      	adds	r1, r2, r2
 800722c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8007230:	415b      	adcs	r3, r3
 8007232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007236:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800723a:	4641      	mov	r1, r8
 800723c:	1851      	adds	r1, r2, r1
 800723e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8007242:	4649      	mov	r1, r9
 8007244:	414b      	adcs	r3, r1
 8007246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8007256:	4659      	mov	r1, fp
 8007258:	00cb      	lsls	r3, r1, #3
 800725a:	4651      	mov	r1, sl
 800725c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007260:	4651      	mov	r1, sl
 8007262:	00ca      	lsls	r2, r1, #3
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	4603      	mov	r3, r0
 800726a:	4642      	mov	r2, r8
 800726c:	189b      	adds	r3, r3, r2
 800726e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007272:	464b      	mov	r3, r9
 8007274:	460a      	mov	r2, r1
 8007276:	eb42 0303 	adc.w	r3, r2, r3
 800727a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800727e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800728a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800728e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8007292:	460b      	mov	r3, r1
 8007294:	18db      	adds	r3, r3, r3
 8007296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800729a:	4613      	mov	r3, r2
 800729c:	eb42 0303 	adc.w	r3, r2, r3
 80072a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80072a8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80072ac:	f7f8 ffe0 	bl	8000270 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	4b3e      	ldr	r3, [pc, #248]	@ (80073b0 <UART_SetConfig+0x300>)
 80072b8:	fba3 2301 	umull	r2, r3, r3, r1
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	2264      	movs	r2, #100	@ 0x64
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	1acb      	subs	r3, r1, r3
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072cc:	4b38      	ldr	r3, [pc, #224]	@ (80073b0 <UART_SetConfig+0x300>)
 80072ce:	fba3 2302 	umull	r2, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072da:	441c      	add	r4, r3
 80072dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80072e6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80072ea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80072ee:	4642      	mov	r2, r8
 80072f0:	464b      	mov	r3, r9
 80072f2:	1891      	adds	r1, r2, r2
 80072f4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80072f8:	415b      	adcs	r3, r3
 80072fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8007302:	4641      	mov	r1, r8
 8007304:	1851      	adds	r1, r2, r1
 8007306:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800730a:	4649      	mov	r1, r9
 800730c:	414b      	adcs	r3, r1
 800730e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800731e:	4659      	mov	r1, fp
 8007320:	00cb      	lsls	r3, r1, #3
 8007322:	4651      	mov	r1, sl
 8007324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007328:	4651      	mov	r1, sl
 800732a:	00ca      	lsls	r2, r1, #3
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	4603      	mov	r3, r0
 8007332:	4642      	mov	r2, r8
 8007334:	189b      	adds	r3, r3, r2
 8007336:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800733a:	464b      	mov	r3, r9
 800733c:	460a      	mov	r2, r1
 800733e:	eb42 0303 	adc.w	r3, r2, r3
 8007342:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8007346:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8007352:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8007356:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800735a:	460b      	mov	r3, r1
 800735c:	18db      	adds	r3, r3, r3
 800735e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007362:	4613      	mov	r3, r2
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800736c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8007370:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8007374:	f7f8 ff7c 	bl	8000270 <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4b0c      	ldr	r3, [pc, #48]	@ (80073b0 <UART_SetConfig+0x300>)
 800737e:	fba3 1302 	umull	r1, r3, r3, r2
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	2164      	movs	r1, #100	@ 0x64
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	3332      	adds	r3, #50	@ 0x32
 8007390:	4a07      	ldr	r2, [pc, #28]	@ (80073b0 <UART_SetConfig+0x300>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f003 0207 	and.w	r2, r3, #7
 800739c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4422      	add	r2, r4
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	e34a      	b.n	8007a3e <UART_SetConfig+0x98e>
 80073a8:	40011000 	.word	0x40011000
 80073ac:	40011400 	.word	0x40011400
 80073b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073b4:	f7fe f994 	bl	80056e0 <HAL_RCC_GetPCLK1Freq>
 80073b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80073c6:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80073ca:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	1891      	adds	r1, r2, r2
 80073d4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80073d8:	415b      	adcs	r3, r3
 80073da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80073e2:	4621      	mov	r1, r4
 80073e4:	eb12 0a01 	adds.w	sl, r2, r1
 80073e8:	4629      	mov	r1, r5
 80073ea:	eb43 0b01 	adc.w	fp, r3, r1
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007402:	4692      	mov	sl, r2
 8007404:	469b      	mov	fp, r3
 8007406:	4623      	mov	r3, r4
 8007408:	eb1a 0303 	adds.w	r3, sl, r3
 800740c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8007410:	462b      	mov	r3, r5
 8007412:	eb4b 0303 	adc.w	r3, fp, r3
 8007416:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800741a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8007426:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800742a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800742e:	460b      	mov	r3, r1
 8007430:	18db      	adds	r3, r3, r3
 8007432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007436:	4613      	mov	r3, r2
 8007438:	eb42 0303 	adc.w	r3, r2, r3
 800743c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007440:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007444:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8007448:	f7f8 ff12 	bl	8000270 <__aeabi_uldivmod>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4b61      	ldr	r3, [pc, #388]	@ (80075d8 <UART_SetConfig+0x528>)
 8007452:	fba3 2302 	umull	r2, r3, r3, r2
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	011c      	lsls	r4, r3, #4
 800745a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800745e:	2200      	movs	r2, #0
 8007460:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8007464:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8007468:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 800746c:	4642      	mov	r2, r8
 800746e:	464b      	mov	r3, r9
 8007470:	1891      	adds	r1, r2, r2
 8007472:	67b9      	str	r1, [r7, #120]	@ 0x78
 8007474:	415b      	adcs	r3, r3
 8007476:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007478:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800747c:	4641      	mov	r1, r8
 800747e:	1851      	adds	r1, r2, r1
 8007480:	6739      	str	r1, [r7, #112]	@ 0x70
 8007482:	4649      	mov	r1, r9
 8007484:	414b      	adcs	r3, r1
 8007486:	677b      	str	r3, [r7, #116]	@ 0x74
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8007494:	4659      	mov	r1, fp
 8007496:	00cb      	lsls	r3, r1, #3
 8007498:	4651      	mov	r1, sl
 800749a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800749e:	4651      	mov	r1, sl
 80074a0:	00ca      	lsls	r2, r1, #3
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	4642      	mov	r2, r8
 80074aa:	189b      	adds	r3, r3, r2
 80074ac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80074b0:	464b      	mov	r3, r9
 80074b2:	460a      	mov	r2, r1
 80074b4:	eb42 0303 	adc.w	r3, r2, r3
 80074b8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80074bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80074c8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80074cc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80074d0:	460b      	mov	r3, r1
 80074d2:	18db      	adds	r3, r3, r3
 80074d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074d6:	4613      	mov	r3, r2
 80074d8:	eb42 0303 	adc.w	r3, r2, r3
 80074dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80074e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80074e6:	f7f8 fec3 	bl	8000270 <__aeabi_uldivmod>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	4b39      	ldr	r3, [pc, #228]	@ (80075d8 <UART_SetConfig+0x528>)
 80074f2:	fba3 2301 	umull	r2, r3, r3, r1
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	2264      	movs	r2, #100	@ 0x64
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	1acb      	subs	r3, r1, r3
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007506:	4b34      	ldr	r3, [pc, #208]	@ (80075d8 <UART_SetConfig+0x528>)
 8007508:	fba3 2302 	umull	r2, r3, r3, r2
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007514:	441c      	add	r4, r3
 8007516:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800751a:	2200      	movs	r2, #0
 800751c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8007520:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8007524:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	1891      	adds	r1, r2, r2
 800752e:	6639      	str	r1, [r7, #96]	@ 0x60
 8007530:	415b      	adcs	r3, r3
 8007532:	667b      	str	r3, [r7, #100]	@ 0x64
 8007534:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007538:	4641      	mov	r1, r8
 800753a:	1851      	adds	r1, r2, r1
 800753c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800753e:	4649      	mov	r1, r9
 8007540:	414b      	adcs	r3, r1
 8007542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8007550:	4659      	mov	r1, fp
 8007552:	00cb      	lsls	r3, r1, #3
 8007554:	4651      	mov	r1, sl
 8007556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755a:	4651      	mov	r1, sl
 800755c:	00ca      	lsls	r2, r1, #3
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	4603      	mov	r3, r0
 8007564:	4642      	mov	r2, r8
 8007566:	189b      	adds	r3, r3, r2
 8007568:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800756c:	464b      	mov	r3, r9
 800756e:	460a      	mov	r2, r1
 8007570:	eb42 0303 	adc.w	r3, r2, r3
 8007574:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8007578:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8007584:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8007588:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 800758c:	460b      	mov	r3, r1
 800758e:	18db      	adds	r3, r3, r3
 8007590:	653b      	str	r3, [r7, #80]	@ 0x50
 8007592:	4613      	mov	r3, r2
 8007594:	eb42 0303 	adc.w	r3, r2, r3
 8007598:	657b      	str	r3, [r7, #84]	@ 0x54
 800759a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800759e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80075a2:	f7f8 fe65 	bl	8000270 <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <UART_SetConfig+0x528>)
 80075ac:	fba3 1302 	umull	r1, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	2164      	movs	r1, #100	@ 0x64
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3332      	adds	r3, #50	@ 0x32
 80075be:	4a06      	ldr	r2, [pc, #24]	@ (80075d8 <UART_SetConfig+0x528>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0207 	and.w	r2, r3, #7
 80075ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4422      	add	r2, r4
 80075d2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075d4:	e233      	b.n	8007a3e <UART_SetConfig+0x98e>
 80075d6:	bf00      	nop
 80075d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007818 <UART_SetConfig+0x768>)
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d006      	beq.n	80075f6 <UART_SetConfig+0x546>
 80075e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b8b      	ldr	r3, [pc, #556]	@ (800781c <UART_SetConfig+0x76c>)
 80075f0:	429a      	cmp	r2, r3
 80075f2:	f040 8117 	bne.w	8007824 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f6:	f7fe f887 	bl	8005708 <HAL_RCC_GetPCLK2Freq>
 80075fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007602:	2200      	movs	r2, #0
 8007604:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8007608:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800760c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	1891      	adds	r1, r2, r2
 8007616:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007618:	415b      	adcs	r3, r3
 800761a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800761c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007620:	4621      	mov	r1, r4
 8007622:	eb12 0801 	adds.w	r8, r2, r1
 8007626:	4629      	mov	r1, r5
 8007628:	eb43 0901 	adc.w	r9, r3, r1
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800763c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007640:	4690      	mov	r8, r2
 8007642:	4699      	mov	r9, r3
 8007644:	4623      	mov	r3, r4
 8007646:	eb18 0303 	adds.w	r3, r8, r3
 800764a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800764e:	462b      	mov	r3, r5
 8007650:	eb49 0303 	adc.w	r3, r9, r3
 8007654:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8007658:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8007664:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8007674:	4629      	mov	r1, r5
 8007676:	008b      	lsls	r3, r1, #2
 8007678:	4621      	mov	r1, r4
 800767a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800767e:	4621      	mov	r1, r4
 8007680:	008a      	lsls	r2, r1, #2
 8007682:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8007686:	f7f8 fdf3 	bl	8000270 <__aeabi_uldivmod>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4b64      	ldr	r3, [pc, #400]	@ (8007820 <UART_SetConfig+0x770>)
 8007690:	fba3 2302 	umull	r2, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	011c      	lsls	r4, r3, #4
 8007698:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800769c:	2200      	movs	r2, #0
 800769e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80076a2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80076a6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80076aa:	4642      	mov	r2, r8
 80076ac:	464b      	mov	r3, r9
 80076ae:	1891      	adds	r1, r2, r2
 80076b0:	6439      	str	r1, [r7, #64]	@ 0x40
 80076b2:	415b      	adcs	r3, r3
 80076b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076ba:	4641      	mov	r1, r8
 80076bc:	1851      	adds	r1, r2, r1
 80076be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076c0:	4649      	mov	r1, r9
 80076c2:	414b      	adcs	r3, r1
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80076d2:	4659      	mov	r1, fp
 80076d4:	00cb      	lsls	r3, r1, #3
 80076d6:	4651      	mov	r1, sl
 80076d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076dc:	4651      	mov	r1, sl
 80076de:	00ca      	lsls	r2, r1, #3
 80076e0:	4610      	mov	r0, r2
 80076e2:	4619      	mov	r1, r3
 80076e4:	4603      	mov	r3, r0
 80076e6:	4642      	mov	r2, r8
 80076e8:	189b      	adds	r3, r3, r2
 80076ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80076ee:	464b      	mov	r3, r9
 80076f0:	460a      	mov	r2, r1
 80076f2:	eb42 0303 	adc.w	r3, r2, r3
 80076f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80076fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007706:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8007716:	4649      	mov	r1, r9
 8007718:	008b      	lsls	r3, r1, #2
 800771a:	4641      	mov	r1, r8
 800771c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007720:	4641      	mov	r1, r8
 8007722:	008a      	lsls	r2, r1, #2
 8007724:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8007728:	f7f8 fda2 	bl	8000270 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4611      	mov	r1, r2
 8007732:	4b3b      	ldr	r3, [pc, #236]	@ (8007820 <UART_SetConfig+0x770>)
 8007734:	fba3 2301 	umull	r2, r3, r3, r1
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2264      	movs	r2, #100	@ 0x64
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	1acb      	subs	r3, r1, r3
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	3332      	adds	r3, #50	@ 0x32
 8007746:	4a36      	ldr	r2, [pc, #216]	@ (8007820 <UART_SetConfig+0x770>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007752:	441c      	add	r4, r3
 8007754:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800775e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8007762:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8007766:	4642      	mov	r2, r8
 8007768:	464b      	mov	r3, r9
 800776a:	1891      	adds	r1, r2, r2
 800776c:	6339      	str	r1, [r7, #48]	@ 0x30
 800776e:	415b      	adcs	r3, r3
 8007770:	637b      	str	r3, [r7, #52]	@ 0x34
 8007772:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007776:	4641      	mov	r1, r8
 8007778:	1851      	adds	r1, r2, r1
 800777a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800777c:	4649      	mov	r1, r9
 800777e:	414b      	adcs	r3, r1
 8007780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800778e:	4659      	mov	r1, fp
 8007790:	00cb      	lsls	r3, r1, #3
 8007792:	4651      	mov	r1, sl
 8007794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007798:	4651      	mov	r1, sl
 800779a:	00ca      	lsls	r2, r1, #3
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	4642      	mov	r2, r8
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80077aa:	464b      	mov	r3, r9
 80077ac:	460a      	mov	r2, r1
 80077ae:	eb42 0303 	adc.w	r3, r2, r3
 80077b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80077b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80077c2:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80077d2:	4649      	mov	r1, r9
 80077d4:	008b      	lsls	r3, r1, #2
 80077d6:	4641      	mov	r1, r8
 80077d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077dc:	4641      	mov	r1, r8
 80077de:	008a      	lsls	r2, r1, #2
 80077e0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80077e4:	f7f8 fd44 	bl	8000270 <__aeabi_uldivmod>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <UART_SetConfig+0x770>)
 80077ee:	fba3 1302 	umull	r1, r3, r3, r2
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	2164      	movs	r1, #100	@ 0x64
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	3332      	adds	r3, #50	@ 0x32
 8007800:	4a07      	ldr	r2, [pc, #28]	@ (8007820 <UART_SetConfig+0x770>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	f003 020f 	and.w	r2, r3, #15
 800780c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4422      	add	r2, r4
 8007814:	609a      	str	r2, [r3, #8]
 8007816:	e112      	b.n	8007a3e <UART_SetConfig+0x98e>
 8007818:	40011000 	.word	0x40011000
 800781c:	40011400 	.word	0x40011400
 8007820:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8007824:	f7fd ff5c 	bl	80056e0 <HAL_RCC_GetPCLK1Freq>
 8007828:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800782c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007836:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800783a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 800783e:	4642      	mov	r2, r8
 8007840:	464b      	mov	r3, r9
 8007842:	1891      	adds	r1, r2, r2
 8007844:	6239      	str	r1, [r7, #32]
 8007846:	415b      	adcs	r3, r3
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
 800784a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800784e:	4641      	mov	r1, r8
 8007850:	1854      	adds	r4, r2, r1
 8007852:	4649      	mov	r1, r9
 8007854:	eb43 0501 	adc.w	r5, r3, r1
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	00eb      	lsls	r3, r5, #3
 8007862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007866:	00e2      	lsls	r2, r4, #3
 8007868:	4614      	mov	r4, r2
 800786a:	461d      	mov	r5, r3
 800786c:	4643      	mov	r3, r8
 800786e:	18e3      	adds	r3, r4, r3
 8007870:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007874:	464b      	mov	r3, r9
 8007876:	eb45 0303 	adc.w	r3, r5, r3
 800787a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800787e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800788a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800789a:	4629      	mov	r1, r5
 800789c:	008b      	lsls	r3, r1, #2
 800789e:	4621      	mov	r1, r4
 80078a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078a4:	4621      	mov	r1, r4
 80078a6:	008a      	lsls	r2, r1, #2
 80078a8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80078ac:	f7f8 fce0 	bl	8000270 <__aeabi_uldivmod>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4b65      	ldr	r3, [pc, #404]	@ (8007a4c <UART_SetConfig+0x99c>)
 80078b6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	011c      	lsls	r4, r3, #4
 80078be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078c8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80078cc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	1891      	adds	r1, r2, r2
 80078d6:	61b9      	str	r1, [r7, #24]
 80078d8:	415b      	adcs	r3, r3
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e0:	4641      	mov	r1, r8
 80078e2:	1851      	adds	r1, r2, r1
 80078e4:	6139      	str	r1, [r7, #16]
 80078e6:	4649      	mov	r1, r9
 80078e8:	414b      	adcs	r3, r1
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078f8:	4659      	mov	r1, fp
 80078fa:	00cb      	lsls	r3, r1, #3
 80078fc:	4651      	mov	r1, sl
 80078fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007902:	4651      	mov	r1, sl
 8007904:	00ca      	lsls	r2, r1, #3
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	4603      	mov	r3, r0
 800790c:	4642      	mov	r2, r8
 800790e:	189b      	adds	r3, r3, r2
 8007910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007914:	464b      	mov	r3, r9
 8007916:	460a      	mov	r2, r1
 8007918:	eb42 0303 	adc.w	r3, r2, r3
 800791c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007920:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800792c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800793c:	4649      	mov	r1, r9
 800793e:	008b      	lsls	r3, r1, #2
 8007940:	4641      	mov	r1, r8
 8007942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007946:	4641      	mov	r1, r8
 8007948:	008a      	lsls	r2, r1, #2
 800794a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800794e:	f7f8 fc8f 	bl	8000270 <__aeabi_uldivmod>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4611      	mov	r1, r2
 8007958:	4b3c      	ldr	r3, [pc, #240]	@ (8007a4c <UART_SetConfig+0x99c>)
 800795a:	fba3 2301 	umull	r2, r3, r3, r1
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	2264      	movs	r2, #100	@ 0x64
 8007962:	fb02 f303 	mul.w	r3, r2, r3
 8007966:	1acb      	subs	r3, r1, r3
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	3332      	adds	r3, #50	@ 0x32
 800796c:	4a37      	ldr	r2, [pc, #220]	@ (8007a4c <UART_SetConfig+0x99c>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007978:	441c      	add	r4, r3
 800797a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800797e:	2200      	movs	r2, #0
 8007980:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007984:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007988:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	1891      	adds	r1, r2, r2
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	415b      	adcs	r3, r3
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800799c:	4641      	mov	r1, r8
 800799e:	1851      	adds	r1, r2, r1
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	4649      	mov	r1, r9
 80079a4:	414b      	adcs	r3, r1
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079b4:	4659      	mov	r1, fp
 80079b6:	00cb      	lsls	r3, r1, #3
 80079b8:	4651      	mov	r1, sl
 80079ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079be:	4651      	mov	r1, sl
 80079c0:	00ca      	lsls	r2, r1, #3
 80079c2:	4610      	mov	r0, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	4642      	mov	r2, r8
 80079ca:	189b      	adds	r3, r3, r2
 80079cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079d0:	464b      	mov	r3, r9
 80079d2:	460a      	mov	r2, r1
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079e8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80079f8:	4649      	mov	r1, r9
 80079fa:	008b      	lsls	r3, r1, #2
 80079fc:	4641      	mov	r1, r8
 80079fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a02:	4641      	mov	r1, r8
 8007a04:	008a      	lsls	r2, r1, #2
 8007a06:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a0a:	f7f8 fc31 	bl	8000270 <__aeabi_uldivmod>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <UART_SetConfig+0x99c>)
 8007a14:	fba3 1302 	umull	r1, r3, r3, r2
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	2164      	movs	r1, #100	@ 0x64
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	3332      	adds	r3, #50	@ 0x32
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <UART_SetConfig+0x99c>)
 8007a28:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4422      	add	r2, r4
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	e7ff      	b.n	8007a3e <UART_SetConfig+0x98e>
 8007a3e:	bf00      	nop
 8007a40:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a4a:	bf00      	nop
 8007a4c:	51eb851f 	.word	0x51eb851f

08007a50 <siprintf>:
 8007a50:	b40e      	push	{r1, r2, r3}
 8007a52:	b500      	push	{lr}
 8007a54:	b09c      	sub	sp, #112	@ 0x70
 8007a56:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a58:	9002      	str	r0, [sp, #8]
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a60:	4809      	ldr	r0, [pc, #36]	@ (8007a88 <siprintf+0x38>)
 8007a62:	9107      	str	r1, [sp, #28]
 8007a64:	9104      	str	r1, [sp, #16]
 8007a66:	4909      	ldr	r1, [pc, #36]	@ (8007a8c <siprintf+0x3c>)
 8007a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6c:	9105      	str	r1, [sp, #20]
 8007a6e:	6800      	ldr	r0, [r0, #0]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	a902      	add	r1, sp, #8
 8007a74:	f000 f994 	bl	8007da0 <_svfiprintf_r>
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	b01c      	add	sp, #112	@ 0x70
 8007a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a84:	b003      	add	sp, #12
 8007a86:	4770      	bx	lr
 8007a88:	2000000c 	.word	0x2000000c
 8007a8c:	ffff0208 	.word	0xffff0208

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	@ (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	@ (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 fc66 	bl	8008390 <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	080084b0 	.word	0x080084b0
 8007ae8:	080084b0 	.word	0x080084b0
 8007aec:	080084b0 	.word	0x080084b0
 8007af0:	080084b4 	.word	0x080084b4

08007af4 <__retarget_lock_acquire_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_release_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <_free_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	2900      	cmp	r1, #0
 8007afe:	d041      	beq.n	8007b84 <_free_r+0x8c>
 8007b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b04:	1f0c      	subs	r4, r1, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	18e4      	addlt	r4, r4, r3
 8007b0c:	f000 f8e0 	bl	8007cd0 <__malloc_lock>
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <_free_r+0x90>)
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	b933      	cbnz	r3, 8007b24 <_free_r+0x2c>
 8007b16:	6063      	str	r3, [r4, #4]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b20:	f000 b8dc 	b.w	8007cdc <__malloc_unlock>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d908      	bls.n	8007b3a <_free_r+0x42>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf01      	itttt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	1809      	addeq	r1, r1, r0
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	e7ed      	b.n	8007b16 <_free_r+0x1e>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x4c>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x42>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1850      	adds	r0, r2, r1
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x6c>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	4401      	add	r1, r0
 8007b50:	1850      	adds	r0, r2, r1
 8007b52:	4283      	cmp	r3, r0
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1e0      	bne.n	8007b1a <_free_r+0x22>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4408      	add	r0, r1
 8007b60:	6010      	str	r0, [r2, #0]
 8007b62:	e7da      	b.n	8007b1a <_free_r+0x22>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x74>
 8007b66:	230c      	movs	r3, #12
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	e7d6      	b.n	8007b1a <_free_r+0x22>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1809      	addeq	r1, r1, r0
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7ca      	b.n	8007b1a <_free_r+0x22>
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	200005c0 	.word	0x200005c0

08007b8c <sbrk_aligned>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007bcc <sbrk_aligned+0x40>)
 8007b90:	460c      	mov	r4, r1
 8007b92:	6831      	ldr	r1, [r6, #0]
 8007b94:	4605      	mov	r5, r0
 8007b96:	b911      	cbnz	r1, 8007b9e <sbrk_aligned+0x12>
 8007b98:	f000 fba6 	bl	80082e8 <_sbrk_r>
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fba1 	bl	80082e8 <_sbrk_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d103      	bne.n	8007bb2 <sbrk_aligned+0x26>
 8007baa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bae:	4620      	mov	r0, r4
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	1cc4      	adds	r4, r0, #3
 8007bb4:	f024 0403 	bic.w	r4, r4, #3
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d0f8      	beq.n	8007bae <sbrk_aligned+0x22>
 8007bbc:	1a21      	subs	r1, r4, r0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fb92 	bl	80082e8 <_sbrk_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d1f2      	bne.n	8007bae <sbrk_aligned+0x22>
 8007bc8:	e7ef      	b.n	8007baa <sbrk_aligned+0x1e>
 8007bca:	bf00      	nop
 8007bcc:	200005bc 	.word	0x200005bc

08007bd0 <_malloc_r>:
 8007bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	1ccd      	adds	r5, r1, #3
 8007bd6:	f025 0503 	bic.w	r5, r5, #3
 8007bda:	3508      	adds	r5, #8
 8007bdc:	2d0c      	cmp	r5, #12
 8007bde:	bf38      	it	cc
 8007be0:	250c      	movcc	r5, #12
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	4606      	mov	r6, r0
 8007be6:	db01      	blt.n	8007bec <_malloc_r+0x1c>
 8007be8:	42a9      	cmp	r1, r5
 8007bea:	d904      	bls.n	8007bf6 <_malloc_r+0x26>
 8007bec:	230c      	movs	r3, #12
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ccc <_malloc_r+0xfc>
 8007bfa:	f000 f869 	bl	8007cd0 <__malloc_lock>
 8007bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007c02:	461c      	mov	r4, r3
 8007c04:	bb44      	cbnz	r4, 8007c58 <_malloc_r+0x88>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff ffbf 	bl	8007b8c <sbrk_aligned>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	4604      	mov	r4, r0
 8007c12:	d158      	bne.n	8007cc6 <_malloc_r+0xf6>
 8007c14:	f8d8 4000 	ldr.w	r4, [r8]
 8007c18:	4627      	mov	r7, r4
 8007c1a:	2f00      	cmp	r7, #0
 8007c1c:	d143      	bne.n	8007ca6 <_malloc_r+0xd6>
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	d04b      	beq.n	8007cba <_malloc_r+0xea>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4639      	mov	r1, r7
 8007c26:	4630      	mov	r0, r6
 8007c28:	eb04 0903 	add.w	r9, r4, r3
 8007c2c:	f000 fb5c 	bl	80082e8 <_sbrk_r>
 8007c30:	4581      	cmp	r9, r0
 8007c32:	d142      	bne.n	8007cba <_malloc_r+0xea>
 8007c34:	6821      	ldr	r1, [r4, #0]
 8007c36:	1a6d      	subs	r5, r5, r1
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7ff ffa6 	bl	8007b8c <sbrk_aligned>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d03a      	beq.n	8007cba <_malloc_r+0xea>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	442b      	add	r3, r5
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	bb62      	cbnz	r2, 8007cac <_malloc_r+0xdc>
 8007c52:	f8c8 7000 	str.w	r7, [r8]
 8007c56:	e00f      	b.n	8007c78 <_malloc_r+0xa8>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	1b52      	subs	r2, r2, r5
 8007c5c:	d420      	bmi.n	8007ca0 <_malloc_r+0xd0>
 8007c5e:	2a0b      	cmp	r2, #11
 8007c60:	d917      	bls.n	8007c92 <_malloc_r+0xc2>
 8007c62:	1961      	adds	r1, r4, r5
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	6025      	str	r5, [r4, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	6059      	strne	r1, [r3, #4]
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	bf08      	it	eq
 8007c70:	f8c8 1000 	streq.w	r1, [r8]
 8007c74:	5162      	str	r2, [r4, r5]
 8007c76:	604b      	str	r3, [r1, #4]
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 f82f 	bl	8007cdc <__malloc_unlock>
 8007c7e:	f104 000b 	add.w	r0, r4, #11
 8007c82:	1d23      	adds	r3, r4, #4
 8007c84:	f020 0007 	bic.w	r0, r0, #7
 8007c88:	1ac2      	subs	r2, r0, r3
 8007c8a:	bf1c      	itt	ne
 8007c8c:	1a1b      	subne	r3, r3, r0
 8007c8e:	50a3      	strne	r3, [r4, r2]
 8007c90:	e7af      	b.n	8007bf2 <_malloc_r+0x22>
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	bf0c      	ite	eq
 8007c98:	f8c8 2000 	streq.w	r2, [r8]
 8007c9c:	605a      	strne	r2, [r3, #4]
 8007c9e:	e7eb      	b.n	8007c78 <_malloc_r+0xa8>
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	6864      	ldr	r4, [r4, #4]
 8007ca4:	e7ae      	b.n	8007c04 <_malloc_r+0x34>
 8007ca6:	463c      	mov	r4, r7
 8007ca8:	687f      	ldr	r7, [r7, #4]
 8007caa:	e7b6      	b.n	8007c1a <_malloc_r+0x4a>
 8007cac:	461a      	mov	r2, r3
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d1fb      	bne.n	8007cac <_malloc_r+0xdc>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6053      	str	r3, [r2, #4]
 8007cb8:	e7de      	b.n	8007c78 <_malloc_r+0xa8>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 f80c 	bl	8007cdc <__malloc_unlock>
 8007cc4:	e794      	b.n	8007bf0 <_malloc_r+0x20>
 8007cc6:	6005      	str	r5, [r0, #0]
 8007cc8:	e7d6      	b.n	8007c78 <_malloc_r+0xa8>
 8007cca:	bf00      	nop
 8007ccc:	200005c0 	.word	0x200005c0

08007cd0 <__malloc_lock>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	@ (8007cd8 <__malloc_lock+0x8>)
 8007cd2:	f7ff bf0f 	b.w	8007af4 <__retarget_lock_acquire_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	200005b8 	.word	0x200005b8

08007cdc <__malloc_unlock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	@ (8007ce4 <__malloc_unlock+0x8>)
 8007cde:	f7ff bf0a 	b.w	8007af6 <__retarget_lock_release_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	200005b8 	.word	0x200005b8

08007ce8 <__ssputs_r>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	688e      	ldr	r6, [r1, #8]
 8007cee:	461f      	mov	r7, r3
 8007cf0:	42be      	cmp	r6, r7
 8007cf2:	680b      	ldr	r3, [r1, #0]
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4690      	mov	r8, r2
 8007cfa:	d82d      	bhi.n	8007d58 <__ssputs_r+0x70>
 8007cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d04:	d026      	beq.n	8007d54 <__ssputs_r+0x6c>
 8007d06:	6965      	ldr	r5, [r4, #20]
 8007d08:	6909      	ldr	r1, [r1, #16]
 8007d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d0e:	eba3 0901 	sub.w	r9, r3, r1
 8007d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d16:	1c7b      	adds	r3, r7, #1
 8007d18:	444b      	add	r3, r9
 8007d1a:	106d      	asrs	r5, r5, #1
 8007d1c:	429d      	cmp	r5, r3
 8007d1e:	bf38      	it	cc
 8007d20:	461d      	movcc	r5, r3
 8007d22:	0553      	lsls	r3, r2, #21
 8007d24:	d527      	bpl.n	8007d76 <__ssputs_r+0x8e>
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7ff ff52 	bl	8007bd0 <_malloc_r>
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	b360      	cbz	r0, 8007d8a <__ssputs_r+0xa2>
 8007d30:	6921      	ldr	r1, [r4, #16]
 8007d32:	464a      	mov	r2, r9
 8007d34:	f000 fae8 	bl	8008308 <memcpy>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	6126      	str	r6, [r4, #16]
 8007d46:	6165      	str	r5, [r4, #20]
 8007d48:	444e      	add	r6, r9
 8007d4a:	eba5 0509 	sub.w	r5, r5, r9
 8007d4e:	6026      	str	r6, [r4, #0]
 8007d50:	60a5      	str	r5, [r4, #8]
 8007d52:	463e      	mov	r6, r7
 8007d54:	42be      	cmp	r6, r7
 8007d56:	d900      	bls.n	8007d5a <__ssputs_r+0x72>
 8007d58:	463e      	mov	r6, r7
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4641      	mov	r1, r8
 8007d60:	f000 faa8 	bl	80082b4 <memmove>
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	1b9b      	subs	r3, r3, r6
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	4433      	add	r3, r6
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	2000      	movs	r0, #0
 8007d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d76:	462a      	mov	r2, r5
 8007d78:	f000 fad4 	bl	8008324 <_realloc_r>
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d1e0      	bne.n	8007d44 <__ssputs_r+0x5c>
 8007d82:	6921      	ldr	r1, [r4, #16]
 8007d84:	4650      	mov	r0, sl
 8007d86:	f7ff feb7 	bl	8007af8 <_free_r>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	f8ca 3000 	str.w	r3, [sl]
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d9c:	e7e9      	b.n	8007d72 <__ssputs_r+0x8a>
	...

08007da0 <_svfiprintf_r>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	4698      	mov	r8, r3
 8007da6:	898b      	ldrh	r3, [r1, #12]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	b09d      	sub	sp, #116	@ 0x74
 8007dac:	4607      	mov	r7, r0
 8007dae:	460d      	mov	r5, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	d510      	bpl.n	8007dd6 <_svfiprintf_r+0x36>
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	b973      	cbnz	r3, 8007dd6 <_svfiprintf_r+0x36>
 8007db8:	2140      	movs	r1, #64	@ 0x40
 8007dba:	f7ff ff09 	bl	8007bd0 <_malloc_r>
 8007dbe:	6028      	str	r0, [r5, #0]
 8007dc0:	6128      	str	r0, [r5, #16]
 8007dc2:	b930      	cbnz	r0, 8007dd2 <_svfiprintf_r+0x32>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dcc:	b01d      	add	sp, #116	@ 0x74
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	2340      	movs	r3, #64	@ 0x40
 8007dd4:	616b      	str	r3, [r5, #20]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dda:	2320      	movs	r3, #32
 8007ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de4:	2330      	movs	r3, #48	@ 0x30
 8007de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f84 <_svfiprintf_r+0x1e4>
 8007dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dee:	f04f 0901 	mov.w	r9, #1
 8007df2:	4623      	mov	r3, r4
 8007df4:	469a      	mov	sl, r3
 8007df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dfa:	b10a      	cbz	r2, 8007e00 <_svfiprintf_r+0x60>
 8007dfc:	2a25      	cmp	r2, #37	@ 0x25
 8007dfe:	d1f9      	bne.n	8007df4 <_svfiprintf_r+0x54>
 8007e00:	ebba 0b04 	subs.w	fp, sl, r4
 8007e04:	d00b      	beq.n	8007e1e <_svfiprintf_r+0x7e>
 8007e06:	465b      	mov	r3, fp
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ff6b 	bl	8007ce8 <__ssputs_r>
 8007e12:	3001      	adds	r0, #1
 8007e14:	f000 80a7 	beq.w	8007f66 <_svfiprintf_r+0x1c6>
 8007e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e1a:	445a      	add	r2, fp
 8007e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 809f 	beq.w	8007f66 <_svfiprintf_r+0x1c6>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e32:	f10a 0a01 	add.w	sl, sl, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e40:	4654      	mov	r4, sl
 8007e42:	2205      	movs	r2, #5
 8007e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e48:	484e      	ldr	r0, [pc, #312]	@ (8007f84 <_svfiprintf_r+0x1e4>)
 8007e4a:	f7f8 f9c1 	bl	80001d0 <memchr>
 8007e4e:	9a04      	ldr	r2, [sp, #16]
 8007e50:	b9d8      	cbnz	r0, 8007e8a <_svfiprintf_r+0xea>
 8007e52:	06d0      	lsls	r0, r2, #27
 8007e54:	bf44      	itt	mi
 8007e56:	2320      	movmi	r3, #32
 8007e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5c:	0711      	lsls	r1, r2, #28
 8007e5e:	bf44      	itt	mi
 8007e60:	232b      	movmi	r3, #43	@ 0x2b
 8007e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e66:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6c:	d015      	beq.n	8007e9a <_svfiprintf_r+0xfa>
 8007e6e:	9a07      	ldr	r2, [sp, #28]
 8007e70:	4654      	mov	r4, sl
 8007e72:	2000      	movs	r0, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7e:	3b30      	subs	r3, #48	@ 0x30
 8007e80:	2b09      	cmp	r3, #9
 8007e82:	d94b      	bls.n	8007f1c <_svfiprintf_r+0x17c>
 8007e84:	b1b0      	cbz	r0, 8007eb4 <_svfiprintf_r+0x114>
 8007e86:	9207      	str	r2, [sp, #28]
 8007e88:	e014      	b.n	8007eb4 <_svfiprintf_r+0x114>
 8007e8a:	eba0 0308 	sub.w	r3, r0, r8
 8007e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	46a2      	mov	sl, r4
 8007e98:	e7d2      	b.n	8007e40 <_svfiprintf_r+0xa0>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	1d19      	adds	r1, r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9103      	str	r1, [sp, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfbb      	ittet	lt
 8007ea6:	425b      	neglt	r3, r3
 8007ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8007eac:	9307      	strge	r3, [sp, #28]
 8007eae:	9307      	strlt	r3, [sp, #28]
 8007eb0:	bfb8      	it	lt
 8007eb2:	9204      	strlt	r2, [sp, #16]
 8007eb4:	7823      	ldrb	r3, [r4, #0]
 8007eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb8:	d10a      	bne.n	8007ed0 <_svfiprintf_r+0x130>
 8007eba:	7863      	ldrb	r3, [r4, #1]
 8007ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ebe:	d132      	bne.n	8007f26 <_svfiprintf_r+0x186>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	9203      	str	r2, [sp, #12]
 8007ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ecc:	3402      	adds	r4, #2
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f94 <_svfiprintf_r+0x1f4>
 8007ed4:	7821      	ldrb	r1, [r4, #0]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f7f8 f979 	bl	80001d0 <memchr>
 8007ede:	b138      	cbz	r0, 8007ef0 <_svfiprintf_r+0x150>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	eba0 000a 	sub.w	r0, r0, sl
 8007ee6:	2240      	movs	r2, #64	@ 0x40
 8007ee8:	4082      	lsls	r2, r0
 8007eea:	4313      	orrs	r3, r2
 8007eec:	3401      	adds	r4, #1
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef4:	4824      	ldr	r0, [pc, #144]	@ (8007f88 <_svfiprintf_r+0x1e8>)
 8007ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007efa:	2206      	movs	r2, #6
 8007efc:	f7f8 f968 	bl	80001d0 <memchr>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d036      	beq.n	8007f72 <_svfiprintf_r+0x1d2>
 8007f04:	4b21      	ldr	r3, [pc, #132]	@ (8007f8c <_svfiprintf_r+0x1ec>)
 8007f06:	bb1b      	cbnz	r3, 8007f50 <_svfiprintf_r+0x1b0>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	f023 0307 	bic.w	r3, r3, #7
 8007f10:	3308      	adds	r3, #8
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f16:	4433      	add	r3, r6
 8007f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1a:	e76a      	b.n	8007df2 <_svfiprintf_r+0x52>
 8007f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f20:	460c      	mov	r4, r1
 8007f22:	2001      	movs	r0, #1
 8007f24:	e7a8      	b.n	8007e78 <_svfiprintf_r+0xd8>
 8007f26:	2300      	movs	r3, #0
 8007f28:	3401      	adds	r4, #1
 8007f2a:	9305      	str	r3, [sp, #20]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f04f 0c0a 	mov.w	ip, #10
 8007f32:	4620      	mov	r0, r4
 8007f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f38:	3a30      	subs	r2, #48	@ 0x30
 8007f3a:	2a09      	cmp	r2, #9
 8007f3c:	d903      	bls.n	8007f46 <_svfiprintf_r+0x1a6>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0c6      	beq.n	8007ed0 <_svfiprintf_r+0x130>
 8007f42:	9105      	str	r1, [sp, #20]
 8007f44:	e7c4      	b.n	8007ed0 <_svfiprintf_r+0x130>
 8007f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e7f0      	b.n	8007f32 <_svfiprintf_r+0x192>
 8007f50:	ab03      	add	r3, sp, #12
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	462a      	mov	r2, r5
 8007f56:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <_svfiprintf_r+0x1f0>)
 8007f58:	a904      	add	r1, sp, #16
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f3af 8000 	nop.w
 8007f60:	1c42      	adds	r2, r0, #1
 8007f62:	4606      	mov	r6, r0
 8007f64:	d1d6      	bne.n	8007f14 <_svfiprintf_r+0x174>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	065b      	lsls	r3, r3, #25
 8007f6a:	f53f af2d 	bmi.w	8007dc8 <_svfiprintf_r+0x28>
 8007f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f70:	e72c      	b.n	8007dcc <_svfiprintf_r+0x2c>
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	462a      	mov	r2, r5
 8007f78:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <_svfiprintf_r+0x1f0>)
 8007f7a:	a904      	add	r1, sp, #16
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f000 f879 	bl	8008074 <_printf_i>
 8007f82:	e7ed      	b.n	8007f60 <_svfiprintf_r+0x1c0>
 8007f84:	08008474 	.word	0x08008474
 8007f88:	0800847e 	.word	0x0800847e
 8007f8c:	00000000 	.word	0x00000000
 8007f90:	08007ce9 	.word	0x08007ce9
 8007f94:	0800847a 	.word	0x0800847a

08007f98 <_printf_common>:
 8007f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	4698      	mov	r8, r3
 8007fa0:	688a      	ldr	r2, [r1, #8]
 8007fa2:	690b      	ldr	r3, [r1, #16]
 8007fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	bfb8      	it	lt
 8007fac:	4613      	movlt	r3, r2
 8007fae:	6033      	str	r3, [r6, #0]
 8007fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b10a      	cbz	r2, 8007fbe <_printf_common+0x26>
 8007fba:	3301      	adds	r3, #1
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	0699      	lsls	r1, r3, #26
 8007fc2:	bf42      	ittt	mi
 8007fc4:	6833      	ldrmi	r3, [r6, #0]
 8007fc6:	3302      	addmi	r3, #2
 8007fc8:	6033      	strmi	r3, [r6, #0]
 8007fca:	6825      	ldr	r5, [r4, #0]
 8007fcc:	f015 0506 	ands.w	r5, r5, #6
 8007fd0:	d106      	bne.n	8007fe0 <_printf_common+0x48>
 8007fd2:	f104 0a19 	add.w	sl, r4, #25
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	6832      	ldr	r2, [r6, #0]
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dc26      	bgt.n	800802e <_printf_common+0x96>
 8007fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	3b00      	subs	r3, #0
 8007fe8:	bf18      	it	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	0692      	lsls	r2, r2, #26
 8007fee:	d42b      	bmi.n	8008048 <_printf_common+0xb0>
 8007ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	47c8      	blx	r9
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d01e      	beq.n	800803c <_printf_common+0xa4>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	6922      	ldr	r2, [r4, #16]
 8008002:	f003 0306 	and.w	r3, r3, #6
 8008006:	2b04      	cmp	r3, #4
 8008008:	bf02      	ittt	eq
 800800a:	68e5      	ldreq	r5, [r4, #12]
 800800c:	6833      	ldreq	r3, [r6, #0]
 800800e:	1aed      	subeq	r5, r5, r3
 8008010:	68a3      	ldr	r3, [r4, #8]
 8008012:	bf0c      	ite	eq
 8008014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008018:	2500      	movne	r5, #0
 800801a:	4293      	cmp	r3, r2
 800801c:	bfc4      	itt	gt
 800801e:	1a9b      	subgt	r3, r3, r2
 8008020:	18ed      	addgt	r5, r5, r3
 8008022:	2600      	movs	r6, #0
 8008024:	341a      	adds	r4, #26
 8008026:	42b5      	cmp	r5, r6
 8008028:	d11a      	bne.n	8008060 <_printf_common+0xc8>
 800802a:	2000      	movs	r0, #0
 800802c:	e008      	b.n	8008040 <_printf_common+0xa8>
 800802e:	2301      	movs	r3, #1
 8008030:	4652      	mov	r2, sl
 8008032:	4641      	mov	r1, r8
 8008034:	4638      	mov	r0, r7
 8008036:	47c8      	blx	r9
 8008038:	3001      	adds	r0, #1
 800803a:	d103      	bne.n	8008044 <_printf_common+0xac>
 800803c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	3501      	adds	r5, #1
 8008046:	e7c6      	b.n	8007fd6 <_printf_common+0x3e>
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	2030      	movs	r0, #48	@ 0x30
 800804e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008052:	4422      	add	r2, r4
 8008054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800805c:	3302      	adds	r3, #2
 800805e:	e7c7      	b.n	8007ff0 <_printf_common+0x58>
 8008060:	2301      	movs	r3, #1
 8008062:	4622      	mov	r2, r4
 8008064:	4641      	mov	r1, r8
 8008066:	4638      	mov	r0, r7
 8008068:	47c8      	blx	r9
 800806a:	3001      	adds	r0, #1
 800806c:	d0e6      	beq.n	800803c <_printf_common+0xa4>
 800806e:	3601      	adds	r6, #1
 8008070:	e7d9      	b.n	8008026 <_printf_common+0x8e>
	...

08008074 <_printf_i>:
 8008074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	7e0f      	ldrb	r7, [r1, #24]
 800807a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800807c:	2f78      	cmp	r7, #120	@ 0x78
 800807e:	4691      	mov	r9, r2
 8008080:	4680      	mov	r8, r0
 8008082:	460c      	mov	r4, r1
 8008084:	469a      	mov	sl, r3
 8008086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800808a:	d807      	bhi.n	800809c <_printf_i+0x28>
 800808c:	2f62      	cmp	r7, #98	@ 0x62
 800808e:	d80a      	bhi.n	80080a6 <_printf_i+0x32>
 8008090:	2f00      	cmp	r7, #0
 8008092:	f000 80d2 	beq.w	800823a <_printf_i+0x1c6>
 8008096:	2f58      	cmp	r7, #88	@ 0x58
 8008098:	f000 80b9 	beq.w	800820e <_printf_i+0x19a>
 800809c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080a4:	e03a      	b.n	800811c <_printf_i+0xa8>
 80080a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080aa:	2b15      	cmp	r3, #21
 80080ac:	d8f6      	bhi.n	800809c <_printf_i+0x28>
 80080ae:	a101      	add	r1, pc, #4	@ (adr r1, 80080b4 <_printf_i+0x40>)
 80080b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b4:	0800810d 	.word	0x0800810d
 80080b8:	08008121 	.word	0x08008121
 80080bc:	0800809d 	.word	0x0800809d
 80080c0:	0800809d 	.word	0x0800809d
 80080c4:	0800809d 	.word	0x0800809d
 80080c8:	0800809d 	.word	0x0800809d
 80080cc:	08008121 	.word	0x08008121
 80080d0:	0800809d 	.word	0x0800809d
 80080d4:	0800809d 	.word	0x0800809d
 80080d8:	0800809d 	.word	0x0800809d
 80080dc:	0800809d 	.word	0x0800809d
 80080e0:	08008221 	.word	0x08008221
 80080e4:	0800814b 	.word	0x0800814b
 80080e8:	080081db 	.word	0x080081db
 80080ec:	0800809d 	.word	0x0800809d
 80080f0:	0800809d 	.word	0x0800809d
 80080f4:	08008243 	.word	0x08008243
 80080f8:	0800809d 	.word	0x0800809d
 80080fc:	0800814b 	.word	0x0800814b
 8008100:	0800809d 	.word	0x0800809d
 8008104:	0800809d 	.word	0x0800809d
 8008108:	080081e3 	.word	0x080081e3
 800810c:	6833      	ldr	r3, [r6, #0]
 800810e:	1d1a      	adds	r2, r3, #4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6032      	str	r2, [r6, #0]
 8008114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800811c:	2301      	movs	r3, #1
 800811e:	e09d      	b.n	800825c <_printf_i+0x1e8>
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	6820      	ldr	r0, [r4, #0]
 8008124:	1d19      	adds	r1, r3, #4
 8008126:	6031      	str	r1, [r6, #0]
 8008128:	0606      	lsls	r6, r0, #24
 800812a:	d501      	bpl.n	8008130 <_printf_i+0xbc>
 800812c:	681d      	ldr	r5, [r3, #0]
 800812e:	e003      	b.n	8008138 <_printf_i+0xc4>
 8008130:	0645      	lsls	r5, r0, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0xb8>
 8008134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008138:	2d00      	cmp	r5, #0
 800813a:	da03      	bge.n	8008144 <_printf_i+0xd0>
 800813c:	232d      	movs	r3, #45	@ 0x2d
 800813e:	426d      	negs	r5, r5
 8008140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008144:	4859      	ldr	r0, [pc, #356]	@ (80082ac <_printf_i+0x238>)
 8008146:	230a      	movs	r3, #10
 8008148:	e011      	b.n	800816e <_printf_i+0xfa>
 800814a:	6821      	ldr	r1, [r4, #0]
 800814c:	6833      	ldr	r3, [r6, #0]
 800814e:	0608      	lsls	r0, r1, #24
 8008150:	f853 5b04 	ldr.w	r5, [r3], #4
 8008154:	d402      	bmi.n	800815c <_printf_i+0xe8>
 8008156:	0649      	lsls	r1, r1, #25
 8008158:	bf48      	it	mi
 800815a:	b2ad      	uxthmi	r5, r5
 800815c:	2f6f      	cmp	r7, #111	@ 0x6f
 800815e:	4853      	ldr	r0, [pc, #332]	@ (80082ac <_printf_i+0x238>)
 8008160:	6033      	str	r3, [r6, #0]
 8008162:	bf14      	ite	ne
 8008164:	230a      	movne	r3, #10
 8008166:	2308      	moveq	r3, #8
 8008168:	2100      	movs	r1, #0
 800816a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800816e:	6866      	ldr	r6, [r4, #4]
 8008170:	60a6      	str	r6, [r4, #8]
 8008172:	2e00      	cmp	r6, #0
 8008174:	bfa2      	ittt	ge
 8008176:	6821      	ldrge	r1, [r4, #0]
 8008178:	f021 0104 	bicge.w	r1, r1, #4
 800817c:	6021      	strge	r1, [r4, #0]
 800817e:	b90d      	cbnz	r5, 8008184 <_printf_i+0x110>
 8008180:	2e00      	cmp	r6, #0
 8008182:	d04b      	beq.n	800821c <_printf_i+0x1a8>
 8008184:	4616      	mov	r6, r2
 8008186:	fbb5 f1f3 	udiv	r1, r5, r3
 800818a:	fb03 5711 	mls	r7, r3, r1, r5
 800818e:	5dc7      	ldrb	r7, [r0, r7]
 8008190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008194:	462f      	mov	r7, r5
 8008196:	42bb      	cmp	r3, r7
 8008198:	460d      	mov	r5, r1
 800819a:	d9f4      	bls.n	8008186 <_printf_i+0x112>
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10b      	bne.n	80081b8 <_printf_i+0x144>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07df      	lsls	r7, r3, #31
 80081a4:	d508      	bpl.n	80081b8 <_printf_i+0x144>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4299      	cmp	r1, r3
 80081ac:	bfde      	ittt	le
 80081ae:	2330      	movle	r3, #48	@ 0x30
 80081b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80081b8:	1b92      	subs	r2, r2, r6
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	f8cd a000 	str.w	sl, [sp]
 80081c0:	464b      	mov	r3, r9
 80081c2:	aa03      	add	r2, sp, #12
 80081c4:	4621      	mov	r1, r4
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7ff fee6 	bl	8007f98 <_printf_common>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d14a      	bne.n	8008266 <_printf_i+0x1f2>
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081d4:	b004      	add	sp, #16
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f043 0320 	orr.w	r3, r3, #32
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	4833      	ldr	r0, [pc, #204]	@ (80082b0 <_printf_i+0x23c>)
 80081e4:	2778      	movs	r7, #120	@ 0x78
 80081e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	6831      	ldr	r1, [r6, #0]
 80081ee:	061f      	lsls	r7, r3, #24
 80081f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80081f4:	d402      	bmi.n	80081fc <_printf_i+0x188>
 80081f6:	065f      	lsls	r7, r3, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2ad      	uxthmi	r5, r5
 80081fc:	6031      	str	r1, [r6, #0]
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	bf44      	itt	mi
 8008202:	f043 0320 	orrmi.w	r3, r3, #32
 8008206:	6023      	strmi	r3, [r4, #0]
 8008208:	b11d      	cbz	r5, 8008212 <_printf_i+0x19e>
 800820a:	2310      	movs	r3, #16
 800820c:	e7ac      	b.n	8008168 <_printf_i+0xf4>
 800820e:	4827      	ldr	r0, [pc, #156]	@ (80082ac <_printf_i+0x238>)
 8008210:	e7e9      	b.n	80081e6 <_printf_i+0x172>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	f023 0320 	bic.w	r3, r3, #32
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	e7f6      	b.n	800820a <_printf_i+0x196>
 800821c:	4616      	mov	r6, r2
 800821e:	e7bd      	b.n	800819c <_printf_i+0x128>
 8008220:	6833      	ldr	r3, [r6, #0]
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	6961      	ldr	r1, [r4, #20]
 8008226:	1d18      	adds	r0, r3, #4
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	062e      	lsls	r6, r5, #24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	d501      	bpl.n	8008234 <_printf_i+0x1c0>
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	e002      	b.n	800823a <_printf_i+0x1c6>
 8008234:	0668      	lsls	r0, r5, #25
 8008236:	d5fb      	bpl.n	8008230 <_printf_i+0x1bc>
 8008238:	8019      	strh	r1, [r3, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	4616      	mov	r6, r2
 8008240:	e7bc      	b.n	80081bc <_printf_i+0x148>
 8008242:	6833      	ldr	r3, [r6, #0]
 8008244:	1d1a      	adds	r2, r3, #4
 8008246:	6032      	str	r2, [r6, #0]
 8008248:	681e      	ldr	r6, [r3, #0]
 800824a:	6862      	ldr	r2, [r4, #4]
 800824c:	2100      	movs	r1, #0
 800824e:	4630      	mov	r0, r6
 8008250:	f7f7 ffbe 	bl	80001d0 <memchr>
 8008254:	b108      	cbz	r0, 800825a <_printf_i+0x1e6>
 8008256:	1b80      	subs	r0, r0, r6
 8008258:	6060      	str	r0, [r4, #4]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	2300      	movs	r3, #0
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008264:	e7aa      	b.n	80081bc <_printf_i+0x148>
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	4632      	mov	r2, r6
 800826a:	4649      	mov	r1, r9
 800826c:	4640      	mov	r0, r8
 800826e:	47d0      	blx	sl
 8008270:	3001      	adds	r0, #1
 8008272:	d0ad      	beq.n	80081d0 <_printf_i+0x15c>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	079b      	lsls	r3, r3, #30
 8008278:	d413      	bmi.n	80082a2 <_printf_i+0x22e>
 800827a:	68e0      	ldr	r0, [r4, #12]
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	4298      	cmp	r0, r3
 8008280:	bfb8      	it	lt
 8008282:	4618      	movlt	r0, r3
 8008284:	e7a6      	b.n	80081d4 <_printf_i+0x160>
 8008286:	2301      	movs	r3, #1
 8008288:	4632      	mov	r2, r6
 800828a:	4649      	mov	r1, r9
 800828c:	4640      	mov	r0, r8
 800828e:	47d0      	blx	sl
 8008290:	3001      	adds	r0, #1
 8008292:	d09d      	beq.n	80081d0 <_printf_i+0x15c>
 8008294:	3501      	adds	r5, #1
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	9903      	ldr	r1, [sp, #12]
 800829a:	1a5b      	subs	r3, r3, r1
 800829c:	42ab      	cmp	r3, r5
 800829e:	dcf2      	bgt.n	8008286 <_printf_i+0x212>
 80082a0:	e7eb      	b.n	800827a <_printf_i+0x206>
 80082a2:	2500      	movs	r5, #0
 80082a4:	f104 0619 	add.w	r6, r4, #25
 80082a8:	e7f5      	b.n	8008296 <_printf_i+0x222>
 80082aa:	bf00      	nop
 80082ac:	08008485 	.word	0x08008485
 80082b0:	08008496 	.word	0x08008496

080082b4 <memmove>:
 80082b4:	4288      	cmp	r0, r1
 80082b6:	b510      	push	{r4, lr}
 80082b8:	eb01 0402 	add.w	r4, r1, r2
 80082bc:	d902      	bls.n	80082c4 <memmove+0x10>
 80082be:	4284      	cmp	r4, r0
 80082c0:	4623      	mov	r3, r4
 80082c2:	d807      	bhi.n	80082d4 <memmove+0x20>
 80082c4:	1e43      	subs	r3, r0, #1
 80082c6:	42a1      	cmp	r1, r4
 80082c8:	d008      	beq.n	80082dc <memmove+0x28>
 80082ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d2:	e7f8      	b.n	80082c6 <memmove+0x12>
 80082d4:	4402      	add	r2, r0
 80082d6:	4601      	mov	r1, r0
 80082d8:	428a      	cmp	r2, r1
 80082da:	d100      	bne.n	80082de <memmove+0x2a>
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082e6:	e7f7      	b.n	80082d8 <memmove+0x24>

080082e8 <_sbrk_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d06      	ldr	r5, [pc, #24]	@ (8008304 <_sbrk_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7f9 fb40 	bl	8001978 <_sbrk>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_sbrk_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_sbrk_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	200005b4 	.word	0x200005b4

08008308 <memcpy>:
 8008308:	440a      	add	r2, r1
 800830a:	4291      	cmp	r1, r2
 800830c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008310:	d100      	bne.n	8008314 <memcpy+0xc>
 8008312:	4770      	bx	lr
 8008314:	b510      	push	{r4, lr}
 8008316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800831e:	4291      	cmp	r1, r2
 8008320:	d1f9      	bne.n	8008316 <memcpy+0xe>
 8008322:	bd10      	pop	{r4, pc}

08008324 <_realloc_r>:
 8008324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008328:	4680      	mov	r8, r0
 800832a:	4615      	mov	r5, r2
 800832c:	460c      	mov	r4, r1
 800832e:	b921      	cbnz	r1, 800833a <_realloc_r+0x16>
 8008330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008334:	4611      	mov	r1, r2
 8008336:	f7ff bc4b 	b.w	8007bd0 <_malloc_r>
 800833a:	b92a      	cbnz	r2, 8008348 <_realloc_r+0x24>
 800833c:	f7ff fbdc 	bl	8007af8 <_free_r>
 8008340:	2400      	movs	r4, #0
 8008342:	4620      	mov	r0, r4
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	f000 f81a 	bl	8008380 <_malloc_usable_size_r>
 800834c:	4285      	cmp	r5, r0
 800834e:	4606      	mov	r6, r0
 8008350:	d802      	bhi.n	8008358 <_realloc_r+0x34>
 8008352:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008356:	d8f4      	bhi.n	8008342 <_realloc_r+0x1e>
 8008358:	4629      	mov	r1, r5
 800835a:	4640      	mov	r0, r8
 800835c:	f7ff fc38 	bl	8007bd0 <_malloc_r>
 8008360:	4607      	mov	r7, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d0ec      	beq.n	8008340 <_realloc_r+0x1c>
 8008366:	42b5      	cmp	r5, r6
 8008368:	462a      	mov	r2, r5
 800836a:	4621      	mov	r1, r4
 800836c:	bf28      	it	cs
 800836e:	4632      	movcs	r2, r6
 8008370:	f7ff ffca 	bl	8008308 <memcpy>
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff fbbe 	bl	8007af8 <_free_r>
 800837c:	463c      	mov	r4, r7
 800837e:	e7e0      	b.n	8008342 <_realloc_r+0x1e>

08008380 <_malloc_usable_size_r>:
 8008380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008384:	1f18      	subs	r0, r3, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfbc      	itt	lt
 800838a:	580b      	ldrlt	r3, [r1, r0]
 800838c:	18c0      	addlt	r0, r0, r3
 800838e:	4770      	bx	lr

08008390 <_init>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr

0800839c <_fini>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr
